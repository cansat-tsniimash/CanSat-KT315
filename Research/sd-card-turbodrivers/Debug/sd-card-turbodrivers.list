
sd-card-turbodrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000055bc  08000198  08000198  00010198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000108  08005754  08005754  00015754  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800585c  0800585c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  0800585c  0800585c  0001585c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005864  08005864  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005864  08005864  00015864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005868  08005868  00015868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  0800586c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000540  2000000c  08005878  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000054c  08005878  0002054c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001009c  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024ec  00000000  00000000  000300d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ab0  00000000  00000000  000325c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000998  00000000  00000000  00033078  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001758a  00000000  00000000  00033a10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e390  00000000  00000000  0004af9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000895cd  00000000  00000000  0005932a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e28f7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002a3c  00000000  00000000  000e294c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000000c 	.word	0x2000000c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800573c 	.word	0x0800573c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000010 	.word	0x20000010
 80001d4:	0800573c 	.word	0x0800573c

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96e 	b.w	80004cc <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468c      	mov	ip, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	f040 8083 	bne.w	800031e <__udivmoddi4+0x116>
 8000218:	428a      	cmp	r2, r1
 800021a:	4617      	mov	r7, r2
 800021c:	d947      	bls.n	80002ae <__udivmoddi4+0xa6>
 800021e:	fab2 f282 	clz	r2, r2
 8000222:	b142      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000224:	f1c2 0020 	rsb	r0, r2, #32
 8000228:	fa24 f000 	lsr.w	r0, r4, r0
 800022c:	4091      	lsls	r1, r2
 800022e:	4097      	lsls	r7, r2
 8000230:	ea40 0c01 	orr.w	ip, r0, r1
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbbc f6f8 	udiv	r6, ip, r8
 8000240:	fa1f fe87 	uxth.w	lr, r7
 8000244:	fb08 c116 	mls	r1, r8, r6, ip
 8000248:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024c:	fb06 f10e 	mul.w	r1, r6, lr
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18fb      	adds	r3, r7, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 8119 	bcs.w	8000490 <__udivmoddi4+0x288>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8116 	bls.w	8000490 <__udivmoddi4+0x288>
 8000264:	3e02      	subs	r6, #2
 8000266:	443b      	add	r3, r7
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fe0e 	mul.w	lr, r0, lr
 800027c:	45a6      	cmp	lr, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	193c      	adds	r4, r7, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8105 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800028a:	45a6      	cmp	lr, r4
 800028c:	f240 8102 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000298:	eba4 040e 	sub.w	r4, r4, lr
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	b902      	cbnz	r2, 80002b2 <__udivmoddi4+0xaa>
 80002b0:	deff      	udf	#255	; 0xff
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d150      	bne.n	800035c <__udivmoddi4+0x154>
 80002ba:	1bcb      	subs	r3, r1, r7
 80002bc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002c0:	fa1f f887 	uxth.w	r8, r7
 80002c4:	2601      	movs	r6, #1
 80002c6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ca:	0c21      	lsrs	r1, r4, #16
 80002cc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002d0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002d4:	fb08 f30c 	mul.w	r3, r8, ip
 80002d8:	428b      	cmp	r3, r1
 80002da:	d907      	bls.n	80002ec <__udivmoddi4+0xe4>
 80002dc:	1879      	adds	r1, r7, r1
 80002de:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002e2:	d202      	bcs.n	80002ea <__udivmoddi4+0xe2>
 80002e4:	428b      	cmp	r3, r1
 80002e6:	f200 80e9 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 80002ea:	4684      	mov	ip, r0
 80002ec:	1ac9      	subs	r1, r1, r3
 80002ee:	b2a3      	uxth	r3, r4
 80002f0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002f4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002f8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002fc:	fb08 f800 	mul.w	r8, r8, r0
 8000300:	45a0      	cmp	r8, r4
 8000302:	d907      	bls.n	8000314 <__udivmoddi4+0x10c>
 8000304:	193c      	adds	r4, r7, r4
 8000306:	f100 33ff 	add.w	r3, r0, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x10a>
 800030c:	45a0      	cmp	r8, r4
 800030e:	f200 80d9 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 8000312:	4618      	mov	r0, r3
 8000314:	eba4 0408 	sub.w	r4, r4, r8
 8000318:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800031c:	e7bf      	b.n	800029e <__udivmoddi4+0x96>
 800031e:	428b      	cmp	r3, r1
 8000320:	d909      	bls.n	8000336 <__udivmoddi4+0x12e>
 8000322:	2d00      	cmp	r5, #0
 8000324:	f000 80b1 	beq.w	800048a <__udivmoddi4+0x282>
 8000328:	2600      	movs	r6, #0
 800032a:	e9c5 0100 	strd	r0, r1, [r5]
 800032e:	4630      	mov	r0, r6
 8000330:	4631      	mov	r1, r6
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	fab3 f683 	clz	r6, r3
 800033a:	2e00      	cmp	r6, #0
 800033c:	d14a      	bne.n	80003d4 <__udivmoddi4+0x1cc>
 800033e:	428b      	cmp	r3, r1
 8000340:	d302      	bcc.n	8000348 <__udivmoddi4+0x140>
 8000342:	4282      	cmp	r2, r0
 8000344:	f200 80b8 	bhi.w	80004b8 <__udivmoddi4+0x2b0>
 8000348:	1a84      	subs	r4, r0, r2
 800034a:	eb61 0103 	sbc.w	r1, r1, r3
 800034e:	2001      	movs	r0, #1
 8000350:	468c      	mov	ip, r1
 8000352:	2d00      	cmp	r5, #0
 8000354:	d0a8      	beq.n	80002a8 <__udivmoddi4+0xa0>
 8000356:	e9c5 4c00 	strd	r4, ip, [r5]
 800035a:	e7a5      	b.n	80002a8 <__udivmoddi4+0xa0>
 800035c:	f1c2 0320 	rsb	r3, r2, #32
 8000360:	fa20 f603 	lsr.w	r6, r0, r3
 8000364:	4097      	lsls	r7, r2
 8000366:	fa01 f002 	lsl.w	r0, r1, r2
 800036a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800036e:	40d9      	lsrs	r1, r3
 8000370:	4330      	orrs	r0, r6
 8000372:	0c03      	lsrs	r3, r0, #16
 8000374:	fbb1 f6fe 	udiv	r6, r1, lr
 8000378:	fa1f f887 	uxth.w	r8, r7
 800037c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000380:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000384:	fb06 f108 	mul.w	r1, r6, r8
 8000388:	4299      	cmp	r1, r3
 800038a:	fa04 f402 	lsl.w	r4, r4, r2
 800038e:	d909      	bls.n	80003a4 <__udivmoddi4+0x19c>
 8000390:	18fb      	adds	r3, r7, r3
 8000392:	f106 3cff 	add.w	ip, r6, #4294967295
 8000396:	f080 808d 	bcs.w	80004b4 <__udivmoddi4+0x2ac>
 800039a:	4299      	cmp	r1, r3
 800039c:	f240 808a 	bls.w	80004b4 <__udivmoddi4+0x2ac>
 80003a0:	3e02      	subs	r6, #2
 80003a2:	443b      	add	r3, r7
 80003a4:	1a5b      	subs	r3, r3, r1
 80003a6:	b281      	uxth	r1, r0
 80003a8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003ac:	fb0e 3310 	mls	r3, lr, r0, r3
 80003b0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003b4:	fb00 f308 	mul.w	r3, r0, r8
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d907      	bls.n	80003cc <__udivmoddi4+0x1c4>
 80003bc:	1879      	adds	r1, r7, r1
 80003be:	f100 3cff 	add.w	ip, r0, #4294967295
 80003c2:	d273      	bcs.n	80004ac <__udivmoddi4+0x2a4>
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d971      	bls.n	80004ac <__udivmoddi4+0x2a4>
 80003c8:	3802      	subs	r0, #2
 80003ca:	4439      	add	r1, r7
 80003cc:	1acb      	subs	r3, r1, r3
 80003ce:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003d2:	e778      	b.n	80002c6 <__udivmoddi4+0xbe>
 80003d4:	f1c6 0c20 	rsb	ip, r6, #32
 80003d8:	fa03 f406 	lsl.w	r4, r3, r6
 80003dc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003e0:	431c      	orrs	r4, r3
 80003e2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003e6:	fa01 f306 	lsl.w	r3, r1, r6
 80003ea:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003ee:	fa21 f10c 	lsr.w	r1, r1, ip
 80003f2:	431f      	orrs	r7, r3
 80003f4:	0c3b      	lsrs	r3, r7, #16
 80003f6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003fa:	fa1f f884 	uxth.w	r8, r4
 80003fe:	fb0e 1119 	mls	r1, lr, r9, r1
 8000402:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000406:	fb09 fa08 	mul.w	sl, r9, r8
 800040a:	458a      	cmp	sl, r1
 800040c:	fa02 f206 	lsl.w	r2, r2, r6
 8000410:	fa00 f306 	lsl.w	r3, r0, r6
 8000414:	d908      	bls.n	8000428 <__udivmoddi4+0x220>
 8000416:	1861      	adds	r1, r4, r1
 8000418:	f109 30ff 	add.w	r0, r9, #4294967295
 800041c:	d248      	bcs.n	80004b0 <__udivmoddi4+0x2a8>
 800041e:	458a      	cmp	sl, r1
 8000420:	d946      	bls.n	80004b0 <__udivmoddi4+0x2a8>
 8000422:	f1a9 0902 	sub.w	r9, r9, #2
 8000426:	4421      	add	r1, r4
 8000428:	eba1 010a 	sub.w	r1, r1, sl
 800042c:	b2bf      	uxth	r7, r7
 800042e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000432:	fb0e 1110 	mls	r1, lr, r0, r1
 8000436:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800043a:	fb00 f808 	mul.w	r8, r0, r8
 800043e:	45b8      	cmp	r8, r7
 8000440:	d907      	bls.n	8000452 <__udivmoddi4+0x24a>
 8000442:	19e7      	adds	r7, r4, r7
 8000444:	f100 31ff 	add.w	r1, r0, #4294967295
 8000448:	d22e      	bcs.n	80004a8 <__udivmoddi4+0x2a0>
 800044a:	45b8      	cmp	r8, r7
 800044c:	d92c      	bls.n	80004a8 <__udivmoddi4+0x2a0>
 800044e:	3802      	subs	r0, #2
 8000450:	4427      	add	r7, r4
 8000452:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000456:	eba7 0708 	sub.w	r7, r7, r8
 800045a:	fba0 8902 	umull	r8, r9, r0, r2
 800045e:	454f      	cmp	r7, r9
 8000460:	46c6      	mov	lr, r8
 8000462:	4649      	mov	r1, r9
 8000464:	d31a      	bcc.n	800049c <__udivmoddi4+0x294>
 8000466:	d017      	beq.n	8000498 <__udivmoddi4+0x290>
 8000468:	b15d      	cbz	r5, 8000482 <__udivmoddi4+0x27a>
 800046a:	ebb3 020e 	subs.w	r2, r3, lr
 800046e:	eb67 0701 	sbc.w	r7, r7, r1
 8000472:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000476:	40f2      	lsrs	r2, r6
 8000478:	ea4c 0202 	orr.w	r2, ip, r2
 800047c:	40f7      	lsrs	r7, r6
 800047e:	e9c5 2700 	strd	r2, r7, [r5]
 8000482:	2600      	movs	r6, #0
 8000484:	4631      	mov	r1, r6
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e70b      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e9      	b.n	8000268 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fd      	b.n	8000294 <__udivmoddi4+0x8c>
 8000498:	4543      	cmp	r3, r8
 800049a:	d2e5      	bcs.n	8000468 <__udivmoddi4+0x260>
 800049c:	ebb8 0e02 	subs.w	lr, r8, r2
 80004a0:	eb69 0104 	sbc.w	r1, r9, r4
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7df      	b.n	8000468 <__udivmoddi4+0x260>
 80004a8:	4608      	mov	r0, r1
 80004aa:	e7d2      	b.n	8000452 <__udivmoddi4+0x24a>
 80004ac:	4660      	mov	r0, ip
 80004ae:	e78d      	b.n	80003cc <__udivmoddi4+0x1c4>
 80004b0:	4681      	mov	r9, r0
 80004b2:	e7b9      	b.n	8000428 <__udivmoddi4+0x220>
 80004b4:	4666      	mov	r6, ip
 80004b6:	e775      	b.n	80003a4 <__udivmoddi4+0x19c>
 80004b8:	4630      	mov	r0, r6
 80004ba:	e74a      	b.n	8000352 <__udivmoddi4+0x14a>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	4439      	add	r1, r7
 80004c2:	e713      	b.n	80002ec <__udivmoddi4+0xe4>
 80004c4:	3802      	subs	r0, #2
 80004c6:	443c      	add	r4, r7
 80004c8:	e724      	b.n	8000314 <__udivmoddi4+0x10c>
 80004ca:	bf00      	nop

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <app_main>:
#include "main.h"
#include "fatfs.h"

int app_main(void)
{
 80004d0:	b590      	push	{r4, r7, lr}
 80004d2:	f2ad 4d8c 	subw	sp, sp, #1164	; 0x48c
 80004d6:	af00      	add	r7, sp, #0
	FATFS fileSystem;
	FIL testFile;
	uint8_t testBuffer[16] = "SD write success";
 80004d8:	f107 0314 	add.w	r3, r7, #20
 80004dc:	4a1e      	ldr	r2, [pc, #120]	; (8000558 <app_main+0x88>)
 80004de:	461c      	mov	r4, r3
 80004e0:	4613      	mov	r3, r2
 80004e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80004e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	UINT testBytes;
	FRESULT res;
	if(f_mount(&fileSystem, SDPath, 1) == FR_OK) {
 80004e8:	f507 7315 	add.w	r3, r7, #596	; 0x254
 80004ec:	2201      	movs	r2, #1
 80004ee:	491b      	ldr	r1, [pc, #108]	; (800055c <app_main+0x8c>)
 80004f0:	4618      	mov	r0, r3
 80004f2:	f004 fc79 	bl	8004de8 <f_mount>
 80004f6:	4603      	mov	r3, r0
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d127      	bne.n	800054c <app_main+0x7c>
		uint8_t path[13] = "testfile.txt";
 80004fc:	463b      	mov	r3, r7
 80004fe:	4a18      	ldr	r2, [pc, #96]	; (8000560 <app_main+0x90>)
 8000500:	461c      	mov	r4, r3
 8000502:	4613      	mov	r3, r2
 8000504:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000506:	c407      	stmia	r4!, {r0, r1, r2}
 8000508:	7023      	strb	r3, [r4, #0]
		path[12] = '\0';
 800050a:	463b      	mov	r3, r7
 800050c:	2200      	movs	r2, #0
 800050e:	731a      	strb	r2, [r3, #12]
		res = f_open(&testFile, (char*)path, FA_WRITE | FA_CREATE_ALWAYS);
 8000510:	4639      	mov	r1, r7
 8000512:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000516:	220a      	movs	r2, #10
 8000518:	4618      	mov	r0, r3
 800051a:	f004 fcab 	bl	8004e74 <f_open>
 800051e:	4603      	mov	r3, r0
 8000520:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
		res = f_write(&testFile, testBuffer, 16, &testBytes);
 8000524:	f107 0310 	add.w	r3, r7, #16
 8000528:	f107 0114 	add.w	r1, r7, #20
 800052c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8000530:	2210      	movs	r2, #16
 8000532:	f004 fe5d 	bl	80051f0 <f_write>
 8000536:	4603      	mov	r3, r0
 8000538:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
		res = f_close(&testFile);
 800053c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000540:	4618      	mov	r0, r3
 8000542:	f005 f848 	bl	80055d6 <f_close>
 8000546:	4603      	mov	r3, r0
 8000548:	f887 3487 	strb.w	r3, [r7, #1159]	; 0x487
	}
	return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	f207 478c 	addw	r7, r7, #1164	; 0x48c
 8000554:	46bd      	mov	sp, r7
 8000556:	bd90      	pop	{r4, r7, pc}
 8000558:	08005754 	.word	0x08005754
 800055c:	200000e8 	.word	0x200000e8
 8000560:	08005764 	.word	0x08005764

08000564 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000568:	f000 f9b8 	bl	80008dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056c:	f000 f80a 	bl	8000584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000570:	f000 f890 	bl	8000694 <MX_GPIO_Init>
  MX_SDIO_SD_Init();
 8000574:	f000 f86e 	bl	8000654 <MX_SDIO_SD_Init>
  MX_FATFS_Init();
 8000578:	f002 fd7a 	bl	8003070 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  app_main();
 800057c:	f7ff ffa8 	bl	80004d0 <app_main>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000580:	e7fe      	b.n	8000580 <main+0x1c>
	...

08000584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b094      	sub	sp, #80	; 0x50
 8000588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	2230      	movs	r2, #48	; 0x30
 8000590:	2100      	movs	r1, #0
 8000592:	4618      	mov	r0, r3
 8000594:	f005 f8ca 	bl	800572c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000598:	f107 030c 	add.w	r3, r7, #12
 800059c:	2200      	movs	r2, #0
 800059e:	601a      	str	r2, [r3, #0]
 80005a0:	605a      	str	r2, [r3, #4]
 80005a2:	609a      	str	r2, [r3, #8]
 80005a4:	60da      	str	r2, [r3, #12]
 80005a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005a8:	2300      	movs	r3, #0
 80005aa:	60bb      	str	r3, [r7, #8]
 80005ac:	4b27      	ldr	r3, [pc, #156]	; (800064c <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	4a26      	ldr	r2, [pc, #152]	; (800064c <SystemClock_Config+0xc8>)
 80005b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005b6:	6413      	str	r3, [r2, #64]	; 0x40
 80005b8:	4b24      	ldr	r3, [pc, #144]	; (800064c <SystemClock_Config+0xc8>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c0:	60bb      	str	r3, [r7, #8]
 80005c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005c4:	2300      	movs	r3, #0
 80005c6:	607b      	str	r3, [r7, #4]
 80005c8:	4b21      	ldr	r3, [pc, #132]	; (8000650 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	4a20      	ldr	r2, [pc, #128]	; (8000650 <SystemClock_Config+0xcc>)
 80005ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80005d2:	6013      	str	r3, [r2, #0]
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <SystemClock_Config+0xcc>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005dc:	607b      	str	r3, [r7, #4]
 80005de:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e0:	2302      	movs	r3, #2
 80005e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005e4:	2301      	movs	r3, #1
 80005e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e8:	2310      	movs	r3, #16
 80005ea:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005ec:	2302      	movs	r3, #2
 80005ee:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f0:	2300      	movs	r3, #0
 80005f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005f4:	2308      	movs	r3, #8
 80005f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80005f8:	2364      	movs	r3, #100	; 0x64
 80005fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005fc:	2302      	movs	r3, #2
 80005fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000600:	2305      	movs	r3, #5
 8000602:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000604:	f107 0320 	add.w	r3, r7, #32
 8000608:	4618      	mov	r0, r3
 800060a:	f000 fc67 	bl	8000edc <HAL_RCC_OscConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000614:	f000 f866 	bl	80006e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000618:	230f      	movs	r3, #15
 800061a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800061c:	2302      	movs	r3, #2
 800061e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000624:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800062e:	f107 030c 	add.w	r3, r7, #12
 8000632:	2103      	movs	r1, #3
 8000634:	4618      	mov	r0, r3
 8000636:	f000 fec9 	bl	80013cc <HAL_RCC_ClockConfig>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000640:	f000 f850 	bl	80006e4 <Error_Handler>
  }
}
 8000644:	bf00      	nop
 8000646:	3750      	adds	r7, #80	; 0x50
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	40023800 	.word	0x40023800
 8000650:	40007000 	.word	0x40007000

08000654 <MX_SDIO_SD_Init>:
  * @brief SDIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDIO_SD_Init(void)
{
 8000654:	b480      	push	{r7}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END SDIO_Init 0 */

  /* USER CODE BEGIN SDIO_Init 1 */

  /* USER CODE END SDIO_Init 1 */
  hsd.Instance = SDIO;
 8000658:	4b0c      	ldr	r3, [pc, #48]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800065a:	4a0d      	ldr	r2, [pc, #52]	; (8000690 <MX_SDIO_SD_Init+0x3c>)
 800065c:	601a      	str	r2, [r3, #0]
  hsd.Init.ClockEdge = SDIO_CLOCK_EDGE_RISING;
 800065e:	4b0b      	ldr	r3, [pc, #44]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  hsd.Init.ClockBypass = SDIO_CLOCK_BYPASS_DISABLE;
 8000664:	4b09      	ldr	r3, [pc, #36]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hsd.Init.ClockPowerSave = SDIO_CLOCK_POWER_SAVE_DISABLE;
 800066a:	4b08      	ldr	r3, [pc, #32]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hsd.Init.BusWide = SDIO_BUS_WIDE_1B;
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hsd.Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 8000676:	4b05      	ldr	r3, [pc, #20]	; (800068c <MX_SDIO_SD_Init+0x38>)
 8000678:	2200      	movs	r2, #0
 800067a:	615a      	str	r2, [r3, #20]
  hsd.Init.ClockDiv = 0;
 800067c:	4b03      	ldr	r3, [pc, #12]	; (800068c <MX_SDIO_SD_Init+0x38>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDIO_Init 2 */

  /* USER CODE END SDIO_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	2000005c 	.word	0x2000005c
 8000690:	40012c00 	.word	0x40012c00

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b083      	sub	sp, #12
 8000698:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	607b      	str	r3, [r7, #4]
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a0f      	ldr	r2, [pc, #60]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006a4:	f043 0301 	orr.w	r3, r3, #1
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0301 	and.w	r3, r3, #1
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	4b09      	ldr	r3, [pc, #36]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006c0:	f043 0302 	orr.w	r3, r3, #2
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <MX_GPIO_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0302 	and.w	r3, r3, #2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

}
 80006d2:	bf00      	nop
 80006d4:	370c      	adds	r7, #12
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800

080006e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e8:	b672      	cpsid	i
}
 80006ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ec:	e7fe      	b.n	80006ec <Error_Handler+0x8>
	...

080006f0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006f6:	2300      	movs	r3, #0
 80006f8:	607b      	str	r3, [r7, #4]
 80006fa:	4b10      	ldr	r3, [pc, #64]	; (800073c <HAL_MspInit+0x4c>)
 80006fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006fe:	4a0f      	ldr	r2, [pc, #60]	; (800073c <HAL_MspInit+0x4c>)
 8000700:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000704:	6453      	str	r3, [r2, #68]	; 0x44
 8000706:	4b0d      	ldr	r3, [pc, #52]	; (800073c <HAL_MspInit+0x4c>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800070e:	607b      	str	r3, [r7, #4]
 8000710:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000712:	2300      	movs	r3, #0
 8000714:	603b      	str	r3, [r7, #0]
 8000716:	4b09      	ldr	r3, [pc, #36]	; (800073c <HAL_MspInit+0x4c>)
 8000718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800071a:	4a08      	ldr	r2, [pc, #32]	; (800073c <HAL_MspInit+0x4c>)
 800071c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000720:	6413      	str	r3, [r2, #64]	; 0x40
 8000722:	4b06      	ldr	r3, [pc, #24]	; (800073c <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800072a:	603b      	str	r3, [r7, #0]
 800072c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072e:	bf00      	nop
 8000730:	370c      	adds	r7, #12
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08a      	sub	sp, #40	; 0x28
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	2200      	movs	r2, #0
 800074e:	601a      	str	r2, [r3, #0]
 8000750:	605a      	str	r2, [r3, #4]
 8000752:	609a      	str	r2, [r3, #8]
 8000754:	60da      	str	r2, [r3, #12]
 8000756:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDIO)
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	4a28      	ldr	r2, [pc, #160]	; (8000800 <HAL_SD_MspInit+0xc0>)
 800075e:	4293      	cmp	r3, r2
 8000760:	d14a      	bne.n	80007f8 <HAL_SD_MspInit+0xb8>
  {
  /* USER CODE BEGIN SDIO_MspInit 0 */

  /* USER CODE END SDIO_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDIO_CLK_ENABLE();
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]
 8000766:	4b27      	ldr	r3, [pc, #156]	; (8000804 <HAL_SD_MspInit+0xc4>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	4a26      	ldr	r2, [pc, #152]	; (8000804 <HAL_SD_MspInit+0xc4>)
 800076c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000770:	6453      	str	r3, [r2, #68]	; 0x44
 8000772:	4b24      	ldr	r3, [pc, #144]	; (8000804 <HAL_SD_MspInit+0xc4>)
 8000774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000776:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800077a:	613b      	str	r3, [r7, #16]
 800077c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800077e:	2300      	movs	r3, #0
 8000780:	60fb      	str	r3, [r7, #12]
 8000782:	4b20      	ldr	r3, [pc, #128]	; (8000804 <HAL_SD_MspInit+0xc4>)
 8000784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000786:	4a1f      	ldr	r2, [pc, #124]	; (8000804 <HAL_SD_MspInit+0xc4>)
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6313      	str	r3, [r2, #48]	; 0x30
 800078e:	4b1d      	ldr	r3, [pc, #116]	; (8000804 <HAL_SD_MspInit+0xc4>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	f003 0301 	and.w	r3, r3, #1
 8000796:	60fb      	str	r3, [r7, #12]
 8000798:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	60bb      	str	r3, [r7, #8]
 800079e:	4b19      	ldr	r3, [pc, #100]	; (8000804 <HAL_SD_MspInit+0xc4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a18      	ldr	r2, [pc, #96]	; (8000804 <HAL_SD_MspInit+0xc4>)
 80007a4:	f043 0302 	orr.w	r3, r3, #2
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b16      	ldr	r3, [pc, #88]	; (8000804 <HAL_SD_MspInit+0xc4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0302 	and.w	r3, r3, #2
 80007b2:	60bb      	str	r3, [r7, #8]
 80007b4:	68bb      	ldr	r3, [r7, #8]
    /**SDIO GPIO Configuration
    PA6     ------> SDIO_CMD
    PB15     ------> SDIO_CK
    PB4     ------> SDIO_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80007b6:	2340      	movs	r3, #64	; 0x40
 80007b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ba:	2302      	movs	r3, #2
 80007bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007be:	2300      	movs	r3, #0
 80007c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c2:	2303      	movs	r3, #3
 80007c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007c6:	230c      	movs	r3, #12
 80007c8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ca:	f107 0314 	add.w	r3, r7, #20
 80007ce:	4619      	mov	r1, r3
 80007d0:	480d      	ldr	r0, [pc, #52]	; (8000808 <HAL_SD_MspInit+0xc8>)
 80007d2:	f000 f9ff 	bl	8000bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_4;
 80007d6:	f248 0310 	movw	r3, #32784	; 0x8010
 80007da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007dc:	2302      	movs	r3, #2
 80007de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e4:	2303      	movs	r3, #3
 80007e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_SDIO;
 80007e8:	230c      	movs	r3, #12
 80007ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ec:	f107 0314 	add.w	r3, r7, #20
 80007f0:	4619      	mov	r1, r3
 80007f2:	4806      	ldr	r0, [pc, #24]	; (800080c <HAL_SD_MspInit+0xcc>)
 80007f4:	f000 f9ee 	bl	8000bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDIO_MspInit 1 */

  /* USER CODE END SDIO_MspInit 1 */
  }

}
 80007f8:	bf00      	nop
 80007fa:	3728      	adds	r7, #40	; 0x28
 80007fc:	46bd      	mov	sp, r7
 80007fe:	bd80      	pop	{r7, pc}
 8000800:	40012c00 	.word	0x40012c00
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400

08000810 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <NMI_Handler+0x4>

08000816 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800081a:	e7fe      	b.n	800081a <HardFault_Handler+0x4>

0800081c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <MemManage_Handler+0x4>

08000822 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <BusFault_Handler+0x4>

08000828 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <UsageFault_Handler+0x4>

0800082e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000832:	bf00      	nop
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr

0800083c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800083c:	b480      	push	{r7}
 800083e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000840:	bf00      	nop
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr

0800084a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800084a:	b480      	push	{r7}
 800084c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800084e:	bf00      	nop
 8000850:	46bd      	mov	sp, r7
 8000852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000856:	4770      	bx	lr

08000858 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800085c:	f000 f890 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000860:	bf00      	nop
 8000862:	bd80      	pop	{r7, pc}

08000864 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000868:	4b06      	ldr	r3, [pc, #24]	; (8000884 <SystemInit+0x20>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a05      	ldr	r2, [pc, #20]	; (8000884 <SystemInit+0x20>)
 8000870:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	e000ed00 	.word	0xe000ed00

08000888 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000888:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800088c:	480d      	ldr	r0, [pc, #52]	; (80008c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800088e:	490e      	ldr	r1, [pc, #56]	; (80008c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000890:	4a0e      	ldr	r2, [pc, #56]	; (80008cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000894:	e002      	b.n	800089c <LoopCopyDataInit>

08000896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800089a:	3304      	adds	r3, #4

0800089c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800089c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800089e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008a0:	d3f9      	bcc.n	8000896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008a2:	4a0b      	ldr	r2, [pc, #44]	; (80008d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008a4:	4c0b      	ldr	r4, [pc, #44]	; (80008d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008a8:	e001      	b.n	80008ae <LoopFillZerobss>

080008aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008ac:	3204      	adds	r2, #4

080008ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008b0:	d3fb      	bcc.n	80008aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80008b2:	f7ff ffd7 	bl	8000864 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008b6:	f004 ff15 	bl	80056e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ba:	f7ff fe53 	bl	8000564 <main>
  bx  lr    
 80008be:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80008c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008cc:	0800586c 	.word	0x0800586c
  ldr r2, =_sbss
 80008d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008d4:	2000054c 	.word	0x2000054c

080008d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80008d8:	e7fe      	b.n	80008d8 <ADC_IRQHandler>
	...

080008dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80008e0:	4b0e      	ldr	r3, [pc, #56]	; (800091c <HAL_Init+0x40>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a0d      	ldr	r2, [pc, #52]	; (800091c <HAL_Init+0x40>)
 80008e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80008ec:	4b0b      	ldr	r3, [pc, #44]	; (800091c <HAL_Init+0x40>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_Init+0x40>)
 80008f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80008f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f8:	4b08      	ldr	r3, [pc, #32]	; (800091c <HAL_Init+0x40>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a07      	ldr	r2, [pc, #28]	; (800091c <HAL_Init+0x40>)
 80008fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000902:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000904:	2003      	movs	r0, #3
 8000906:	f000 f931 	bl	8000b6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800090a:	200f      	movs	r0, #15
 800090c:	f000 f808 	bl	8000920 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000910:	f7ff feee 	bl	80006f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000914:	2300      	movs	r3, #0
}
 8000916:	4618      	mov	r0, r3
 8000918:	bd80      	pop	{r7, pc}
 800091a:	bf00      	nop
 800091c:	40023c00 	.word	0x40023c00

08000920 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b082      	sub	sp, #8
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000928:	4b12      	ldr	r3, [pc, #72]	; (8000974 <HAL_InitTick+0x54>)
 800092a:	681a      	ldr	r2, [r3, #0]
 800092c:	4b12      	ldr	r3, [pc, #72]	; (8000978 <HAL_InitTick+0x58>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000936:	fbb3 f3f1 	udiv	r3, r3, r1
 800093a:	fbb2 f3f3 	udiv	r3, r2, r3
 800093e:	4618      	mov	r0, r3
 8000940:	f000 f93b 	bl	8000bba <HAL_SYSTICK_Config>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	e00e      	b.n	800096c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	2b0f      	cmp	r3, #15
 8000952:	d80a      	bhi.n	800096a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000954:	2200      	movs	r2, #0
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	f04f 30ff 	mov.w	r0, #4294967295
 800095c:	f000 f911 	bl	8000b82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000960:	4a06      	ldr	r2, [pc, #24]	; (800097c <HAL_InitTick+0x5c>)
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000966:	2300      	movs	r3, #0
 8000968:	e000      	b.n	800096c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800096a:	2301      	movs	r3, #1
}
 800096c:	4618      	mov	r0, r3
 800096e:	3708      	adds	r7, #8
 8000970:	46bd      	mov	sp, r7
 8000972:	bd80      	pop	{r7, pc}
 8000974:	20000000 	.word	0x20000000
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <HAL_IncTick+0x20>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b06      	ldr	r3, [pc, #24]	; (80009a4 <HAL_IncTick+0x24>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a04      	ldr	r2, [pc, #16]	; (80009a4 <HAL_IncTick+0x24>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	20000008 	.word	0x20000008
 80009a4:	200000e0 	.word	0x200000e0

080009a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  return uwTick;
 80009ac:	4b03      	ldr	r3, [pc, #12]	; (80009bc <HAL_GetTick+0x14>)
 80009ae:	681b      	ldr	r3, [r3, #0]
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	200000e0 	.word	0x200000e0

080009c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b084      	sub	sp, #16
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c8:	f7ff ffee 	bl	80009a8 <HAL_GetTick>
 80009cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d005      	beq.n	80009e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009da:	4b0a      	ldr	r3, [pc, #40]	; (8000a04 <HAL_Delay+0x44>)
 80009dc:	781b      	ldrb	r3, [r3, #0]
 80009de:	461a      	mov	r2, r3
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	4413      	add	r3, r2
 80009e4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009e6:	bf00      	nop
 80009e8:	f7ff ffde 	bl	80009a8 <HAL_GetTick>
 80009ec:	4602      	mov	r2, r0
 80009ee:	68bb      	ldr	r3, [r7, #8]
 80009f0:	1ad3      	subs	r3, r2, r3
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d8f7      	bhi.n	80009e8 <HAL_Delay+0x28>
  {
  }
}
 80009f8:	bf00      	nop
 80009fa:	bf00      	nop
 80009fc:	3710      	adds	r7, #16
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	20000008 	.word	0x20000008

08000a08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	f003 0307 	and.w	r3, r3, #7
 8000a16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a18:	4b0c      	ldr	r3, [pc, #48]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1a:	68db      	ldr	r3, [r3, #12]
 8000a1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a1e:	68ba      	ldr	r2, [r7, #8]
 8000a20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a24:	4013      	ands	r3, r2
 8000a26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a2c:	68bb      	ldr	r3, [r7, #8]
 8000a2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a3a:	4a04      	ldr	r2, [pc, #16]	; (8000a4c <__NVIC_SetPriorityGrouping+0x44>)
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	60d3      	str	r3, [r2, #12]
}
 8000a40:	bf00      	nop
 8000a42:	3714      	adds	r7, #20
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	e000ed00 	.word	0xe000ed00

08000a50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a50:	b480      	push	{r7}
 8000a52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <__NVIC_GetPriorityGrouping+0x18>)
 8000a56:	68db      	ldr	r3, [r3, #12]
 8000a58:	0a1b      	lsrs	r3, r3, #8
 8000a5a:	f003 0307 	and.w	r3, r3, #7
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	46bd      	mov	sp, r7
 8000a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a66:	4770      	bx	lr
 8000a68:	e000ed00 	.word	0xe000ed00

08000a6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	4603      	mov	r3, r0
 8000a74:	6039      	str	r1, [r7, #0]
 8000a76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	db0a      	blt.n	8000a96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	b2da      	uxtb	r2, r3
 8000a84:	490c      	ldr	r1, [pc, #48]	; (8000ab8 <__NVIC_SetPriority+0x4c>)
 8000a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8a:	0112      	lsls	r2, r2, #4
 8000a8c:	b2d2      	uxtb	r2, r2
 8000a8e:	440b      	add	r3, r1
 8000a90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a94:	e00a      	b.n	8000aac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	b2da      	uxtb	r2, r3
 8000a9a:	4908      	ldr	r1, [pc, #32]	; (8000abc <__NVIC_SetPriority+0x50>)
 8000a9c:	79fb      	ldrb	r3, [r7, #7]
 8000a9e:	f003 030f 	and.w	r3, r3, #15
 8000aa2:	3b04      	subs	r3, #4
 8000aa4:	0112      	lsls	r2, r2, #4
 8000aa6:	b2d2      	uxtb	r2, r2
 8000aa8:	440b      	add	r3, r1
 8000aaa:	761a      	strb	r2, [r3, #24]
}
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab6:	4770      	bx	lr
 8000ab8:	e000e100 	.word	0xe000e100
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b089      	sub	sp, #36	; 0x24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000acc:	68fb      	ldr	r3, [r7, #12]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ad4:	69fb      	ldr	r3, [r7, #28]
 8000ad6:	f1c3 0307 	rsb	r3, r3, #7
 8000ada:	2b04      	cmp	r3, #4
 8000adc:	bf28      	it	cs
 8000ade:	2304      	movcs	r3, #4
 8000ae0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	2b06      	cmp	r3, #6
 8000ae8:	d902      	bls.n	8000af0 <NVIC_EncodePriority+0x30>
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3b03      	subs	r3, #3
 8000aee:	e000      	b.n	8000af2 <NVIC_EncodePriority+0x32>
 8000af0:	2300      	movs	r3, #0
 8000af2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000af4:	f04f 32ff 	mov.w	r2, #4294967295
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	fa02 f303 	lsl.w	r3, r2, r3
 8000afe:	43da      	mvns	r2, r3
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	401a      	ands	r2, r3
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b12:	43d9      	mvns	r1, r3
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b18:	4313      	orrs	r3, r2
         );
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3724      	adds	r7, #36	; 0x24
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
	...

08000b28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b082      	sub	sp, #8
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b38:	d301      	bcc.n	8000b3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00f      	b.n	8000b5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b3e:	4a0a      	ldr	r2, [pc, #40]	; (8000b68 <SysTick_Config+0x40>)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	3b01      	subs	r3, #1
 8000b44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b46:	210f      	movs	r1, #15
 8000b48:	f04f 30ff 	mov.w	r0, #4294967295
 8000b4c:	f7ff ff8e 	bl	8000a6c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b50:	4b05      	ldr	r3, [pc, #20]	; (8000b68 <SysTick_Config+0x40>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b56:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <SysTick_Config+0x40>)
 8000b58:	2207      	movs	r2, #7
 8000b5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	3708      	adds	r7, #8
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	e000e010 	.word	0xe000e010

08000b6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b74:	6878      	ldr	r0, [r7, #4]
 8000b76:	f7ff ff47 	bl	8000a08 <__NVIC_SetPriorityGrouping>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}

08000b82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b82:	b580      	push	{r7, lr}
 8000b84:	b086      	sub	sp, #24
 8000b86:	af00      	add	r7, sp, #0
 8000b88:	4603      	mov	r3, r0
 8000b8a:	60b9      	str	r1, [r7, #8]
 8000b8c:	607a      	str	r2, [r7, #4]
 8000b8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff5c 	bl	8000a50 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff8e 	bl	8000ac0 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff5d 	bl	8000a6c <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb0 	bl	8000b28 <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000be2:	2300      	movs	r3, #0
 8000be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
 8000bee:	e159      	b.n	8000ea4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	697a      	ldr	r2, [r7, #20]
 8000c00:	4013      	ands	r3, r2
 8000c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	697b      	ldr	r3, [r7, #20]
 8000c08:	429a      	cmp	r2, r3
 8000c0a:	f040 8148 	bne.w	8000e9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f003 0303 	and.w	r3, r3, #3
 8000c16:	2b01      	cmp	r3, #1
 8000c18:	d005      	beq.n	8000c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c1a:	683b      	ldr	r3, [r7, #0]
 8000c1c:	685b      	ldr	r3, [r3, #4]
 8000c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c22:	2b02      	cmp	r3, #2
 8000c24:	d130      	bne.n	8000c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c2c:	69fb      	ldr	r3, [r7, #28]
 8000c2e:	005b      	lsls	r3, r3, #1
 8000c30:	2203      	movs	r2, #3
 8000c32:	fa02 f303 	lsl.w	r3, r2, r3
 8000c36:	43db      	mvns	r3, r3
 8000c38:	69ba      	ldr	r2, [r7, #24]
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	68da      	ldr	r2, [r3, #12]
 8000c42:	69fb      	ldr	r3, [r7, #28]
 8000c44:	005b      	lsls	r3, r3, #1
 8000c46:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4a:	69ba      	ldr	r2, [r7, #24]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	69ba      	ldr	r2, [r7, #24]
 8000c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	69fb      	ldr	r3, [r7, #28]
 8000c60:	fa02 f303 	lsl.w	r3, r2, r3
 8000c64:	43db      	mvns	r3, r3
 8000c66:	69ba      	ldr	r2, [r7, #24]
 8000c68:	4013      	ands	r3, r2
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	685b      	ldr	r3, [r3, #4]
 8000c70:	091b      	lsrs	r3, r3, #4
 8000c72:	f003 0201 	and.w	r2, r3, #1
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	fa02 f303 	lsl.w	r3, r2, r3
 8000c7c:	69ba      	ldr	r2, [r7, #24]
 8000c7e:	4313      	orrs	r3, r2
 8000c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	685b      	ldr	r3, [r3, #4]
 8000c8c:	f003 0303 	and.w	r3, r3, #3
 8000c90:	2b03      	cmp	r3, #3
 8000c92:	d017      	beq.n	8000cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	005b      	lsls	r3, r3, #1
 8000c9e:	2203      	movs	r2, #3
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	689a      	ldr	r2, [r3, #8]
 8000cb0:	69fb      	ldr	r3, [r7, #28]
 8000cb2:	005b      	lsls	r3, r3, #1
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	69ba      	ldr	r2, [r7, #24]
 8000cba:	4313      	orrs	r3, r2
 8000cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	69ba      	ldr	r2, [r7, #24]
 8000cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	685b      	ldr	r3, [r3, #4]
 8000cc8:	f003 0303 	and.w	r3, r3, #3
 8000ccc:	2b02      	cmp	r3, #2
 8000cce:	d123      	bne.n	8000d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	08da      	lsrs	r2, r3, #3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3208      	adds	r2, #8
 8000cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	f003 0307 	and.w	r3, r3, #7
 8000ce4:	009b      	lsls	r3, r3, #2
 8000ce6:	220f      	movs	r2, #15
 8000ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cec:	43db      	mvns	r3, r3
 8000cee:	69ba      	ldr	r2, [r7, #24]
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000cf4:	683b      	ldr	r3, [r7, #0]
 8000cf6:	691a      	ldr	r2, [r3, #16]
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f003 0307 	and.w	r3, r3, #7
 8000cfe:	009b      	lsls	r3, r3, #2
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d0a:	69fb      	ldr	r3, [r7, #28]
 8000d0c:	08da      	lsrs	r2, r3, #3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3208      	adds	r2, #8
 8000d12:	69b9      	ldr	r1, [r7, #24]
 8000d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	2203      	movs	r2, #3
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	43db      	mvns	r3, r3
 8000d2a:	69ba      	ldr	r2, [r7, #24]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	685b      	ldr	r3, [r3, #4]
 8000d34:	f003 0203 	and.w	r2, r3, #3
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	005b      	lsls	r3, r3, #1
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	69ba      	ldr	r2, [r7, #24]
 8000d42:	4313      	orrs	r3, r2
 8000d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	69ba      	ldr	r2, [r7, #24]
 8000d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	685b      	ldr	r3, [r3, #4]
 8000d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	f000 80a2 	beq.w	8000e9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
 8000d5e:	4b57      	ldr	r3, [pc, #348]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	4a56      	ldr	r2, [pc, #344]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d68:	6453      	str	r3, [r2, #68]	; 0x44
 8000d6a:	4b54      	ldr	r3, [pc, #336]	; (8000ebc <HAL_GPIO_Init+0x2e8>)
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d72:	60fb      	str	r3, [r7, #12]
 8000d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d76:	4a52      	ldr	r2, [pc, #328]	; (8000ec0 <HAL_GPIO_Init+0x2ec>)
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	089b      	lsrs	r3, r3, #2
 8000d7c:	3302      	adds	r3, #2
 8000d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	f003 0303 	and.w	r3, r3, #3
 8000d8a:	009b      	lsls	r3, r3, #2
 8000d8c:	220f      	movs	r2, #15
 8000d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d92:	43db      	mvns	r3, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4013      	ands	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	4a49      	ldr	r2, [pc, #292]	; (8000ec4 <HAL_GPIO_Init+0x2f0>)
 8000d9e:	4293      	cmp	r3, r2
 8000da0:	d019      	beq.n	8000dd6 <HAL_GPIO_Init+0x202>
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	4a48      	ldr	r2, [pc, #288]	; (8000ec8 <HAL_GPIO_Init+0x2f4>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d013      	beq.n	8000dd2 <HAL_GPIO_Init+0x1fe>
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4a47      	ldr	r2, [pc, #284]	; (8000ecc <HAL_GPIO_Init+0x2f8>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d00d      	beq.n	8000dce <HAL_GPIO_Init+0x1fa>
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a46      	ldr	r2, [pc, #280]	; (8000ed0 <HAL_GPIO_Init+0x2fc>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d007      	beq.n	8000dca <HAL_GPIO_Init+0x1f6>
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4a45      	ldr	r2, [pc, #276]	; (8000ed4 <HAL_GPIO_Init+0x300>)
 8000dbe:	4293      	cmp	r3, r2
 8000dc0:	d101      	bne.n	8000dc6 <HAL_GPIO_Init+0x1f2>
 8000dc2:	2304      	movs	r3, #4
 8000dc4:	e008      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dc6:	2307      	movs	r3, #7
 8000dc8:	e006      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dca:	2303      	movs	r3, #3
 8000dcc:	e004      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dce:	2302      	movs	r3, #2
 8000dd0:	e002      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	e000      	b.n	8000dd8 <HAL_GPIO_Init+0x204>
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	69fa      	ldr	r2, [r7, #28]
 8000dda:	f002 0203 	and.w	r2, r2, #3
 8000dde:	0092      	lsls	r2, r2, #2
 8000de0:	4093      	lsls	r3, r2
 8000de2:	69ba      	ldr	r2, [r7, #24]
 8000de4:	4313      	orrs	r3, r2
 8000de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000de8:	4935      	ldr	r1, [pc, #212]	; (8000ec0 <HAL_GPIO_Init+0x2ec>)
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	089b      	lsrs	r3, r3, #2
 8000dee:	3302      	adds	r3, #2
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000df6:	4b38      	ldr	r3, [pc, #224]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000dfc:	693b      	ldr	r3, [r7, #16]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	4013      	ands	r3, r2
 8000e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000e12:	69ba      	ldr	r2, [r7, #24]
 8000e14:	693b      	ldr	r3, [r7, #16]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000e1a:	4a2f      	ldr	r2, [pc, #188]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e1c:	69bb      	ldr	r3, [r7, #24]
 8000e1e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000e20:	4b2d      	ldr	r3, [pc, #180]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	43db      	mvns	r3, r3
 8000e2a:	69ba      	ldr	r2, [r7, #24]
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e30:	683b      	ldr	r3, [r7, #0]
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d003      	beq.n	8000e44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	693b      	ldr	r3, [r7, #16]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000e44:	4a24      	ldr	r2, [pc, #144]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e46:	69bb      	ldr	r3, [r7, #24]
 8000e48:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e4a:	4b23      	ldr	r3, [pc, #140]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	43db      	mvns	r3, r3
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	4013      	ands	r3, r2
 8000e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d003      	beq.n	8000e6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000e66:	69ba      	ldr	r2, [r7, #24]
 8000e68:	693b      	ldr	r3, [r7, #16]
 8000e6a:	4313      	orrs	r3, r2
 8000e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e6e:	4a1a      	ldr	r2, [pc, #104]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e76:	68db      	ldr	r3, [r3, #12]
 8000e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	43db      	mvns	r3, r3
 8000e7e:	69ba      	ldr	r2, [r7, #24]
 8000e80:	4013      	ands	r3, r2
 8000e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e84:	683b      	ldr	r3, [r7, #0]
 8000e86:	685b      	ldr	r3, [r3, #4]
 8000e88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d003      	beq.n	8000e98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000e90:	69ba      	ldr	r2, [r7, #24]
 8000e92:	693b      	ldr	r3, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e98:	4a0f      	ldr	r2, [pc, #60]	; (8000ed8 <HAL_GPIO_Init+0x304>)
 8000e9a:	69bb      	ldr	r3, [r7, #24]
 8000e9c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	3301      	adds	r3, #1
 8000ea2:	61fb      	str	r3, [r7, #28]
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	2b0f      	cmp	r3, #15
 8000ea8:	f67f aea2 	bls.w	8000bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	3724      	adds	r7, #36	; 0x24
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	40023800 	.word	0x40023800
 8000ec0:	40013800 	.word	0x40013800
 8000ec4:	40020000 	.word	0x40020000
 8000ec8:	40020400 	.word	0x40020400
 8000ecc:	40020800 	.word	0x40020800
 8000ed0:	40020c00 	.word	0x40020c00
 8000ed4:	40021000 	.word	0x40021000
 8000ed8:	40013c00 	.word	0x40013c00

08000edc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b086      	sub	sp, #24
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d101      	bne.n	8000eee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	e264      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	f003 0301 	and.w	r3, r3, #1
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d075      	beq.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000efa:	4ba3      	ldr	r3, [pc, #652]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000efc:	689b      	ldr	r3, [r3, #8]
 8000efe:	f003 030c 	and.w	r3, r3, #12
 8000f02:	2b04      	cmp	r3, #4
 8000f04:	d00c      	beq.n	8000f20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f06:	4ba0      	ldr	r3, [pc, #640]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f08:	689b      	ldr	r3, [r3, #8]
 8000f0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f0e:	2b08      	cmp	r3, #8
 8000f10:	d112      	bne.n	8000f38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f12:	4b9d      	ldr	r3, [pc, #628]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000f1e:	d10b      	bne.n	8000f38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f20:	4b99      	ldr	r3, [pc, #612]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d05b      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x108>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d157      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000f34:	2301      	movs	r3, #1
 8000f36:	e23f      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f40:	d106      	bne.n	8000f50 <HAL_RCC_OscConfig+0x74>
 8000f42:	4b91      	ldr	r3, [pc, #580]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a90      	ldr	r2, [pc, #576]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f4c:	6013      	str	r3, [r2, #0]
 8000f4e:	e01d      	b.n	8000f8c <HAL_RCC_OscConfig+0xb0>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f58:	d10c      	bne.n	8000f74 <HAL_RCC_OscConfig+0x98>
 8000f5a:	4b8b      	ldr	r3, [pc, #556]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a8a      	ldr	r2, [pc, #552]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f64:	6013      	str	r3, [r2, #0]
 8000f66:	4b88      	ldr	r3, [pc, #544]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	4a87      	ldr	r2, [pc, #540]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f70:	6013      	str	r3, [r2, #0]
 8000f72:	e00b      	b.n	8000f8c <HAL_RCC_OscConfig+0xb0>
 8000f74:	4b84      	ldr	r3, [pc, #528]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a83      	ldr	r2, [pc, #524]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f7e:	6013      	str	r3, [r2, #0]
 8000f80:	4b81      	ldr	r3, [pc, #516]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a80      	ldr	r2, [pc, #512]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	685b      	ldr	r3, [r3, #4]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d013      	beq.n	8000fbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f94:	f7ff fd08 	bl	80009a8 <HAL_GetTick>
 8000f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f9a:	e008      	b.n	8000fae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f9c:	f7ff fd04 	bl	80009a8 <HAL_GetTick>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	1ad3      	subs	r3, r2, r3
 8000fa6:	2b64      	cmp	r3, #100	; 0x64
 8000fa8:	d901      	bls.n	8000fae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000faa:	2303      	movs	r3, #3
 8000fac:	e204      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000fae:	4b76      	ldr	r3, [pc, #472]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d0f0      	beq.n	8000f9c <HAL_RCC_OscConfig+0xc0>
 8000fba:	e014      	b.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fbc:	f7ff fcf4 	bl	80009a8 <HAL_GetTick>
 8000fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc2:	e008      	b.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc4:	f7ff fcf0 	bl	80009a8 <HAL_GetTick>
 8000fc8:	4602      	mov	r2, r0
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	1ad3      	subs	r3, r2, r3
 8000fce:	2b64      	cmp	r3, #100	; 0x64
 8000fd0:	d901      	bls.n	8000fd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000fd2:	2303      	movs	r3, #3
 8000fd4:	e1f0      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fd6:	4b6c      	ldr	r3, [pc, #432]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d1f0      	bne.n	8000fc4 <HAL_RCC_OscConfig+0xe8>
 8000fe2:	e000      	b.n	8000fe6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d063      	beq.n	80010ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000ff2:	4b65      	ldr	r3, [pc, #404]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8000ff4:	689b      	ldr	r3, [r3, #8]
 8000ff6:	f003 030c 	and.w	r3, r3, #12
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d00b      	beq.n	8001016 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ffe:	4b62      	ldr	r3, [pc, #392]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001000:	689b      	ldr	r3, [r3, #8]
 8001002:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001006:	2b08      	cmp	r3, #8
 8001008:	d11c      	bne.n	8001044 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800100a:	4b5f      	ldr	r3, [pc, #380]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d116      	bne.n	8001044 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001016:	4b5c      	ldr	r3, [pc, #368]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	f003 0302 	and.w	r3, r3, #2
 800101e:	2b00      	cmp	r3, #0
 8001020:	d005      	beq.n	800102e <HAL_RCC_OscConfig+0x152>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d001      	beq.n	800102e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e1c4      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102e:	4b56      	ldr	r3, [pc, #344]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	691b      	ldr	r3, [r3, #16]
 800103a:	00db      	lsls	r3, r3, #3
 800103c:	4952      	ldr	r1, [pc, #328]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800103e:	4313      	orrs	r3, r2
 8001040:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001042:	e03a      	b.n	80010ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	68db      	ldr	r3, [r3, #12]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d020      	beq.n	800108e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800104c:	4b4f      	ldr	r3, [pc, #316]	; (800118c <HAL_RCC_OscConfig+0x2b0>)
 800104e:	2201      	movs	r2, #1
 8001050:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001052:	f7ff fca9 	bl	80009a8 <HAL_GetTick>
 8001056:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001058:	e008      	b.n	800106c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800105a:	f7ff fca5 	bl	80009a8 <HAL_GetTick>
 800105e:	4602      	mov	r2, r0
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	2b02      	cmp	r3, #2
 8001066:	d901      	bls.n	800106c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001068:	2303      	movs	r3, #3
 800106a:	e1a5      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	4b46      	ldr	r3, [pc, #280]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d0f0      	beq.n	800105a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001078:	4b43      	ldr	r3, [pc, #268]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	691b      	ldr	r3, [r3, #16]
 8001084:	00db      	lsls	r3, r3, #3
 8001086:	4940      	ldr	r1, [pc, #256]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	4313      	orrs	r3, r2
 800108a:	600b      	str	r3, [r1, #0]
 800108c:	e015      	b.n	80010ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800108e:	4b3f      	ldr	r3, [pc, #252]	; (800118c <HAL_RCC_OscConfig+0x2b0>)
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001094:	f7ff fc88 	bl	80009a8 <HAL_GetTick>
 8001098:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800109a:	e008      	b.n	80010ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800109c:	f7ff fc84 	bl	80009a8 <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	2b02      	cmp	r3, #2
 80010a8:	d901      	bls.n	80010ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80010aa:	2303      	movs	r3, #3
 80010ac:	e184      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ae:	4b36      	ldr	r3, [pc, #216]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f003 0302 	and.w	r3, r3, #2
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d1f0      	bne.n	800109c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0308 	and.w	r3, r3, #8
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d030      	beq.n	8001128 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	695b      	ldr	r3, [r3, #20]
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d016      	beq.n	80010fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010ce:	4b30      	ldr	r3, [pc, #192]	; (8001190 <HAL_RCC_OscConfig+0x2b4>)
 80010d0:	2201      	movs	r2, #1
 80010d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80010d4:	f7ff fc68 	bl	80009a8 <HAL_GetTick>
 80010d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010da:	e008      	b.n	80010ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010dc:	f7ff fc64 	bl	80009a8 <HAL_GetTick>
 80010e0:	4602      	mov	r2, r0
 80010e2:	693b      	ldr	r3, [r7, #16]
 80010e4:	1ad3      	subs	r3, r2, r3
 80010e6:	2b02      	cmp	r3, #2
 80010e8:	d901      	bls.n	80010ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e164      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 80010f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80010f2:	f003 0302 	and.w	r3, r3, #2
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d0f0      	beq.n	80010dc <HAL_RCC_OscConfig+0x200>
 80010fa:	e015      	b.n	8001128 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80010fc:	4b24      	ldr	r3, [pc, #144]	; (8001190 <HAL_RCC_OscConfig+0x2b4>)
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001102:	f7ff fc51 	bl	80009a8 <HAL_GetTick>
 8001106:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001108:	e008      	b.n	800111c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800110a:	f7ff fc4d 	bl	80009a8 <HAL_GetTick>
 800110e:	4602      	mov	r2, r0
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	1ad3      	subs	r3, r2, r3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d901      	bls.n	800111c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001118:	2303      	movs	r3, #3
 800111a:	e14d      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800111e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b00      	cmp	r3, #0
 8001126:	d1f0      	bne.n	800110a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 80a0 	beq.w	8001276 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113a:	4b13      	ldr	r3, [pc, #76]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800113c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001142:	2b00      	cmp	r3, #0
 8001144:	d10f      	bne.n	8001166 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001146:	2300      	movs	r3, #0
 8001148:	60bb      	str	r3, [r7, #8]
 800114a:	4b0f      	ldr	r3, [pc, #60]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 800114c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114e:	4a0e      	ldr	r2, [pc, #56]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001154:	6413      	str	r3, [r2, #64]	; 0x40
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001162:	2301      	movs	r3, #1
 8001164:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001166:	4b0b      	ldr	r3, [pc, #44]	; (8001194 <HAL_RCC_OscConfig+0x2b8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800116e:	2b00      	cmp	r3, #0
 8001170:	d121      	bne.n	80011b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001172:	4b08      	ldr	r3, [pc, #32]	; (8001194 <HAL_RCC_OscConfig+0x2b8>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	4a07      	ldr	r2, [pc, #28]	; (8001194 <HAL_RCC_OscConfig+0x2b8>)
 8001178:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800117c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800117e:	f7ff fc13 	bl	80009a8 <HAL_GetTick>
 8001182:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001184:	e011      	b.n	80011aa <HAL_RCC_OscConfig+0x2ce>
 8001186:	bf00      	nop
 8001188:	40023800 	.word	0x40023800
 800118c:	42470000 	.word	0x42470000
 8001190:	42470e80 	.word	0x42470e80
 8001194:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001198:	f7ff fc06 	bl	80009a8 <HAL_GetTick>
 800119c:	4602      	mov	r2, r0
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	1ad3      	subs	r3, r2, r3
 80011a2:	2b02      	cmp	r3, #2
 80011a4:	d901      	bls.n	80011aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80011a6:	2303      	movs	r3, #3
 80011a8:	e106      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011aa:	4b85      	ldr	r3, [pc, #532]	; (80013c0 <HAL_RCC_OscConfig+0x4e4>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d0f0      	beq.n	8001198 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d106      	bne.n	80011cc <HAL_RCC_OscConfig+0x2f0>
 80011be:	4b81      	ldr	r3, [pc, #516]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011c2:	4a80      	ldr	r2, [pc, #512]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6713      	str	r3, [r2, #112]	; 0x70
 80011ca:	e01c      	b.n	8001206 <HAL_RCC_OscConfig+0x32a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	2b05      	cmp	r3, #5
 80011d2:	d10c      	bne.n	80011ee <HAL_RCC_OscConfig+0x312>
 80011d4:	4b7b      	ldr	r3, [pc, #492]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011d8:	4a7a      	ldr	r2, [pc, #488]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011da:	f043 0304 	orr.w	r3, r3, #4
 80011de:	6713      	str	r3, [r2, #112]	; 0x70
 80011e0:	4b78      	ldr	r3, [pc, #480]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011e4:	4a77      	ldr	r2, [pc, #476]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011e6:	f043 0301 	orr.w	r3, r3, #1
 80011ea:	6713      	str	r3, [r2, #112]	; 0x70
 80011ec:	e00b      	b.n	8001206 <HAL_RCC_OscConfig+0x32a>
 80011ee:	4b75      	ldr	r3, [pc, #468]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011f2:	4a74      	ldr	r2, [pc, #464]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011f4:	f023 0301 	bic.w	r3, r3, #1
 80011f8:	6713      	str	r3, [r2, #112]	; 0x70
 80011fa:	4b72      	ldr	r3, [pc, #456]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80011fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80011fe:	4a71      	ldr	r2, [pc, #452]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 8001200:	f023 0304 	bic.w	r3, r3, #4
 8001204:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	689b      	ldr	r3, [r3, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d015      	beq.n	800123a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800120e:	f7ff fbcb 	bl	80009a8 <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001214:	e00a      	b.n	800122c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001216:	f7ff fbc7 	bl	80009a8 <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	f241 3288 	movw	r2, #5000	; 0x1388
 8001224:	4293      	cmp	r3, r2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e0c5      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800122c:	4b65      	ldr	r3, [pc, #404]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 800122e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001230:	f003 0302 	and.w	r3, r3, #2
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0ee      	beq.n	8001216 <HAL_RCC_OscConfig+0x33a>
 8001238:	e014      	b.n	8001264 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800123a:	f7ff fbb5 	bl	80009a8 <HAL_GetTick>
 800123e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001240:	e00a      	b.n	8001258 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001242:	f7ff fbb1 	bl	80009a8 <HAL_GetTick>
 8001246:	4602      	mov	r2, r0
 8001248:	693b      	ldr	r3, [r7, #16]
 800124a:	1ad3      	subs	r3, r2, r3
 800124c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001250:	4293      	cmp	r3, r2
 8001252:	d901      	bls.n	8001258 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001254:	2303      	movs	r3, #3
 8001256:	e0af      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001258:	4b5a      	ldr	r3, [pc, #360]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	f003 0302 	and.w	r3, r3, #2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d1ee      	bne.n	8001242 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001264:	7dfb      	ldrb	r3, [r7, #23]
 8001266:	2b01      	cmp	r3, #1
 8001268:	d105      	bne.n	8001276 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800126a:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126e:	4a55      	ldr	r2, [pc, #340]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 8001270:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001274:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	699b      	ldr	r3, [r3, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	f000 809b 	beq.w	80013b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001280:	4b50      	ldr	r3, [pc, #320]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 8001282:	689b      	ldr	r3, [r3, #8]
 8001284:	f003 030c 	and.w	r3, r3, #12
 8001288:	2b08      	cmp	r3, #8
 800128a:	d05c      	beq.n	8001346 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b02      	cmp	r3, #2
 8001292:	d141      	bne.n	8001318 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001294:	4b4c      	ldr	r3, [pc, #304]	; (80013c8 <HAL_RCC_OscConfig+0x4ec>)
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800129a:	f7ff fb85 	bl	80009a8 <HAL_GetTick>
 800129e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012a0:	e008      	b.n	80012b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012a2:	f7ff fb81 	bl	80009a8 <HAL_GetTick>
 80012a6:	4602      	mov	r2, r0
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	1ad3      	subs	r3, r2, r3
 80012ac:	2b02      	cmp	r3, #2
 80012ae:	d901      	bls.n	80012b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80012b0:	2303      	movs	r3, #3
 80012b2:	e081      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80012b4:	4b43      	ldr	r3, [pc, #268]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d1f0      	bne.n	80012a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	69da      	ldr	r2, [r3, #28]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	6a1b      	ldr	r3, [r3, #32]
 80012c8:	431a      	orrs	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	019b      	lsls	r3, r3, #6
 80012d0:	431a      	orrs	r2, r3
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	085b      	lsrs	r3, r3, #1
 80012d8:	3b01      	subs	r3, #1
 80012da:	041b      	lsls	r3, r3, #16
 80012dc:	431a      	orrs	r2, r3
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012e2:	061b      	lsls	r3, r3, #24
 80012e4:	4937      	ldr	r1, [pc, #220]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 80012e6:	4313      	orrs	r3, r2
 80012e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80012ea:	4b37      	ldr	r3, [pc, #220]	; (80013c8 <HAL_RCC_OscConfig+0x4ec>)
 80012ec:	2201      	movs	r2, #1
 80012ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f0:	f7ff fb5a 	bl	80009a8 <HAL_GetTick>
 80012f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80012f6:	e008      	b.n	800130a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012f8:	f7ff fb56 	bl	80009a8 <HAL_GetTick>
 80012fc:	4602      	mov	r2, r0
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	1ad3      	subs	r3, r2, r3
 8001302:	2b02      	cmp	r3, #2
 8001304:	d901      	bls.n	800130a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e056      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800130a:	4b2e      	ldr	r3, [pc, #184]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001312:	2b00      	cmp	r3, #0
 8001314:	d0f0      	beq.n	80012f8 <HAL_RCC_OscConfig+0x41c>
 8001316:	e04e      	b.n	80013b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001318:	4b2b      	ldr	r3, [pc, #172]	; (80013c8 <HAL_RCC_OscConfig+0x4ec>)
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131e:	f7ff fb43 	bl	80009a8 <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001326:	f7ff fb3f 	bl	80009a8 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e03f      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001338:	4b22      	ldr	r3, [pc, #136]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001340:	2b00      	cmp	r3, #0
 8001342:	d1f0      	bne.n	8001326 <HAL_RCC_OscConfig+0x44a>
 8001344:	e037      	b.n	80013b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	699b      	ldr	r3, [r3, #24]
 800134a:	2b01      	cmp	r3, #1
 800134c:	d101      	bne.n	8001352 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e032      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001352:	4b1c      	ldr	r3, [pc, #112]	; (80013c4 <HAL_RCC_OscConfig+0x4e8>)
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	699b      	ldr	r3, [r3, #24]
 800135c:	2b01      	cmp	r3, #1
 800135e:	d028      	beq.n	80013b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800136a:	429a      	cmp	r2, r3
 800136c:	d121      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001378:	429a      	cmp	r2, r3
 800137a:	d11a      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800137c:	68fa      	ldr	r2, [r7, #12]
 800137e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001382:	4013      	ands	r3, r2
 8001384:	687a      	ldr	r2, [r7, #4]
 8001386:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001388:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800138a:	4293      	cmp	r3, r2
 800138c:	d111      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001398:	085b      	lsrs	r3, r3, #1
 800139a:	3b01      	subs	r3, #1
 800139c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800139e:	429a      	cmp	r2, r3
 80013a0:	d107      	bne.n	80013b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40007000 	.word	0x40007000
 80013c4:	40023800 	.word	0x40023800
 80013c8:	42470060 	.word	0x42470060

080013cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80013cc:	b580      	push	{r7, lr}
 80013ce:	b084      	sub	sp, #16
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d101      	bne.n	80013e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80013dc:	2301      	movs	r3, #1
 80013de:	e0cc      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80013e0:	4b68      	ldr	r3, [pc, #416]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f003 0307 	and.w	r3, r3, #7
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	429a      	cmp	r2, r3
 80013ec:	d90c      	bls.n	8001408 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80013ee:	4b65      	ldr	r3, [pc, #404]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80013f6:	4b63      	ldr	r3, [pc, #396]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0307 	and.w	r3, r3, #7
 80013fe:	683a      	ldr	r2, [r7, #0]
 8001400:	429a      	cmp	r2, r3
 8001402:	d001      	beq.n	8001408 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001404:	2301      	movs	r3, #1
 8001406:	e0b8      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f003 0302 	and.w	r3, r3, #2
 8001410:	2b00      	cmp	r3, #0
 8001412:	d020      	beq.n	8001456 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f003 0304 	and.w	r3, r3, #4
 800141c:	2b00      	cmp	r3, #0
 800141e:	d005      	beq.n	800142c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001420:	4b59      	ldr	r3, [pc, #356]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	4a58      	ldr	r2, [pc, #352]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001426:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800142a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f003 0308 	and.w	r3, r3, #8
 8001434:	2b00      	cmp	r3, #0
 8001436:	d005      	beq.n	8001444 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001438:	4b53      	ldr	r3, [pc, #332]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143a:	689b      	ldr	r3, [r3, #8]
 800143c:	4a52      	ldr	r2, [pc, #328]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800143e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001442:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001444:	4b50      	ldr	r3, [pc, #320]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	494d      	ldr	r1, [pc, #308]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001452:	4313      	orrs	r3, r2
 8001454:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f003 0301 	and.w	r3, r3, #1
 800145e:	2b00      	cmp	r3, #0
 8001460:	d044      	beq.n	80014ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b01      	cmp	r3, #1
 8001468:	d107      	bne.n	800147a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800146a:	4b47      	ldr	r3, [pc, #284]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001472:	2b00      	cmp	r3, #0
 8001474:	d119      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001476:	2301      	movs	r3, #1
 8001478:	e07f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	685b      	ldr	r3, [r3, #4]
 800147e:	2b02      	cmp	r3, #2
 8001480:	d003      	beq.n	800148a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001486:	2b03      	cmp	r3, #3
 8001488:	d107      	bne.n	800149a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800148a:	4b3f      	ldr	r3, [pc, #252]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001492:	2b00      	cmp	r3, #0
 8001494:	d109      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	e06f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800149a:	4b3b      	ldr	r3, [pc, #236]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0302 	and.w	r3, r3, #2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e067      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014aa:	4b37      	ldr	r3, [pc, #220]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f023 0203 	bic.w	r2, r3, #3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	4934      	ldr	r1, [pc, #208]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014b8:	4313      	orrs	r3, r2
 80014ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80014bc:	f7ff fa74 	bl	80009a8 <HAL_GetTick>
 80014c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014c2:	e00a      	b.n	80014da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014c4:	f7ff fa70 	bl	80009a8 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d901      	bls.n	80014da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80014d6:	2303      	movs	r3, #3
 80014d8:	e04f      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014da:	4b2b      	ldr	r3, [pc, #172]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 80014dc:	689b      	ldr	r3, [r3, #8]
 80014de:	f003 020c 	and.w	r2, r3, #12
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d1eb      	bne.n	80014c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80014ec:	4b25      	ldr	r3, [pc, #148]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	f003 0307 	and.w	r3, r3, #7
 80014f4:	683a      	ldr	r2, [r7, #0]
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d20c      	bcs.n	8001514 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014fa:	4b22      	ldr	r3, [pc, #136]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001502:	4b20      	ldr	r3, [pc, #128]	; (8001584 <HAL_RCC_ClockConfig+0x1b8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	683a      	ldr	r2, [r7, #0]
 800150c:	429a      	cmp	r2, r3
 800150e:	d001      	beq.n	8001514 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001510:	2301      	movs	r3, #1
 8001512:	e032      	b.n	800157a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	d008      	beq.n	8001532 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001520:	4b19      	ldr	r3, [pc, #100]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	68db      	ldr	r3, [r3, #12]
 800152c:	4916      	ldr	r1, [pc, #88]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800152e:	4313      	orrs	r3, r2
 8001530:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f003 0308 	and.w	r3, r3, #8
 800153a:	2b00      	cmp	r3, #0
 800153c:	d009      	beq.n	8001552 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800153e:	4b12      	ldr	r3, [pc, #72]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	490e      	ldr	r1, [pc, #56]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800154e:	4313      	orrs	r3, r2
 8001550:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001552:	f000 f821 	bl	8001598 <HAL_RCC_GetSysClockFreq>
 8001556:	4602      	mov	r2, r0
 8001558:	4b0b      	ldr	r3, [pc, #44]	; (8001588 <HAL_RCC_ClockConfig+0x1bc>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	091b      	lsrs	r3, r3, #4
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	490a      	ldr	r1, [pc, #40]	; (800158c <HAL_RCC_ClockConfig+0x1c0>)
 8001564:	5ccb      	ldrb	r3, [r1, r3]
 8001566:	fa22 f303 	lsr.w	r3, r2, r3
 800156a:	4a09      	ldr	r2, [pc, #36]	; (8001590 <HAL_RCC_ClockConfig+0x1c4>)
 800156c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800156e:	4b09      	ldr	r3, [pc, #36]	; (8001594 <HAL_RCC_ClockConfig+0x1c8>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	4618      	mov	r0, r3
 8001574:	f7ff f9d4 	bl	8000920 <HAL_InitTick>

  return HAL_OK;
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3710      	adds	r7, #16
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	40023c00 	.word	0x40023c00
 8001588:	40023800 	.word	0x40023800
 800158c:	080057b8 	.word	0x080057b8
 8001590:	20000000 	.word	0x20000000
 8001594:	20000004 	.word	0x20000004

08001598 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001598:	b5b0      	push	{r4, r5, r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800159e:	2100      	movs	r1, #0
 80015a0:	6079      	str	r1, [r7, #4]
 80015a2:	2100      	movs	r1, #0
 80015a4:	60f9      	str	r1, [r7, #12]
 80015a6:	2100      	movs	r1, #0
 80015a8:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80015aa:	2100      	movs	r1, #0
 80015ac:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80015ae:	4952      	ldr	r1, [pc, #328]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80015b0:	6889      	ldr	r1, [r1, #8]
 80015b2:	f001 010c 	and.w	r1, r1, #12
 80015b6:	2908      	cmp	r1, #8
 80015b8:	d00d      	beq.n	80015d6 <HAL_RCC_GetSysClockFreq+0x3e>
 80015ba:	2908      	cmp	r1, #8
 80015bc:	f200 8094 	bhi.w	80016e8 <HAL_RCC_GetSysClockFreq+0x150>
 80015c0:	2900      	cmp	r1, #0
 80015c2:	d002      	beq.n	80015ca <HAL_RCC_GetSysClockFreq+0x32>
 80015c4:	2904      	cmp	r1, #4
 80015c6:	d003      	beq.n	80015d0 <HAL_RCC_GetSysClockFreq+0x38>
 80015c8:	e08e      	b.n	80016e8 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80015ca:	4b4c      	ldr	r3, [pc, #304]	; (80016fc <HAL_RCC_GetSysClockFreq+0x164>)
 80015cc:	60bb      	str	r3, [r7, #8]
       break;
 80015ce:	e08e      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80015d0:	4b4b      	ldr	r3, [pc, #300]	; (8001700 <HAL_RCC_GetSysClockFreq+0x168>)
 80015d2:	60bb      	str	r3, [r7, #8]
      break;
 80015d4:	e08b      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80015d6:	4948      	ldr	r1, [pc, #288]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80015d8:	6849      	ldr	r1, [r1, #4]
 80015da:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 80015de:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80015e0:	4945      	ldr	r1, [pc, #276]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80015e2:	6849      	ldr	r1, [r1, #4]
 80015e4:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 80015e8:	2900      	cmp	r1, #0
 80015ea:	d024      	beq.n	8001636 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80015ec:	4942      	ldr	r1, [pc, #264]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80015ee:	6849      	ldr	r1, [r1, #4]
 80015f0:	0989      	lsrs	r1, r1, #6
 80015f2:	4608      	mov	r0, r1
 80015f4:	f04f 0100 	mov.w	r1, #0
 80015f8:	f240 14ff 	movw	r4, #511	; 0x1ff
 80015fc:	f04f 0500 	mov.w	r5, #0
 8001600:	ea00 0204 	and.w	r2, r0, r4
 8001604:	ea01 0305 	and.w	r3, r1, r5
 8001608:	493d      	ldr	r1, [pc, #244]	; (8001700 <HAL_RCC_GetSysClockFreq+0x168>)
 800160a:	fb01 f003 	mul.w	r0, r1, r3
 800160e:	2100      	movs	r1, #0
 8001610:	fb01 f102 	mul.w	r1, r1, r2
 8001614:	1844      	adds	r4, r0, r1
 8001616:	493a      	ldr	r1, [pc, #232]	; (8001700 <HAL_RCC_GetSysClockFreq+0x168>)
 8001618:	fba2 0101 	umull	r0, r1, r2, r1
 800161c:	1863      	adds	r3, r4, r1
 800161e:	4619      	mov	r1, r3
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	461a      	mov	r2, r3
 8001624:	f04f 0300 	mov.w	r3, #0
 8001628:	f7fe fdd6 	bl	80001d8 <__aeabi_uldivmod>
 800162c:	4602      	mov	r2, r0
 800162e:	460b      	mov	r3, r1
 8001630:	4613      	mov	r3, r2
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e04a      	b.n	80016cc <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001636:	4b30      	ldr	r3, [pc, #192]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	099b      	lsrs	r3, r3, #6
 800163c:	461a      	mov	r2, r3
 800163e:	f04f 0300 	mov.w	r3, #0
 8001642:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001646:	f04f 0100 	mov.w	r1, #0
 800164a:	ea02 0400 	and.w	r4, r2, r0
 800164e:	ea03 0501 	and.w	r5, r3, r1
 8001652:	4620      	mov	r0, r4
 8001654:	4629      	mov	r1, r5
 8001656:	f04f 0200 	mov.w	r2, #0
 800165a:	f04f 0300 	mov.w	r3, #0
 800165e:	014b      	lsls	r3, r1, #5
 8001660:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001664:	0142      	lsls	r2, r0, #5
 8001666:	4610      	mov	r0, r2
 8001668:	4619      	mov	r1, r3
 800166a:	1b00      	subs	r0, r0, r4
 800166c:	eb61 0105 	sbc.w	r1, r1, r5
 8001670:	f04f 0200 	mov.w	r2, #0
 8001674:	f04f 0300 	mov.w	r3, #0
 8001678:	018b      	lsls	r3, r1, #6
 800167a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800167e:	0182      	lsls	r2, r0, #6
 8001680:	1a12      	subs	r2, r2, r0
 8001682:	eb63 0301 	sbc.w	r3, r3, r1
 8001686:	f04f 0000 	mov.w	r0, #0
 800168a:	f04f 0100 	mov.w	r1, #0
 800168e:	00d9      	lsls	r1, r3, #3
 8001690:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001694:	00d0      	lsls	r0, r2, #3
 8001696:	4602      	mov	r2, r0
 8001698:	460b      	mov	r3, r1
 800169a:	1912      	adds	r2, r2, r4
 800169c:	eb45 0303 	adc.w	r3, r5, r3
 80016a0:	f04f 0000 	mov.w	r0, #0
 80016a4:	f04f 0100 	mov.w	r1, #0
 80016a8:	0299      	lsls	r1, r3, #10
 80016aa:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80016ae:	0290      	lsls	r0, r2, #10
 80016b0:	4602      	mov	r2, r0
 80016b2:	460b      	mov	r3, r1
 80016b4:	4610      	mov	r0, r2
 80016b6:	4619      	mov	r1, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	461a      	mov	r2, r3
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	f7fe fd8a 	bl	80001d8 <__aeabi_uldivmod>
 80016c4:	4602      	mov	r2, r0
 80016c6:	460b      	mov	r3, r1
 80016c8:	4613      	mov	r3, r2
 80016ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <HAL_RCC_GetSysClockFreq+0x160>)
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	0c1b      	lsrs	r3, r3, #16
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	3301      	adds	r3, #1
 80016d8:	005b      	lsls	r3, r3, #1
 80016da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80016dc:	68fa      	ldr	r2, [r7, #12]
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80016e4:	60bb      	str	r3, [r7, #8]
      break;
 80016e6:	e002      	b.n	80016ee <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80016e8:	4b04      	ldr	r3, [pc, #16]	; (80016fc <HAL_RCC_GetSysClockFreq+0x164>)
 80016ea:	60bb      	str	r3, [r7, #8]
      break;
 80016ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80016ee:	68bb      	ldr	r3, [r7, #8]
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bdb0      	pop	{r4, r5, r7, pc}
 80016f8:	40023800 	.word	0x40023800
 80016fc:	00f42400 	.word	0x00f42400
 8001700:	017d7840 	.word	0x017d7840

08001704 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d101      	bne.n	8001716 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e022      	b.n	800175c <HAL_SD_Init+0x58>
  assert_param(IS_SDIO_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDIO_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800171c:	b2db      	uxtb	r3, r3
 800171e:	2b00      	cmp	r3, #0
 8001720:	d105      	bne.n	800172e <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2200      	movs	r2, #0
 8001726:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f7ff f809 	bl	8000740 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	2203      	movs	r2, #3
 8001732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f814 	bl	8001764 <HAL_SD_InitCard>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e00a      	b.n	800175c <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	2200      	movs	r2, #0
 8001750:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2201      	movs	r2, #1
 8001756:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800175a:	2300      	movs	r3, #0
}
 800175c:	4618      	mov	r0, r3
 800175e:	3708      	adds	r7, #8
 8001760:	46bd      	mov	sp, r7
 8001762:	bd80      	pop	{r7, pc}

08001764 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8001764:	b5b0      	push	{r4, r5, r7, lr}
 8001766:	b08e      	sub	sp, #56	; 0x38
 8001768:	af04      	add	r7, sp, #16
 800176a:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDIO peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDIO_CLOCK_EDGE_RISING;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDIO_CLOCK_BYPASS_DISABLE;
 8001770:	2300      	movs	r3, #0
 8001772:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDIO_CLOCK_POWER_SAVE_DISABLE;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDIO_BUS_WIDE_1B;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDIO_HARDWARE_FLOW_CONTROL_DISABLE;
 800177c:	2300      	movs	r3, #0
 800177e:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDIO_INIT_CLK_DIV;
 8001780:	2376      	movs	r3, #118	; 0x76
 8001782:	61fb      	str	r3, [r7, #28]

  /* Initialize SDIO peripheral interface with default configuration */
  status = SDIO_Init(hsd->Instance, Init);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681d      	ldr	r5, [r3, #0]
 8001788:	466c      	mov	r4, sp
 800178a:	f107 0314 	add.w	r3, r7, #20
 800178e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001792:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8001796:	f107 0308 	add.w	r3, r7, #8
 800179a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800179c:	4628      	mov	r0, r5
 800179e:	f000 ff35 	bl	800260c <SDIO_Init>
 80017a2:	4603      	mov	r3, r0
 80017a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e04c      	b.n	800184e <HAL_SD_InitCard+0xea>
  }

  /* Disable SDIO Clock */
  __HAL_SD_DISABLE(hsd);
 80017b4:	4b28      	ldr	r3, [pc, #160]	; (8001858 <HAL_SD_InitCard+0xf4>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]

  /* Set Power State to ON */
  (void)SDIO_PowerState_ON(hsd->Instance);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	4618      	mov	r0, r3
 80017c0:	f000 ff6d 	bl	800269e <SDIO_PowerState_ON>

  /* Enable SDIO Clock */
  __HAL_SD_ENABLE(hsd);
 80017c4:	4b24      	ldr	r3, [pc, #144]	; (8001858 <HAL_SD_InitCard+0xf4>)
 80017c6:	2201      	movs	r2, #1
 80017c8:	601a      	str	r2, [r3, #0]

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 80017ca:	6878      	ldr	r0, [r7, #4]
 80017cc:	f000 fe68 	bl	80024a0 <SD_PowerON>
 80017d0:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80017d2:	6a3b      	ldr	r3, [r7, #32]
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d00b      	beq.n	80017f0 <HAL_SD_InitCard+0x8c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2201      	movs	r2, #1
 80017dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80017e4:	6a3b      	ldr	r3, [r7, #32]
 80017e6:	431a      	orrs	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 80017ec:	2301      	movs	r3, #1
 80017ee:	e02e      	b.n	800184e <HAL_SD_InitCard+0xea>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 80017f0:	6878      	ldr	r0, [r7, #4]
 80017f2:	f000 fd89 	bl	8002308 <SD_InitCard>
 80017f6:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 80017f8:	6a3b      	ldr	r3, [r7, #32]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d00b      	beq.n	8001816 <HAL_SD_InitCard+0xb2>
  {
    hsd->State = HAL_SD_STATE_READY;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800180a:	6a3b      	ldr	r3, [r7, #32]
 800180c:	431a      	orrs	r2, r3
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
 8001814:	e01b      	b.n	800184e <HAL_SD_InitCard+0xea>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800181e:	4618      	mov	r0, r3
 8001820:	f000 ffd0 	bl	80027c4 <SDMMC_CmdBlockLength>
 8001824:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8001826:	6a3b      	ldr	r3, [r7, #32]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d00f      	beq.n	800184c <HAL_SD_InitCard+0xe8>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a0a      	ldr	r2, [pc, #40]	; (800185c <HAL_SD_InitCard+0xf8>)
 8001832:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001838:	6a3b      	ldr	r3, [r7, #32]
 800183a:	431a      	orrs	r2, r3
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8001848:	2301      	movs	r3, #1
 800184a:	e000      	b.n	800184e <HAL_SD_InitCard+0xea>
  }

  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	3728      	adds	r7, #40	; 0x28
 8001852:	46bd      	mov	sp, r7
 8001854:	bdb0      	pop	{r4, r5, r7, pc}
 8001856:	bf00      	nop
 8001858:	422580a0 	.word	0x422580a0
 800185c:	004005ff 	.word	0x004005ff

08001860 <HAL_SD_ReadBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to read
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b092      	sub	sp, #72	; 0x48
 8001864:	af00      	add	r7, sp, #0
 8001866:	60f8      	str	r0, [r7, #12]
 8001868:	60b9      	str	r1, [r7, #8]
 800186a:	607a      	str	r2, [r7, #4]
 800186c:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 800186e:	f7ff f89b 	bl	80009a8 <HAL_GetTick>
 8001872:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d107      	bne.n	8001892 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001886:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 800188e:	2301      	movs	r3, #1
 8001890:	e1bd      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001898:	b2db      	uxtb	r3, r3
 800189a:	2b01      	cmp	r3, #1
 800189c:	f040 81b0 	bne.w	8001c00 <HAL_SD_ReadBlocks+0x3a0>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	2200      	movs	r2, #0
 80018a4:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 80018a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	441a      	add	r2, r3
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d907      	bls.n	80018c4 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b8:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e1a4      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	2203      	movs	r2, #3
 80018c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	2200      	movs	r2, #0
 80018d2:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d002      	beq.n	80018e2 <HAL_SD_ReadBlocks+0x82>
    {
      add *= 512U;
 80018dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018de:	025b      	lsls	r3, r3, #9
 80018e0:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80018e2:	f04f 33ff 	mov.w	r3, #4294967295
 80018e6:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 80018e8:	683b      	ldr	r3, [r7, #0]
 80018ea:	025b      	lsls	r3, r3, #9
 80018ec:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 80018ee:	2390      	movs	r3, #144	; 0x90
 80018f0:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_SDIO;
 80018f2:	2302      	movs	r3, #2
 80018f4:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 80018f6:	2300      	movs	r3, #0
 80018f8:	627b      	str	r3, [r7, #36]	; 0x24
    config.DPSM          = SDIO_DPSM_ENABLE;
 80018fa:	2301      	movs	r3, #1
 80018fc:	62bb      	str	r3, [r7, #40]	; 0x28
    (void)SDIO_ConfigData(hsd->Instance, &config);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f107 0214 	add.w	r2, r7, #20
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f000 ff2f 	bl	800276c <SDIO_ConfigData>

    /* Read block(s) in polling mode */
    if(NumberOfBlocks > 1U)
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	2b01      	cmp	r3, #1
 8001912:	d90a      	bls.n	800192a <HAL_SD_ReadBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	2202      	movs	r2, #2
 8001918:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001920:	4618      	mov	r0, r3
 8001922:	f000 ff93 	bl	800284c <SDMMC_CmdReadMultiBlock>
 8001926:	6478      	str	r0, [r7, #68]	; 0x44
 8001928:	e009      	b.n	800193e <HAL_SD_ReadBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2201      	movs	r2, #1
 800192e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001936:	4618      	mov	r0, r3
 8001938:	f000 ff66 	bl	8002808 <SDMMC_CmdReadSingleBlock>
 800193c:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 800193e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001940:	2b00      	cmp	r3, #0
 8001942:	d012      	beq.n	800196a <HAL_SD_ReadBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a7a      	ldr	r2, [pc, #488]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 800194a:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001950:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001952:	431a      	orrs	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2201      	movs	r2, #1
 800195c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2200      	movs	r2, #0
 8001964:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e151      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    }

    /* Poll on SDIO flags */
    dataremaining = config.DataLength;
 800196a:	69bb      	ldr	r3, [r7, #24]
 800196c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 800196e:	e061      	b.n	8001a34 <HAL_SD_ReadBlocks+0x1d4>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXFIFOHF) && (dataremaining > 0U))
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001976:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800197a:	2b00      	cmp	r3, #0
 800197c:	d03c      	beq.n	80019f8 <HAL_SD_ReadBlocks+0x198>
 800197e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001980:	2b00      	cmp	r3, #0
 8001982:	d039      	beq.n	80019f8 <HAL_SD_ReadBlocks+0x198>
      {
        /* Read data from SDIO Rx FIFO */
        for(count = 0U; count < 8U; count++)
 8001984:	2300      	movs	r3, #0
 8001986:	643b      	str	r3, [r7, #64]	; 0x40
 8001988:	e033      	b.n	80019f2 <HAL_SD_ReadBlocks+0x192>
        {
          data = SDIO_ReadFIFO(hsd->Instance);
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4618      	mov	r0, r3
 8001990:	f000 fe67 	bl	8002662 <SDIO_ReadFIFO>
 8001994:	62f8      	str	r0, [r7, #44]	; 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 8001996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001998:	b2da      	uxtb	r2, r3
 800199a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800199c:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 800199e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019a0:	3301      	adds	r3, #1
 80019a2:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019a6:	3b01      	subs	r3, #1
 80019a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 80019aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019ac:	0a1b      	lsrs	r3, r3, #8
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b2:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019b6:	3301      	adds	r3, #1
 80019b8:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019bc:	3b01      	subs	r3, #1
 80019be:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 80019c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019c2:	0c1b      	lsrs	r3, r3, #16
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019c8:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019cc:	3301      	adds	r3, #1
 80019ce:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019d2:	3b01      	subs	r3, #1
 80019d4:	63fb      	str	r3, [r7, #60]	; 0x3c
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 80019d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80019d8:	0e1b      	lsrs	r3, r3, #24
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019de:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 80019e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019e2:	3301      	adds	r3, #1
 80019e4:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 80019e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e8:	3b01      	subs	r3, #1
 80019ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        for(count = 0U; count < 8U; count++)
 80019ec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019ee:	3301      	adds	r3, #1
 80019f0:	643b      	str	r3, [r7, #64]	; 0x40
 80019f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019f4:	2b07      	cmp	r3, #7
 80019f6:	d9c8      	bls.n	800198a <HAL_SD_ReadBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 80019f8:	f7fe ffd6 	bl	80009a8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d902      	bls.n	8001a0e <HAL_SD_ReadBlocks+0x1ae>
 8001a08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d112      	bne.n	8001a34 <HAL_SD_ReadBlocks+0x1d4>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a48      	ldr	r2, [pc, #288]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 8001a14:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a1a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	2201      	movs	r2, #1
 8001a26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0ec      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a3a:	f240 332a 	movw	r3, #810	; 0x32a
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d095      	beq.n	8001970 <HAL_SD_ReadBlocks+0x110>
      }
    }
    
    /* Send stop transmission command in case of multiblock read */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d022      	beq.n	8001a98 <HAL_SD_ReadBlocks+0x238>
 8001a52:	683b      	ldr	r3, [r7, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d91f      	bls.n	8001a98 <HAL_SD_ReadBlocks+0x238>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a5c:	2b03      	cmp	r3, #3
 8001a5e:	d01b      	beq.n	8001a98 <HAL_SD_ReadBlocks+0x238>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f000 ff57 	bl	8002918 <SDMMC_CmdStopTransfer>
 8001a6a:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d012      	beq.n	8001a98 <HAL_SD_ReadBlocks+0x238>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	4a2f      	ldr	r2, [pc, #188]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 8001a78:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a80:	431a      	orrs	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	2200      	movs	r2, #0
 8001a92:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e0ba      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d012      	beq.n	8001acc <HAL_SD_ReadBlocks+0x26c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a22      	ldr	r2, [pc, #136]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 8001aac:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab2:	f043 0208 	orr.w	r2, r3, #8
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e0a0      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d012      	beq.n	8001b00 <HAL_SD_ReadBlocks+0x2a0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a15      	ldr	r2, [pc, #84]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 8001ae0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ae6:	f043 0202 	orr.w	r2, r3, #2
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2201      	movs	r2, #1
 8001af2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e086      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXOVERR))
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b06:	f003 0320 	and.w	r3, r3, #32
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d063      	beq.n	8001bd6 <HAL_SD_ReadBlocks+0x376>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a08      	ldr	r2, [pc, #32]	; (8001b34 <HAL_SD_ReadBlocks+0x2d4>)
 8001b14:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1a:	f043 0220 	orr.w	r2, r3, #32
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	2201      	movs	r2, #1
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001b30:	2301      	movs	r3, #1
 8001b32:	e06c      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
 8001b34:	004005ff 	.word	0x004005ff
    }

    /* Empty FIFO if there is still any data */
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
    {
      data = SDIO_ReadFIFO(hsd->Instance);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 fd90 	bl	8002662 <SDIO_ReadFIFO>
 8001b42:	62f8      	str	r0, [r7, #44]	; 0x2c
      *tempbuff = (uint8_t)(data & 0xFFU);
 8001b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4a:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b4e:	3301      	adds	r3, #1
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b54:	3b01      	subs	r3, #1
 8001b56:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 8001b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b5a:	0a1b      	lsrs	r3, r3, #8
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b60:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b64:	3301      	adds	r3, #1
 8001b66:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b6a:	3b01      	subs	r3, #1
 8001b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 8001b6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b70:	0c1b      	lsrs	r3, r3, #16
 8001b72:	b2da      	uxtb	r2, r3
 8001b74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b76:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b80:	3b01      	subs	r3, #1
 8001b82:	63fb      	str	r3, [r7, #60]	; 0x3c
      *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 8001b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b86:	0e1b      	lsrs	r3, r3, #24
 8001b88:	b2da      	uxtb	r2, r3
 8001b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b8c:	701a      	strb	r2, [r3, #0]
      tempbuff++;
 8001b8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b90:	3301      	adds	r3, #1
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
      dataremaining--;
 8001b94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001b96:	3b01      	subs	r3, #1
 8001b98:	63fb      	str	r3, [r7, #60]	; 0x3c

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001b9a:	f7fe ff05 	bl	80009a8 <HAL_GetTick>
 8001b9e:	4602      	mov	r2, r0
 8001ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ba2:	1ad3      	subs	r3, r2, r3
 8001ba4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001ba6:	429a      	cmp	r2, r3
 8001ba8:	d902      	bls.n	8001bb0 <HAL_SD_ReadBlocks+0x350>
 8001baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d112      	bne.n	8001bd6 <HAL_SD_ReadBlocks+0x376>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a18      	ldr	r2, [pc, #96]	; (8001c18 <HAL_SD_ReadBlocks+0x3b8>)
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State= HAL_SD_STATE_READY;
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e01b      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
    while ((__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_RXDAVL)) && (dataremaining > 0U))
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <HAL_SD_ReadBlocks+0x38a>
 8001be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1a6      	bne.n	8001b38 <HAL_SD_ReadBlocks+0x2d8>
      }
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f240 523a 	movw	r2, #1338	; 0x53a
 8001bf2:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	e006      	b.n	8001c0e <HAL_SD_ReadBlocks+0x3ae>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c04:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
  }
}
 8001c0e:	4618      	mov	r0, r3
 8001c10:	3748      	adds	r7, #72	; 0x48
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	004005ff 	.word	0x004005ff

08001c1c <HAL_SD_WriteBlocks>:
  * @param  NumberOfBlocks: Number of SD blocks to write
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks, uint32_t Timeout)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b092      	sub	sp, #72	; 0x48
 8001c20:	af00      	add	r7, sp, #0
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
 8001c26:	607a      	str	r2, [r7, #4]
 8001c28:	603b      	str	r3, [r7, #0]
  SDIO_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8001c2a:	f7fe febd 	bl	80009a8 <HAL_GetTick>
 8001c2e:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t count, data, dataremaining;
  uint32_t add = BlockAdd;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	63bb      	str	r3, [r7, #56]	; 0x38
  uint8_t *tempbuff = pData;
 8001c34:	68bb      	ldr	r3, [r7, #8]
 8001c36:	637b      	str	r3, [r7, #52]	; 0x34

  if(NULL == pData)
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d107      	bne.n	8001c4e <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c42:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e166      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c54:	b2db      	uxtb	r3, r3
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	f040 8159 	bne.w	8001f0e <HAL_SD_WriteBlocks+0x2f2>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8001c62:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	441a      	add	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d907      	bls.n	8001c80 <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c74:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8001c7c:	2301      	movs	r3, #1
 8001c7e:	e14d      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	2203      	movs	r2, #3
 8001c84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	62da      	str	r2, [r3, #44]	; 0x2c

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d002      	beq.n	8001c9e <HAL_SD_WriteBlocks+0x82>
    {
      add *= 512U;
 8001c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001c9a:	025b      	lsls	r3, r3, #9
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8001c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca2:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	025b      	lsls	r3, r3, #9
 8001ca8:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDIO_DATABLOCK_SIZE_512B;
 8001caa:	2390      	movs	r3, #144	; 0x90
 8001cac:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDIO_TRANSFER_DIR_TO_CARD;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	627b      	str	r3, [r7, #36]	; 0x24
    config.TransferMode  = SDIO_TRANSFER_MODE_BLOCK;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	62bb      	str	r3, [r7, #40]	; 0x28
    config.DPSM          = SDIO_DPSM_ENABLE;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    (void)SDIO_ConfigData(hsd->Instance, &config);
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f107 0218 	add.w	r2, r7, #24
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f000 fd51 	bl	800276c <SDIO_ConfigData>

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	2b01      	cmp	r3, #1
 8001cce:	d90a      	bls.n	8001ce6 <HAL_SD_WriteBlocks+0xca>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	2220      	movs	r2, #32
 8001cd4:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f000 fdf9 	bl	80028d4 <SDMMC_CmdWriteMultiBlock>
 8001ce2:	6478      	str	r0, [r7, #68]	; 0x44
 8001ce4:	e009      	b.n	8001cfa <HAL_SD_WriteBlocks+0xde>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2210      	movs	r2, #16
 8001cea:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f000 fdcc 	bl	8002890 <SDMMC_CmdWriteSingleBlock>
 8001cf8:	6478      	str	r0, [r7, #68]	; 0x44
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8001cfa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d012      	beq.n	8001d26 <HAL_SD_WriteBlocks+0x10a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4a87      	ldr	r2, [pc, #540]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001d06:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d0e:	431a      	orrs	r2, r3
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	e0fa      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 8001d26:	69fb      	ldr	r3, [r7, #28]
 8001d28:	63fb      	str	r3, [r7, #60]	; 0x3c
#if defined(SDIO_STA_STBITERR)
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001d2a:	e065      	b.n	8001df8 <HAL_SD_WriteBlocks+0x1dc>
#else /* SDIO_STA_STBITERR not defined */
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND))
#endif /* SDIO_STA_STBITERR */
    {
      if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXFIFOHE) && (dataremaining > 0U))
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d040      	beq.n	8001dbc <HAL_SD_WriteBlocks+0x1a0>
 8001d3a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d03d      	beq.n	8001dbc <HAL_SD_WriteBlocks+0x1a0>
      {
        /* Write data to SDIO Tx FIFO */
        for(count = 0U; count < 8U; count++)
 8001d40:	2300      	movs	r3, #0
 8001d42:	643b      	str	r3, [r7, #64]	; 0x40
 8001d44:	e037      	b.n	8001db6 <HAL_SD_WriteBlocks+0x19a>
        {
          data = (uint32_t)(*tempbuff);
 8001d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d4e:	3301      	adds	r3, #1
 8001d50:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d54:	3b01      	subs	r3, #1
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 8U);
 8001d58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	021a      	lsls	r2, r3, #8
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d66:	3301      	adds	r3, #1
 8001d68:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d6c:	3b01      	subs	r3, #1
 8001d6e:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 16U);
 8001d70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	041a      	lsls	r2, r3, #16
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4313      	orrs	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d7e:	3301      	adds	r3, #1
 8001d80:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d84:	3b01      	subs	r3, #1
 8001d86:	63fb      	str	r3, [r7, #60]	; 0x3c
          data |= ((uint32_t)(*tempbuff) << 24U);
 8001d88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	061a      	lsls	r2, r3, #24
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
          tempbuff++;
 8001d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d96:	3301      	adds	r3, #1
 8001d98:	637b      	str	r3, [r7, #52]	; 0x34
          dataremaining--;
 8001d9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d9c:	3b01      	subs	r3, #1
 8001d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
          (void)SDIO_WriteFIFO(hsd->Instance, &data);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f107 0214 	add.w	r2, r7, #20
 8001da8:	4611      	mov	r1, r2
 8001daa:	4618      	mov	r0, r3
 8001dac:	f000 fc66 	bl	800267c <SDIO_WriteFIFO>
        for(count = 0U; count < 8U; count++)
 8001db0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db2:	3301      	adds	r3, #1
 8001db4:	643b      	str	r3, [r7, #64]	; 0x40
 8001db6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001db8:	2b07      	cmp	r3, #7
 8001dba:	d9c4      	bls.n	8001d46 <HAL_SD_WriteBlocks+0x12a>
        }
      }

      if(((HAL_GetTick()-tickstart) >=  Timeout) || (Timeout == 0U))
 8001dbc:	f7fe fdf4 	bl	80009a8 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d902      	bls.n	8001dd2 <HAL_SD_WriteBlocks+0x1b6>
 8001dcc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d112      	bne.n	8001df8 <HAL_SD_WriteBlocks+0x1dc>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a53      	ldr	r2, [pc, #332]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001dd8:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001dde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001de0:	431a      	orrs	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	2201      	movs	r2, #1
 8001dea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	2200      	movs	r2, #0
 8001df2:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e091      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    while(!__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR | SDIO_FLAG_DCRCFAIL | SDIO_FLAG_DTIMEOUT | SDIO_FLAG_DATAEND | SDIO_FLAG_STBITERR))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001dfe:	f240 331a 	movw	r3, #794	; 0x31a
 8001e02:	4013      	ands	r3, r2
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d091      	beq.n	8001d2c <HAL_SD_WriteBlocks+0x110>
      }
    }

    /* Send stop transmission command in case of multiblock write */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d022      	beq.n	8001e5c <HAL_SD_WriteBlocks+0x240>
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d91f      	bls.n	8001e5c <HAL_SD_WriteBlocks+0x240>
    {
      if(hsd->SdCard.CardType != CARD_SECURED)
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e20:	2b03      	cmp	r3, #3
 8001e22:	d01b      	beq.n	8001e5c <HAL_SD_WriteBlocks+0x240>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4618      	mov	r0, r3
 8001e2a:	f000 fd75 	bl	8002918 <SDMMC_CmdStopTransfer>
 8001e2e:	6478      	str	r0, [r7, #68]	; 0x44
        if(errorstate != HAL_SD_ERROR_NONE)
 8001e30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d012      	beq.n	8001e5c <HAL_SD_WriteBlocks+0x240>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	4a3a      	ldr	r2, [pc, #232]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001e3c:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->ErrorCode |= errorstate;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001e44:	431a      	orrs	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	639a      	str	r2, [r3, #56]	; 0x38
          hsd->State = HAL_SD_STATE_READY;
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2201      	movs	r2, #1
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          hsd->Context = SD_CONTEXT_NONE;
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2200      	movs	r2, #0
 8001e56:	631a      	str	r2, [r3, #48]	; 0x30
          return HAL_ERROR;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	e05f      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
        }
      }
    }

    /* Get error state */
    if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DTIMEOUT))
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e62:	f003 0308 	and.w	r3, r3, #8
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d012      	beq.n	8001e90 <HAL_SD_WriteBlocks+0x274>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a2d      	ldr	r2, [pc, #180]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001e70:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e76:	f043 0208 	orr.w	r2, r3, #8
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	2201      	movs	r2, #1
 8001e82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2200      	movs	r2, #0
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e045      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_DCRCFAIL))
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e96:	f003 0302 	and.w	r3, r3, #2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d012      	beq.n	8001ec4 <HAL_SD_WriteBlocks+0x2a8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a20      	ldr	r2, [pc, #128]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001ea4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eaa:	f043 0202 	orr.w	r2, r3, #2
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e02b      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    }
    else if(__HAL_SD_GET_FLAG(hsd, SDIO_FLAG_TXUNDERR))
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eca:	f003 0310 	and.w	r3, r3, #16
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d012      	beq.n	8001ef8 <HAL_SD_WriteBlocks+0x2dc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a13      	ldr	r2, [pc, #76]	; (8001f24 <HAL_SD_WriteBlocks+0x308>)
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ede:	f043 0210 	orr.w	r2, r3, #16
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e011      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_DATA_FLAGS);
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f240 523a 	movw	r2, #1338	; 0x53a
 8001f00:	639a      	str	r2, [r3, #56]	; 0x38

    hsd->State = HAL_SD_STATE_READY;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	2201      	movs	r2, #1
 8001f06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_OK;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	e006      	b.n	8001f1c <HAL_SD_WriteBlocks+0x300>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f12:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
  }
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	3748      	adds	r7, #72	; 0x48
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	004005ff 	.word	0x004005ff

08001f28 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
 8001f30:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f36:	0f9b      	lsrs	r3, r3, #30
 8001f38:	b2da      	uxtb	r2, r3
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f42:	0e9b      	lsrs	r3, r3, #26
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	b2da      	uxtb	r2, r3
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f54:	0e1b      	lsrs	r3, r3, #24
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f003 0303 	and.w	r3, r3, #3
 8001f5c:	b2da      	uxtb	r2, r3
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f66:	0c1b      	lsrs	r3, r3, #16
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f88:	0d1b      	lsrs	r3, r3, #20
 8001f8a:	b29a      	uxth	r2, r3
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001f94:	0c1b      	lsrs	r3, r3, #16
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	f003 030f 	and.w	r3, r3, #15
 8001f9c:	b2da      	uxtb	r2, r3
 8001f9e:	683b      	ldr	r3, [r7, #0]
 8001fa0:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fa6:	0bdb      	lsrs	r3, r3, #15
 8001fa8:	b2db      	uxtb	r3, r3
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	b2da      	uxtb	r2, r3
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fb8:	0b9b      	lsrs	r3, r3, #14
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	f003 0301 	and.w	r3, r3, #1
 8001fc0:	b2da      	uxtb	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fca:	0b5b      	lsrs	r3, r3, #13
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	f003 0301 	and.w	r3, r3, #1
 8001fd2:	b2da      	uxtb	r2, r3
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001fdc:	0b1b      	lsrs	r3, r3, #12
 8001fde:	b2db      	uxtb	r3, r3
 8001fe0:	f003 0301 	and.w	r3, r3, #1
 8001fe4:	b2da      	uxtb	r2, r3
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	2200      	movs	r2, #0
 8001fee:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d163      	bne.n	80020c0 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001ffc:	009a      	lsls	r2, r3, #2
 8001ffe:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002002:	4013      	ands	r3, r2
 8002004:	687a      	ldr	r2, [r7, #4]
 8002006:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8002008:	0f92      	lsrs	r2, r2, #30
 800200a:	431a      	orrs	r2, r3
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002014:	0edb      	lsrs	r3, r3, #27
 8002016:	b2db      	uxtb	r3, r3
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	b2da      	uxtb	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002026:	0e1b      	lsrs	r3, r3, #24
 8002028:	b2db      	uxtb	r3, r3
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	b2da      	uxtb	r2, r3
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002038:	0d5b      	lsrs	r3, r3, #21
 800203a:	b2db      	uxtb	r3, r3
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	b2da      	uxtb	r2, r3
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800204a:	0c9b      	lsrs	r3, r3, #18
 800204c:	b2db      	uxtb	r3, r3
 800204e:	f003 0307 	and.w	r3, r3, #7
 8002052:	b2da      	uxtb	r2, r3
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205c:	0bdb      	lsrs	r3, r3, #15
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	b2da      	uxtb	r2, r3
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	1c5a      	adds	r2, r3, #1
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	7e1b      	ldrb	r3, [r3, #24]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	f003 0307 	and.w	r3, r3, #7
 800207e:	3302      	adds	r3, #2
 8002080:	2201      	movs	r2, #1
 8002082:	fa02 f303 	lsl.w	r3, r2, r3
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800208a:	fb02 f203 	mul.w	r2, r2, r3
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	7a1b      	ldrb	r3, [r3, #8]
 8002096:	b2db      	uxtb	r3, r3
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	2201      	movs	r2, #1
 800209e:	409a      	lsls	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80020ac:	0a52      	lsrs	r2, r2, #9
 80020ae:	fb02 f203 	mul.w	r2, r2, r3
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020bc:	661a      	str	r2, [r3, #96]	; 0x60
 80020be:	e031      	b.n	8002124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c4:	2b01      	cmp	r3, #1
 80020c6:	d11d      	bne.n	8002104 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020cc:	041b      	lsls	r3, r3, #16
 80020ce:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020d6:	0c1b      	lsrs	r3, r3, #16
 80020d8:	431a      	orrs	r2, r3
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	691b      	ldr	r3, [r3, #16]
 80020e2:	3301      	adds	r3, #1
 80020e4:	029a      	lsls	r2, r3, #10
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80020f8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	661a      	str	r2, [r3, #96]	; 0x60
 8002102:	e00f      	b.n	8002124 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDIO_STATIC_FLAGS);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a58      	ldr	r2, [pc, #352]	; (800226c <HAL_SD_GetCardCSD+0x344>)
 800210a:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002110:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002120:	2301      	movs	r3, #1
 8002122:	e09d      	b.n	8002260 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002128:	0b9b      	lsrs	r3, r3, #14
 800212a:	b2db      	uxtb	r3, r3
 800212c:	f003 0301 	and.w	r3, r3, #1
 8002130:	b2da      	uxtb	r2, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800213a:	09db      	lsrs	r3, r3, #7
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002142:	b2da      	uxtb	r2, r3
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800214c:	b2db      	uxtb	r3, r3
 800214e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002152:	b2da      	uxtb	r2, r3
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215c:	0fdb      	lsrs	r3, r3, #31
 800215e:	b2da      	uxtb	r2, r3
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002168:	0f5b      	lsrs	r3, r3, #29
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 0303 	and.w	r3, r3, #3
 8002170:	b2da      	uxtb	r2, r3
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217a:	0e9b      	lsrs	r3, r3, #26
 800217c:	b2db      	uxtb	r3, r3
 800217e:	f003 0307 	and.w	r3, r3, #7
 8002182:	b2da      	uxtb	r2, r3
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800218c:	0d9b      	lsrs	r3, r3, #22
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f003 030f 	and.w	r3, r3, #15
 8002194:	b2da      	uxtb	r2, r3
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	0d5b      	lsrs	r3, r3, #21
 80021a0:	b2db      	uxtb	r3, r3
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	2200      	movs	r2, #0
 80021b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ba:	0c1b      	lsrs	r3, r3, #16
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	b2da      	uxtb	r2, r3
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ce:	0bdb      	lsrs	r3, r3, #15
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 0301 	and.w	r3, r3, #1
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021e2:	0b9b      	lsrs	r3, r3, #14
 80021e4:	b2db      	uxtb	r3, r3
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	b2da      	uxtb	r2, r3
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021f6:	0b5b      	lsrs	r3, r3, #13
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	f003 0301 	and.w	r3, r3, #1
 80021fe:	b2da      	uxtb	r2, r3
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800220a:	0b1b      	lsrs	r3, r3, #12
 800220c:	b2db      	uxtb	r3, r3
 800220e:	f003 0301 	and.w	r3, r3, #1
 8002212:	b2da      	uxtb	r2, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800221e:	0a9b      	lsrs	r3, r3, #10
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0303 	and.w	r3, r3, #3
 8002226:	b2da      	uxtb	r2, r3
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002232:	0a1b      	lsrs	r3, r3, #8
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	b2da      	uxtb	r2, r3
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800224e:	b2da      	uxtb	r2, r3
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2201      	movs	r2, #1
 800225a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800225e:	2300      	movs	r3, #0
}
 8002260:	4618      	mov	r0, r3
 8002262:	370c      	adds	r7, #12
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr
 800226c:	004005ff 	.word	0x004005ff

08002270 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800227e:	683b      	ldr	r3, [r7, #0]
 8002280:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002296:	683b      	ldr	r3, [r7, #0]
 8002298:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80022d0:	2300      	movs	r3, #0
 80022d2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80022d4:	f107 030c 	add.w	r3, r7, #12
 80022d8:	4619      	mov	r1, r3
 80022da:	6878      	ldr	r0, [r7, #4]
 80022dc:	f000 f96e 	bl	80025bc <SD_SendStatus>
 80022e0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d005      	beq.n	80022f4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80022ec:	697b      	ldr	r3, [r7, #20]
 80022ee:	431a      	orrs	r2, r3
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	0a5b      	lsrs	r3, r3, #9
 80022f8:	f003 030f 	and.w	r3, r3, #15
 80022fc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80022fe:	693b      	ldr	r3, [r7, #16]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3718      	adds	r7, #24
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002308:	b5b0      	push	{r4, r5, r7, lr}
 800230a:	b094      	sub	sp, #80	; 0x50
 800230c:	af04      	add	r7, sp, #16
 800230e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8002310:	2301      	movs	r3, #1
 8002312:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDIO_GetPowerState(hsd->Instance) == 0U)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4618      	mov	r0, r3
 800231a:	f000 f9cf 	bl	80026bc <SDIO_GetPowerState>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d102      	bne.n	800232a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8002324:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002328:	e0b6      	b.n	8002498 <SD_InitCard+0x190>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800232e:	2b03      	cmp	r3, #3
 8002330:	d02f      	beq.n	8002392 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f000 fbb5 	bl	8002aa6 <SDMMC_CmdSendCID>
 800233c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 800233e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SD_InitCard+0x40>
    {
      return errorstate;
 8002344:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002346:	e0a7      	b.n	8002498 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2100      	movs	r1, #0
 800234e:	4618      	mov	r0, r3
 8002350:	f000 f9f9 	bl	8002746 <SDIO_GetResponse>
 8002354:	4602      	mov	r2, r0
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	2104      	movs	r1, #4
 8002360:	4618      	mov	r0, r3
 8002362:	f000 f9f0 	bl	8002746 <SDIO_GetResponse>
 8002366:	4602      	mov	r2, r0
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	2108      	movs	r1, #8
 8002372:	4618      	mov	r0, r3
 8002374:	f000 f9e7 	bl	8002746 <SDIO_GetResponse>
 8002378:	4602      	mov	r2, r0
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	210c      	movs	r1, #12
 8002384:	4618      	mov	r0, r3
 8002386:	f000 f9de 	bl	8002746 <SDIO_GetResponse>
 800238a:	4602      	mov	r2, r0
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002396:	2b03      	cmp	r3, #3
 8002398:	d00d      	beq.n	80023b6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f107 020e 	add.w	r2, r7, #14
 80023a2:	4611      	mov	r1, r2
 80023a4:	4618      	mov	r0, r3
 80023a6:	f000 fbbb 	bl	8002b20 <SDMMC_CmdSetRelAdd>
 80023aa:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <SD_InitCard+0xae>
    {
      return errorstate;
 80023b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023b4:	e070      	b.n	8002498 <SD_InitCard+0x190>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ba:	2b03      	cmp	r3, #3
 80023bc:	d036      	beq.n	800242c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 80023be:	89fb      	ldrh	r3, [r7, #14]
 80023c0:	461a      	mov	r2, r3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023ce:	041b      	lsls	r3, r3, #16
 80023d0:	4619      	mov	r1, r3
 80023d2:	4610      	mov	r0, r2
 80023d4:	f000 fb85 	bl	8002ae2 <SDMMC_CmdSendCSD>
 80023d8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 80023da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d001      	beq.n	80023e4 <SD_InitCard+0xdc>
    {
      return errorstate;
 80023e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023e2:	e059      	b.n	8002498 <SD_InitCard+0x190>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2100      	movs	r1, #0
 80023ea:	4618      	mov	r0, r3
 80023ec:	f000 f9ab 	bl	8002746 <SDIO_GetResponse>
 80023f0:	4602      	mov	r2, r0
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP2);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2104      	movs	r1, #4
 80023fc:	4618      	mov	r0, r3
 80023fe:	f000 f9a2 	bl	8002746 <SDIO_GetResponse>
 8002402:	4602      	mov	r2, r0
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP3);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2108      	movs	r1, #8
 800240e:	4618      	mov	r0, r3
 8002410:	f000 f999 	bl	8002746 <SDIO_GetResponse>
 8002414:	4602      	mov	r2, r0
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDIO_GetResponse(hsd->Instance, SDIO_RESP4);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	210c      	movs	r1, #12
 8002420:	4618      	mov	r0, r3
 8002422:	f000 f990 	bl	8002746 <SDIO_GetResponse>
 8002426:	4602      	mov	r2, r0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDIO_GetResponse(hsd->Instance, SDIO_RESP2) >> 20U);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2104      	movs	r1, #4
 8002432:	4618      	mov	r0, r3
 8002434:	f000 f987 	bl	8002746 <SDIO_GetResponse>
 8002438:	4603      	mov	r3, r0
 800243a:	0d1a      	lsrs	r2, r3, #20
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8002440:	f107 0310 	add.w	r3, r7, #16
 8002444:	4619      	mov	r1, r3
 8002446:	6878      	ldr	r0, [r7, #4]
 8002448:	f7ff fd6e 	bl	8001f28 <HAL_SD_GetCardCSD>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8002452:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002456:	e01f      	b.n	8002498 <SD_InitCard+0x190>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6819      	ldr	r1, [r3, #0]
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	041b      	lsls	r3, r3, #16
 8002462:	461a      	mov	r2, r3
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	4608      	mov	r0, r1
 800246a:	f000 fa77 	bl	800295c <SDMMC_CmdSelDesel>
 800246e:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8002470:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002472:	2b00      	cmp	r3, #0
 8002474:	d001      	beq.n	800247a <SD_InitCard+0x172>
  {
    return errorstate;
 8002476:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002478:	e00e      	b.n	8002498 <SD_InitCard+0x190>
  }

  /* Configure SDIO peripheral interface */
  (void)SDIO_Init(hsd->Instance, hsd->Init);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681d      	ldr	r5, [r3, #0]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	466c      	mov	r4, sp
 8002482:	f103 0210 	add.w	r2, r3, #16
 8002486:	ca07      	ldmia	r2, {r0, r1, r2}
 8002488:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800248c:	3304      	adds	r3, #4
 800248e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002490:	4628      	mov	r0, r5
 8002492:	f000 f8bb 	bl	800260c <SDIO_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8002496:	2300      	movs	r3, #0
}
 8002498:	4618      	mov	r0, r3
 800249a:	3740      	adds	r7, #64	; 0x40
 800249c:	46bd      	mov	sp, r7
 800249e:	bdb0      	pop	{r4, r5, r7, pc}

080024a0 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	b086      	sub	sp, #24
 80024a4:	af00      	add	r7, sp, #0
 80024a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80024a8:	2300      	movs	r3, #0
 80024aa:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 80024ac:	2300      	movs	r3, #0
 80024ae:	617b      	str	r3, [r7, #20]
 80024b0:	2300      	movs	r3, #0
 80024b2:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4618      	mov	r0, r3
 80024ba:	f000 fa72 	bl	80029a2 <SDMMC_CmdGoIdleState>
 80024be:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d001      	beq.n	80024ca <SD_PowerON+0x2a>
  {
    return errorstate;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	e072      	b.n	80025b0 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fa85 	bl	80029de <SDMMC_CmdOperCond>
 80024d4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00d      	beq.n	80024f8 <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	2200      	movs	r2, #0
 80024e0:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4618      	mov	r0, r3
 80024e8:	f000 fa5b 	bl	80029a2 <SDMMC_CmdGoIdleState>
 80024ec:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d004      	beq.n	80024fe <SD_PowerON+0x5e>
    {
      return errorstate;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	e05b      	b.n	80025b0 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2201      	movs	r2, #1
 80024fc:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002502:	2b01      	cmp	r3, #1
 8002504:	d137      	bne.n	8002576 <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	2100      	movs	r1, #0
 800250c:	4618      	mov	r0, r3
 800250e:	f000 fa85 	bl	8002a1c <SDMMC_CmdAppCommand>
 8002512:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d02d      	beq.n	8002576 <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800251a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800251e:	e047      	b.n	80025b0 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2100      	movs	r1, #0
 8002526:	4618      	mov	r0, r3
 8002528:	f000 fa78 	bl	8002a1c <SDMMC_CmdAppCommand>
 800252c:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d001      	beq.n	8002538 <SD_PowerON+0x98>
    {
      return errorstate;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	e03b      	b.n	80025b0 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	491e      	ldr	r1, [pc, #120]	; (80025b8 <SD_PowerON+0x118>)
 800253e:	4618      	mov	r0, r3
 8002540:	f000 fa8e 	bl	8002a60 <SDMMC_CmdAppOperCommand>
 8002544:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d002      	beq.n	8002552 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 800254c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002550:	e02e      	b.n	80025b0 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2100      	movs	r1, #0
 8002558:	4618      	mov	r0, r3
 800255a:	f000 f8f4 	bl	8002746 <SDIO_GetResponse>
 800255e:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	0fdb      	lsrs	r3, r3, #31
 8002564:	2b01      	cmp	r3, #1
 8002566:	d101      	bne.n	800256c <SD_PowerON+0xcc>
 8002568:	2301      	movs	r3, #1
 800256a:	e000      	b.n	800256e <SD_PowerON+0xce>
 800256c:	2300      	movs	r3, #0
 800256e:	613b      	str	r3, [r7, #16]

    count++;
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	3301      	adds	r3, #1
 8002574:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800257c:	4293      	cmp	r3, r2
 800257e:	d802      	bhi.n	8002586 <SD_PowerON+0xe6>
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d0cc      	beq.n	8002520 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8002586:	68bb      	ldr	r3, [r7, #8]
 8002588:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800258c:	4293      	cmp	r3, r2
 800258e:	d902      	bls.n	8002596 <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8002590:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002594:	e00c      	b.n	80025b0 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8002596:	697b      	ldr	r3, [r7, #20]
 8002598:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d003      	beq.n	80025a8 <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2201      	movs	r2, #1
 80025a4:	645a      	str	r2, [r3, #68]	; 0x44
 80025a6:	e002      	b.n	80025ae <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2200      	movs	r2, #0
 80025ac:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 80025ae:	2300      	movs	r3, #0
}
 80025b0:	4618      	mov	r0, r3
 80025b2:	3718      	adds	r7, #24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	c1100000 	.word	0xc1100000

080025bc <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b084      	sub	sp, #16
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d102      	bne.n	80025d2 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 80025cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80025d0:	e018      	b.n	8002604 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681a      	ldr	r2, [r3, #0]
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025da:	041b      	lsls	r3, r3, #16
 80025dc:	4619      	mov	r1, r3
 80025de:	4610      	mov	r0, r2
 80025e0:	f000 fabf 	bl	8002b62 <SDMMC_CmdSendStatus>
 80025e4:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d001      	beq.n	80025f0 <SD_SendStatus+0x34>
  {
    return errorstate;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	e009      	b.n	8002604 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDIO_GetResponse(hsd->Instance, SDIO_RESP1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	2100      	movs	r1, #0
 80025f6:	4618      	mov	r0, r3
 80025f8:	f000 f8a5 	bl	8002746 <SDIO_GetResponse>
 80025fc:	4602      	mov	r2, r0
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8002602:	2300      	movs	r3, #0
}
 8002604:	4618      	mov	r0, r3
 8002606:	3710      	adds	r7, #16
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}

0800260c <SDIO_Init>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_Init(SDIO_TypeDef *SDIOx, SDIO_InitTypeDef Init)
{
 800260c:	b084      	sub	sp, #16
 800260e:	b480      	push	{r7}
 8002610:	b085      	sub	sp, #20
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
 8002616:	f107 001c 	add.w	r0, r7, #28
 800261a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800261e:	2300      	movs	r3, #0
 8002620:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDIO_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDIO_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8002622:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8002624:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8002626:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8002628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800262a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800262c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800262e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8002630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8002632:	431a      	orrs	r2, r3
             Init.ClockDiv
 8002634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8002636:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	4313      	orrs	r3, r2
 800263c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDIOx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f423 43fd 	bic.w	r3, r3, #32384	; 0x7e80
 8002646:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	431a      	orrs	r2, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3714      	adds	r7, #20
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	b004      	add	sp, #16
 8002660:	4770      	bx	lr

08002662 <SDIO_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDIO_ReadFIFO(SDIO_TypeDef *SDIOx)
{
 8002662:	b480      	push	{r7}
 8002664:	b083      	sub	sp, #12
 8002666:	af00      	add	r7, sp, #0
 8002668:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDIOx->FIFO);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8002670:	4618      	mov	r0, r3
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <SDIO_WriteFIFO>:
  * @param  SDIOx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_WriteFIFO(SDIO_TypeDef *SDIOx, uint32_t *pWriteData)
{ 
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDIOx->FIFO = *pWriteData;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8002690:	2300      	movs	r3, #0
}
 8002692:	4618      	mov	r0, r3
 8002694:	370c      	adds	r7, #12
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr

0800269e <SDIO_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_PowerState_ON(SDIO_TypeDef *SDIOx)
{  
 800269e:	b580      	push	{r7, lr}
 80026a0:	b082      	sub	sp, #8
 80026a2:	af00      	add	r7, sp, #0
 80026a4:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDIOx->POWER = SDIO_POWER_PWRCTRL;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	2203      	movs	r2, #3
 80026aa:	601a      	str	r2, [r3, #0]

  /* 1ms: required power up waiting time before starting the SD initialization
  sequence */
  HAL_Delay(2);
 80026ac:	2002      	movs	r0, #2
 80026ae:	f7fe f987 	bl	80009c0 <HAL_Delay>
  
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}

080026bc <SDIO_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDIO_GetPowerState(SDIO_TypeDef *SDIOx)  
{
 80026bc:	b480      	push	{r7}
 80026be:	b083      	sub	sp, #12
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
  return (SDIOx->POWER & SDIO_POWER_PWRCTRL);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0303 	and.w	r3, r3, #3
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	370c      	adds	r7, #12
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr

080026d8 <SDIO_SendCommand>:
  * @param  Command: pointer to a SDIO_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_SendCommand(SDIO_TypeDef *SDIOx, SDIO_CmdInitTypeDef *Command)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_RESPONSE(Command->Response));
  assert_param(IS_SDIO_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDIO_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDIOx->ARG = Command->Argument;
 80026e6:	683b      	ldr	r3, [r7, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80026f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80026fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 8002702:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDIOx->CMD, CMD_CLEAR_MASK, tmpreg); 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8002712:	f023 030f 	bic.w	r3, r3, #15
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	431a      	orrs	r2, r3
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800271e:	2300      	movs	r3, #0
}
 8002720:	4618      	mov	r0, r3
 8002722:	3714      	adds	r7, #20
 8002724:	46bd      	mov	sp, r7
 8002726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272a:	4770      	bx	lr

0800272c <SDIO_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDIOx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDIO_GetCommandResponse(SDIO_TypeDef *SDIOx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDIOx->RESPCMD);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	b2db      	uxtb	r3, r3
}
 800273a:	4618      	mov	r0, r3
 800273c:	370c      	adds	r7, #12
 800273e:	46bd      	mov	sp, r7
 8002740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002744:	4770      	bx	lr

08002746 <SDIO_GetResponse>:
  *            @arg SDIO_RESP3: Response Register 3
  *            @arg SDIO_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDIO_GetResponse(SDIO_TypeDef *SDIOx, uint32_t Response)
{
 8002746:	b480      	push	{r7}
 8002748:	b085      	sub	sp, #20
 800274a:	af00      	add	r7, sp, #0
 800274c:	6078      	str	r0, [r7, #4]
 800274e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDIO_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDIOx->RESP1)) + Response;
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	3314      	adds	r3, #20
 8002754:	461a      	mov	r2, r3
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	4413      	add	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
}  
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr

0800276c <SDIO_ConfigData>:
  * @param  Data : pointer to a SDIO_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDIO_ConfigData(SDIO_TypeDef *SDIOx, SDIO_DataInitTypeDef* Data)
{
 800276c:	b480      	push	{r7}
 800276e:	b085      	sub	sp, #20
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDIO_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDIO_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDIO_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDIOx->DTIMER = Data->DataTimeOut;
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	681a      	ldr	r2, [r3, #0]
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDIOx->DLEN = Data->DataLength;
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	685a      	ldr	r2, [r3, #4]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8002792:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8002798:	431a      	orrs	r2, r3
                       Data->DPSM);
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800279e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 80027a0:	68fa      	ldr	r2, [r7, #12]
 80027a2:	4313      	orrs	r3, r2
 80027a4:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDIOx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027aa:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80027b6:	2300      	movs	r3, #0

}
 80027b8:	4618      	mov	r0, r3
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr

080027c4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDIO_TypeDef *SDIOx, uint32_t BlockSize)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b088      	sub	sp, #32
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80027d2:	2310      	movs	r3, #16
 80027d4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80027d6:	2340      	movs	r3, #64	; 0x40
 80027d8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80027da:	2300      	movs	r3, #0
 80027dc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80027de:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80027e2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80027e4:	f107 0308 	add.w	r3, r7, #8
 80027e8:	4619      	mov	r1, r3
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff74 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SET_BLOCKLEN, SDIO_CMDTIMEOUT);
 80027f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80027f4:	2110      	movs	r1, #16
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f000 fa02 	bl	8002c00 <SDMMC_GetCmdResp1>
 80027fc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80027fe:	69fb      	ldr	r3, [r7, #28]
}
 8002800:	4618      	mov	r0, r3
 8002802:	3720      	adds	r7, #32
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b088      	sub	sp, #32
 800280c:	af00      	add	r7, sp, #0
 800280e:	6078      	str	r0, [r7, #4]
 8002810:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8002816:	2311      	movs	r3, #17
 8002818:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800281a:	2340      	movs	r3, #64	; 0x40
 800281c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800281e:	2300      	movs	r3, #0
 8002820:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002822:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002826:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4619      	mov	r1, r3
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f7ff ff52 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 8002834:	f241 3288 	movw	r2, #5000	; 0x1388
 8002838:	2111      	movs	r1, #17
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f9e0 	bl	8002c00 <SDMMC_GetCmdResp1>
 8002840:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002842:	69fb      	ldr	r3, [r7, #28]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3720      	adds	r7, #32
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDIO_TypeDef *SDIOx, uint32_t ReadAdd)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b088      	sub	sp, #32
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 800285a:	2312      	movs	r3, #18
 800285c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 800285e:	2340      	movs	r3, #64	; 0x40
 8002860:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002862:	2300      	movs	r3, #0
 8002864:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002866:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800286a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800286c:	f107 0308 	add.w	r3, r7, #8
 8002870:	4619      	mov	r1, r3
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f7ff ff30 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_READ_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002878:	f241 3288 	movw	r2, #5000	; 0x1388
 800287c:	2112      	movs	r1, #18
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f000 f9be 	bl	8002c00 <SDMMC_GetCmdResp1>
 8002884:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002886:	69fb      	ldr	r3, [r7, #28]
}
 8002888:	4618      	mov	r0, r3
 800288a:	3720      	adds	r7, #32
 800288c:	46bd      	mov	sp, r7
 800288e:	bd80      	pop	{r7, pc}

08002890 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b088      	sub	sp, #32
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
 8002898:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 800289e:	2318      	movs	r3, #24
 80028a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028a2:	2340      	movs	r3, #64	; 0x40
 80028a4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028a6:	2300      	movs	r3, #0
 80028a8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028aa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028ae:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028b0:	f107 0308 	add.w	r3, r7, #8
 80028b4:	4619      	mov	r1, r3
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f7ff ff0e 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDIO_CMDTIMEOUT);
 80028bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c0:	2118      	movs	r1, #24
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 f99c 	bl	8002c00 <SDMMC_GetCmdResp1>
 80028c8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80028ca:	69fb      	ldr	r3, [r7, #28]
}
 80028cc:	4618      	mov	r0, r3
 80028ce:	3720      	adds	r7, #32
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}

080028d4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDIO_TypeDef *SDIOx, uint32_t WriteAdd)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b088      	sub	sp, #32
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
 80028dc:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 80028e2:	2319      	movs	r3, #25
 80028e4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80028e6:	2340      	movs	r3, #64	; 0x40
 80028e8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80028ea:	2300      	movs	r3, #0
 80028ec:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80028ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80028f2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80028f4:	f107 0308 	add.w	r3, r7, #8
 80028f8:	4619      	mov	r1, r3
 80028fa:	6878      	ldr	r0, [r7, #4]
 80028fc:	f7ff feec 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_WRITE_MULT_BLOCK, SDIO_CMDTIMEOUT);
 8002900:	f241 3288 	movw	r2, #5000	; 0x1388
 8002904:	2119      	movs	r1, #25
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f000 f97a 	bl	8002c00 <SDMMC_GetCmdResp1>
 800290c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800290e:	69fb      	ldr	r3, [r7, #28]
}
 8002910:	4618      	mov	r0, r3
 8002912:	3720      	adds	r7, #32
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDIO_TypeDef *SDIOx)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b088      	sub	sp, #32
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8002924:	230c      	movs	r3, #12
 8002926:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002928:	2340      	movs	r3, #64	; 0x40
 800292a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 800292c:	2300      	movs	r3, #0
 800292e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002930:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002934:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002936:	f107 0308 	add.w	r3, r7, #8
 800293a:	4619      	mov	r1, r3
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	f7ff fecb 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_STOP_TRANSMISSION, SDIO_STOPTRANSFERTIMEOUT);
 8002942:	4a05      	ldr	r2, [pc, #20]	; (8002958 <SDMMC_CmdStopTransfer+0x40>)
 8002944:	210c      	movs	r1, #12
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 f95a 	bl	8002c00 <SDMMC_GetCmdResp1>
 800294c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 800294e:	69fb      	ldr	r3, [r7, #28]
}
 8002950:	4618      	mov	r0, r3
 8002952:	3720      	adds	r7, #32
 8002954:	46bd      	mov	sp, r7
 8002956:	bd80      	pop	{r7, pc}
 8002958:	05f5e100 	.word	0x05f5e100

0800295c <SDMMC_CmdSelDesel>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDIO_TypeDef *SDIOx, uint64_t Addr)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b08a      	sub	sp, #40	; 0x28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	e9c7 2300 	strd	r2, r3, [r7]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 800296c:	2307      	movs	r3, #7
 800296e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002970:	2340      	movs	r3, #64	; 0x40
 8002972:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002974:	2300      	movs	r3, #0
 8002976:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002978:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800297c:	623b      	str	r3, [r7, #32]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 800297e:	f107 0310 	add.w	r3, r7, #16
 8002982:	4619      	mov	r1, r3
 8002984:	68f8      	ldr	r0, [r7, #12]
 8002986:	f7ff fea7 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEL_DESEL_CARD, SDIO_CMDTIMEOUT);
 800298a:	f241 3288 	movw	r2, #5000	; 0x1388
 800298e:	2107      	movs	r1, #7
 8002990:	68f8      	ldr	r0, [r7, #12]
 8002992:	f000 f935 	bl	8002c00 <SDMMC_GetCmdResp1>
 8002996:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8002998:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800299a:	4618      	mov	r0, r3
 800299c:	3728      	adds	r7, #40	; 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}

080029a2 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDIO_TypeDef *SDIOx)
{
 80029a2:	b580      	push	{r7, lr}
 80029a4:	b088      	sub	sp, #32
 80029a6:	af00      	add	r7, sp, #0
 80029a8:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_NO;
 80029b2:	2300      	movs	r3, #0
 80029b4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029b6:	2300      	movs	r3, #0
 80029b8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029be:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029c0:	f107 0308 	add.w	r3, r7, #8
 80029c4:	4619      	mov	r1, r3
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f7ff fe86 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDIOx);
 80029cc:	6878      	ldr	r0, [r7, #4]
 80029ce:	f000 f8eb 	bl	8002ba8 <SDMMC_GetCmdError>
 80029d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80029d4:	69fb      	ldr	r3, [r7, #28]
}
 80029d6:	4618      	mov	r0, r3
 80029d8:	3720      	adds	r7, #32
 80029da:	46bd      	mov	sp, r7
 80029dc:	bd80      	pop	{r7, pc}

080029de <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDIO_TypeDef *SDIOx)
{
 80029de:	b580      	push	{r7, lr}
 80029e0:	b088      	sub	sp, #32
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 80029e6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 80029ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 80029ec:	2308      	movs	r3, #8
 80029ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 80029f0:	2340      	movs	r3, #64	; 0x40
 80029f2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 80029f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029fc:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 80029fe:	f107 0308 	add.w	r3, r7, #8
 8002a02:	4619      	mov	r1, r3
 8002a04:	6878      	ldr	r0, [r7, #4]
 8002a06:	f7ff fe67 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDIOx);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 fae2 	bl	8002fd4 <SDMMC_GetCmdResp7>
 8002a10:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a12:	69fb      	ldr	r3, [r7, #28]
}
 8002a14:	4618      	mov	r0, r3
 8002a16:	3720      	adds	r7, #32
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	bd80      	pop	{r7, pc}

08002a1c <SDMMC_CmdAppCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	b088      	sub	sp, #32
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
 8002a24:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8002a26:	683b      	ldr	r3, [r7, #0]
 8002a28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8002a2a:	2337      	movs	r3, #55	; 0x37
 8002a2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a2e:	2340      	movs	r3, #64	; 0x40
 8002a30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a32:	2300      	movs	r3, #0
 8002a34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a3a:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a3c:	f107 0308 	add.w	r3, r7, #8
 8002a40:	4619      	mov	r1, r3
 8002a42:	6878      	ldr	r0, [r7, #4]
 8002a44:	f7ff fe48 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_APP_CMD, SDIO_CMDTIMEOUT);
 8002a48:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a4c:	2137      	movs	r1, #55	; 0x37
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f000 f8d6 	bl	8002c00 <SDMMC_GetCmdResp1>
 8002a54:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a56:	69fb      	ldr	r3, [r7, #28]
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	3720      	adds	r7, #32
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	bd80      	pop	{r7, pc}

08002a60 <SDMMC_CmdAppOperCommand>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b088      	sub	sp, #32
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8002a76:	2329      	movs	r3, #41	; 0x29
 8002a78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002a7a:	2340      	movs	r3, #64	; 0x40
 8002a7c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002a82:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002a86:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002a88:	f107 0308 	add.w	r3, r7, #8
 8002a8c:	4619      	mov	r1, r3
 8002a8e:	6878      	ldr	r0, [r7, #4]
 8002a90:	f7ff fe22 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDIOx);
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	f000 f9e9 	bl	8002e6c <SDMMC_GetCmdResp3>
 8002a9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002a9c:	69fb      	ldr	r3, [r7, #28]
}
 8002a9e:	4618      	mov	r0, r3
 8002aa0:	3720      	adds	r7, #32
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}

08002aa6 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDIOx: Pointer to SDIO register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDIO_TypeDef *SDIOx)
{
 8002aa6:	b580      	push	{r7, lr}
 8002aa8:	b088      	sub	sp, #32
 8002aaa:	af00      	add	r7, sp, #0
 8002aac:	6078      	str	r0, [r7, #4]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8002ab2:	2302      	movs	r3, #2
 8002ab4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002ab6:	23c0      	movs	r3, #192	; 0xc0
 8002ab8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002aba:	2300      	movs	r3, #0
 8002abc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002abe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ac2:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002ac4:	f107 0308 	add.w	r3, r7, #8
 8002ac8:	4619      	mov	r1, r3
 8002aca:	6878      	ldr	r0, [r7, #4]
 8002acc:	f7ff fe04 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f000 f983 	bl	8002ddc <SDMMC_GetCmdResp2>
 8002ad6:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002ad8:	69fb      	ldr	r3, [r7, #28]
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3720      	adds	r7, #32
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <SDMMC_CmdSendCSD>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b088      	sub	sp, #32
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
 8002aea:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8002af0:	2309      	movs	r3, #9
 8002af2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_LONG;
 8002af4:	23c0      	movs	r3, #192	; 0xc0
 8002af6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002af8:	2300      	movs	r3, #0
 8002afa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002afc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b00:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b02:	f107 0308 	add.w	r3, r7, #8
 8002b06:	4619      	mov	r1, r3
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f7ff fde5 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDIOx);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f964 	bl	8002ddc <SDMMC_GetCmdResp2>
 8002b14:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b16:	69fb      	ldr	r3, [r7, #28]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3720      	adds	r7, #32
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <SDMMC_CmdSetRelAdd>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDIO_TypeDef *SDIOx, uint16_t *pRCA)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b088      	sub	sp, #32
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
 8002b28:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8002b2e:	2303      	movs	r3, #3
 8002b30:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b32:	2340      	movs	r3, #64	; 0x40
 8002b34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b36:	2300      	movs	r3, #0
 8002b38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b3a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b3e:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b40:	f107 0308 	add.w	r3, r7, #8
 8002b44:	4619      	mov	r1, r3
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7ff fdc6 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDIOx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8002b4c:	683a      	ldr	r2, [r7, #0]
 8002b4e:	2103      	movs	r1, #3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 f9c9 	bl	8002ee8 <SDMMC_GetCmdResp6>
 8002b56:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b58:	69fb      	ldr	r3, [r7, #28]
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	3720      	adds	r7, #32
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd80      	pop	{r7, pc}

08002b62 <SDMMC_CmdSendStatus>:
  * @param  SDIOx: Pointer to SDIO register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDIO_TypeDef *SDIOx, uint32_t Argument)
{
 8002b62:	b580      	push	{r7, lr}
 8002b64:	b088      	sub	sp, #32
 8002b66:	af00      	add	r7, sp, #0
 8002b68:	6078      	str	r0, [r7, #4]
 8002b6a:	6039      	str	r1, [r7, #0]
  SDIO_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8002b70:	230d      	movs	r3, #13
 8002b72:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDIO_RESPONSE_SHORT;
 8002b74:	2340      	movs	r3, #64	; 0x40
 8002b76:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDIO_WAIT_NO;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDIO_CPSM_ENABLE;
 8002b7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b80:	61bb      	str	r3, [r7, #24]
  (void)SDIO_SendCommand(SDIOx, &sdmmc_cmdinit);
 8002b82:	f107 0308 	add.w	r3, r7, #8
 8002b86:	4619      	mov	r1, r3
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f7ff fda5 	bl	80026d8 <SDIO_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDIOx, SDMMC_CMD_SEND_STATUS, SDIO_CMDTIMEOUT);
 8002b8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b92:	210d      	movs	r1, #13
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f833 	bl	8002c00 <SDMMC_GetCmdResp1>
 8002b9a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8002b9c:	69fb      	ldr	r3, [r7, #28]
}
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	3720      	adds	r7, #32
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}
	...

08002ba8 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDIO_TypeDef *SDIOx)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b085      	sub	sp, #20
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002bb0:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <SDMMC_GetCmdError+0x50>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a11      	ldr	r2, [pc, #68]	; (8002bfc <SDMMC_GetCmdError+0x54>)
 8002bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8002bba:	0a5b      	lsrs	r3, r3, #9
 8002bbc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bc0:	fb02 f303 	mul.w	r3, r2, r3
 8002bc4:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	1e5a      	subs	r2, r3, #1
 8002bca:	60fa      	str	r2, [r7, #12]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d102      	bne.n	8002bd6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002bd0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002bd4:	e009      	b.n	8002bea <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDSENT));
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d0f1      	beq.n	8002bc6 <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	22c5      	movs	r2, #197	; 0xc5
 8002be6:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 8002be8:	2300      	movs	r3, #0
}
 8002bea:	4618      	mov	r0, r3
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	20000000 	.word	0x20000000
 8002bfc:	10624dd3 	.word	0x10624dd3

08002c00 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp1(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint32_t Timeout)
{
 8002c00:	b580      	push	{r7, lr}
 8002c02:	b088      	sub	sp, #32
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	60f8      	str	r0, [r7, #12]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	607a      	str	r2, [r7, #4]
 8002c0c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8002c0e:	4b70      	ldr	r3, [pc, #448]	; (8002dd0 <SDMMC_GetCmdResp1+0x1d0>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a70      	ldr	r2, [pc, #448]	; (8002dd4 <SDMMC_GetCmdResp1+0x1d4>)
 8002c14:	fba2 2303 	umull	r2, r3, r2, r3
 8002c18:	0a5a      	lsrs	r2, r3, #9
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	fb02 f303 	mul.w	r3, r2, r3
 8002c20:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	1e5a      	subs	r2, r3, #1
 8002c26:	61fa      	str	r2, [r7, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d102      	bne.n	8002c32 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002c2c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002c30:	e0c9      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDIOx->STA;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c36:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d0ef      	beq.n	8002c22 <SDMMC_GetCmdResp1+0x22>
 8002c42:	69bb      	ldr	r3, [r7, #24]
 8002c44:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d1ea      	bne.n	8002c22 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c50:	f003 0304 	and.w	r3, r3, #4
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d004      	beq.n	8002c62 <SDMMC_GetCmdResp1+0x62>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2204      	movs	r2, #4
 8002c5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002c5e:	2304      	movs	r3, #4
 8002c60:	e0b1      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c66:	f003 0301 	and.w	r3, r3, #1
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d004      	beq.n	8002c78 <SDMMC_GetCmdResp1+0x78>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	2201      	movs	r2, #1
 8002c72:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0a6      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	22c5      	movs	r2, #197	; 0xc5
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002c7e:	68f8      	ldr	r0, [r7, #12]
 8002c80:	f7ff fd54 	bl	800272c <SDIO_GetCommandResponse>
 8002c84:	4603      	mov	r3, r0
 8002c86:	461a      	mov	r2, r3
 8002c88:	7afb      	ldrb	r3, [r7, #11]
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d001      	beq.n	8002c92 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e099      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002c92:	2100      	movs	r1, #0
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f7ff fd56 	bl	8002746 <SDIO_GetResponse>
 8002c9a:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8002c9c:	697a      	ldr	r2, [r7, #20]
 8002c9e:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <SDMMC_GetCmdResp1+0x1d8>)
 8002ca0:	4013      	ands	r3, r2
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d101      	bne.n	8002caa <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	e08d      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	da02      	bge.n	8002cb6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8002cb0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002cb4:	e087      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8002cb6:	697b      	ldr	r3, [r7, #20]
 8002cb8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d001      	beq.n	8002cc4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8002cc0:	2340      	movs	r3, #64	; 0x40
 8002cc2:	e080      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8002cc4:	697b      	ldr	r3, [r7, #20]
 8002cc6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d001      	beq.n	8002cd2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8002cce:	2380      	movs	r3, #128	; 0x80
 8002cd0:	e079      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d002      	beq.n	8002ce2 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8002cdc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002ce0:	e071      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d002      	beq.n	8002cf2 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8002cec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002cf0:	e069      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d002      	beq.n	8002d02 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8002cfc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002d00:	e061      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d002      	beq.n	8002d12 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8002d0c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d10:	e059      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d002      	beq.n	8002d22 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002d1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d20:	e051      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d002      	beq.n	8002d32 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002d2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d30:	e049      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d002      	beq.n	8002d42 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8002d3c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002d40:	e041      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d002      	beq.n	8002d52 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8002d4c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d50:	e039      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8002d52:	697b      	ldr	r3, [r7, #20]
 8002d54:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d002      	beq.n	8002d62 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8002d5c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002d60:	e031      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d002      	beq.n	8002d72 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8002d6c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002d70:	e029      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d002      	beq.n	8002d82 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8002d7c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8002d80:	e021      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8002d82:	697b      	ldr	r3, [r7, #20]
 8002d84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d002      	beq.n	8002d92 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8002d8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002d90:	e019      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8002d92:	697b      	ldr	r3, [r7, #20]
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d002      	beq.n	8002da2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8002d9c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002da0:	e011      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d002      	beq.n	8002db2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8002dac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002db0:	e009      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f003 0308 	and.w	r3, r3, #8
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d002      	beq.n	8002dc2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8002dbc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002dc0:	e001      	b.n	8002dc6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3720      	adds	r7, #32
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	20000000 	.word	0x20000000
 8002dd4:	10624dd3 	.word	0x10624dd3
 8002dd8:	fdffe008 	.word	0xfdffe008

08002ddc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp2(SDIO_TypeDef *SDIOx)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b085      	sub	sp, #20
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002de4:	4b1f      	ldr	r3, [pc, #124]	; (8002e64 <SDMMC_GetCmdResp2+0x88>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a1f      	ldr	r2, [pc, #124]	; (8002e68 <SDMMC_GetCmdResp2+0x8c>)
 8002dea:	fba2 2303 	umull	r2, r3, r2, r3
 8002dee:	0a5b      	lsrs	r3, r3, #9
 8002df0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002df4:	fb02 f303 	mul.w	r3, r2, r3
 8002df8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	1e5a      	subs	r2, r3, #1
 8002dfe:	60fa      	str	r2, [r7, #12]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d102      	bne.n	8002e0a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002e04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e08:	e026      	b.n	8002e58 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDIOx->STA;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e0e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d0ef      	beq.n	8002dfa <SDMMC_GetCmdResp2+0x1e>
 8002e1a:	68bb      	ldr	r3, [r7, #8]
 8002e1c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d1ea      	bne.n	8002dfa <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	f003 0304 	and.w	r3, r3, #4
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d004      	beq.n	8002e3a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2204      	movs	r2, #4
 8002e34:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002e36:	2304      	movs	r3, #4
 8002e38:	e00e      	b.n	8002e58 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d004      	beq.n	8002e50 <SDMMC_GetCmdResp2+0x74>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e003      	b.n	8002e58 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	22c5      	movs	r2, #197	; 0xc5
 8002e54:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8002e56:	2300      	movs	r3, #0
}
 8002e58:	4618      	mov	r0, r3
 8002e5a:	3714      	adds	r7, #20
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	20000000 	.word	0x20000000
 8002e68:	10624dd3 	.word	0x10624dd3

08002e6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp3(SDIO_TypeDef *SDIOx)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b085      	sub	sp, #20
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002e74:	4b1a      	ldr	r3, [pc, #104]	; (8002ee0 <SDMMC_GetCmdResp3+0x74>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a1a      	ldr	r2, [pc, #104]	; (8002ee4 <SDMMC_GetCmdResp3+0x78>)
 8002e7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7e:	0a5b      	lsrs	r3, r3, #9
 8002e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e84:	fb02 f303 	mul.w	r3, r2, r3
 8002e88:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	1e5a      	subs	r2, r3, #1
 8002e8e:	60fa      	str	r2, [r7, #12]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002e94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002e98:	e01b      	b.n	8002ed2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDIOx->STA;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e9e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002ea0:	68bb      	ldr	r3, [r7, #8]
 8002ea2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0ef      	beq.n	8002e8a <SDMMC_GetCmdResp3+0x1e>
 8002eaa:	68bb      	ldr	r3, [r7, #8]
 8002eac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d1ea      	bne.n	8002e8a <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eb8:	f003 0304 	and.w	r3, r3, #4
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2204      	movs	r2, #4
 8002ec4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002ec6:	2304      	movs	r3, #4
 8002ec8:	e003      	b.n	8002ed2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	22c5      	movs	r2, #197	; 0xc5
 8002ece:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3714      	adds	r7, #20
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	10624dd3 	.word	0x10624dd3

08002ee8 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp6(SDIO_TypeDef *SDIOx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b088      	sub	sp, #32
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002ef6:	4b35      	ldr	r3, [pc, #212]	; (8002fcc <SDMMC_GetCmdResp6+0xe4>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a35      	ldr	r2, [pc, #212]	; (8002fd0 <SDMMC_GetCmdResp6+0xe8>)
 8002efc:	fba2 2303 	umull	r2, r3, r2, r3
 8002f00:	0a5b      	lsrs	r3, r3, #9
 8002f02:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f06:	fb02 f303 	mul.w	r3, r2, r3
 8002f0a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	1e5a      	subs	r2, r3, #1
 8002f10:	61fa      	str	r2, [r7, #28]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d102      	bne.n	8002f1c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002f16:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002f1a:	e052      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDIOx->STA;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f20:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d0ef      	beq.n	8002f0c <SDMMC_GetCmdResp6+0x24>
 8002f2c:	69bb      	ldr	r3, [r7, #24]
 8002f2e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1ea      	bne.n	8002f0c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	f003 0304 	and.w	r3, r3, #4
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d004      	beq.n	8002f4c <SDMMC_GetCmdResp6+0x64>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2204      	movs	r2, #4
 8002f46:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8002f48:	2304      	movs	r3, #4
 8002f4a:	e03a      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f50:	f003 0301 	and.w	r3, r3, #1
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d004      	beq.n	8002f62 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	e02f      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDIO_GetCommandResponse(SDIOx) != SD_CMD)
 8002f62:	68f8      	ldr	r0, [r7, #12]
 8002f64:	f7ff fbe2 	bl	800272c <SDIO_GetCommandResponse>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	461a      	mov	r2, r3
 8002f6c:	7afb      	ldrb	r3, [r7, #11]
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	d001      	beq.n	8002f76 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e025      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDIO_CLEAR_FLAG(SDIOx, SDIO_STATIC_CMD_FLAGS);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	22c5      	movs	r2, #197	; 0xc5
 8002f7a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDIO_GetResponse(SDIOx, SDIO_RESP1);
 8002f7c:	2100      	movs	r1, #0
 8002f7e:	68f8      	ldr	r0, [r7, #12]
 8002f80:	f7ff fbe1 	bl	8002746 <SDIO_GetResponse>
 8002f84:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d106      	bne.n	8002f9e <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	0c1b      	lsrs	r3, r3, #16
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	e011      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d002      	beq.n	8002fae <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8002fa8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fac:	e009      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8002fb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fbc:	e001      	b.n	8002fc2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8002fbe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	3720      	adds	r7, #32
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	20000000 	.word	0x20000000
 8002fd0:	10624dd3 	.word	0x10624dd3

08002fd4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdResp7(SDIO_TypeDef *SDIOx)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b085      	sub	sp, #20
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDIO_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDIO_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8002fdc:	4b22      	ldr	r3, [pc, #136]	; (8003068 <SDMMC_GetCmdResp7+0x94>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	4a22      	ldr	r2, [pc, #136]	; (800306c <SDMMC_GetCmdResp7+0x98>)
 8002fe2:	fba2 2303 	umull	r2, r3, r2, r3
 8002fe6:	0a5b      	lsrs	r3, r3, #9
 8002fe8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fec:	fb02 f303 	mul.w	r3, r2, r3
 8002ff0:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	1e5a      	subs	r2, r3, #1
 8002ff6:	60fa      	str	r2, [r7, #12]
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d102      	bne.n	8003002 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8002ffc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003000:	e02c      	b.n	800305c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDIOx->STA;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003006:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDIO_FLAG_CMDACT) != 0U ));
 800300e:	2b00      	cmp	r3, #0
 8003010:	d0ef      	beq.n	8002ff2 <SDMMC_GetCmdResp7+0x1e>
 8003012:	68bb      	ldr	r3, [r7, #8]
 8003014:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDIO_FLAG_CCRCFAIL | SDIO_FLAG_CMDREND | SDIO_FLAG_CTIMEOUT)) == 0U) ||
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1ea      	bne.n	8002ff2 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT))
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003020:	f003 0304 	and.w	r3, r3, #4
 8003024:	2b00      	cmp	r3, #0
 8003026:	d004      	beq.n	8003032 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CTIMEOUT);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2204      	movs	r2, #4
 800302c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800302e:	2304      	movs	r3, #4
 8003030:	e014      	b.n	800305c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL))
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003036:	f003 0301 	and.w	r3, r3, #1
 800303a:	2b00      	cmp	r3, #0
 800303c:	d004      	beq.n	8003048 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CCRCFAIL);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8003044:	2301      	movs	r3, #1
 8003046:	e009      	b.n	800305c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDIO_GET_FLAG(SDIOx, SDIO_FLAG_CMDREND))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	d002      	beq.n	800305a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDIO_CLEAR_FLAG(SDIOx, SDIO_FLAG_CMDREND);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2240      	movs	r2, #64	; 0x40
 8003058:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800305a:	2300      	movs	r3, #0
  
}
 800305c:	4618      	mov	r0, r3
 800305e:	3714      	adds	r7, #20
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr
 8003068:	20000000 	.word	0x20000000
 800306c:	10624dd3 	.word	0x10624dd3

08003070 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 8003074:	4904      	ldr	r1, [pc, #16]	; (8003088 <MX_FATFS_Init+0x18>)
 8003076:	4805      	ldr	r0, [pc, #20]	; (800308c <MX_FATFS_Init+0x1c>)
 8003078:	f002 fb24 	bl	80056c4 <FATFS_LinkDriver>
 800307c:	4603      	mov	r3, r0
 800307e:	461a      	mov	r2, r3
 8003080:	4b03      	ldr	r3, [pc, #12]	; (8003090 <MX_FATFS_Init+0x20>)
 8003082:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8003084:	bf00      	nop
 8003086:	bd80      	pop	{r7, pc}
 8003088:	200000e8 	.word	0x200000e8
 800308c:	080057c8 	.word	0x080057c8
 8003090:	200000e4 	.word	0x200000e4

08003094 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 8003094:	b480      	push	{r7}
 8003096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8003098:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800309a:	4618      	mov	r0, r3
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 80030ae:	f000 f86b 	bl	8003188 <BSP_SD_IsDetected>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d001      	beq.n	80030bc <BSP_SD_Init+0x18>
  {
    return MSD_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e005      	b.n	80030c8 <BSP_SD_Init+0x24>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd);
 80030bc:	4804      	ldr	r0, [pc, #16]	; (80030d0 <BSP_SD_Init+0x2c>)
 80030be:	f7fe fb21 	bl	8001704 <HAL_SD_Init>
 80030c2:	4603      	mov	r3, r0
 80030c4:	71fb      	strb	r3, [r7, #7]

  return sd_state;
 80030c6:	79fb      	ldrb	r3, [r7, #7]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	2000005c 	.word	0x2000005c

080030d4 <BSP_SD_ReadBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to read
  * @param  Timeout: Timeout for read operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b088      	sub	sp, #32
 80030d8:	af02      	add	r7, sp, #8
 80030da:	60f8      	str	r0, [r7, #12]
 80030dc:	60b9      	str	r1, [r7, #8]
 80030de:	607a      	str	r2, [r7, #4]
 80030e0:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_ReadBlocks(&hsd, (uint8_t *)pData, ReadAddr, NumOfBlocks, Timeout) != HAL_OK)
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	9300      	str	r3, [sp, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	68f9      	ldr	r1, [r7, #12]
 80030f0:	4806      	ldr	r0, [pc, #24]	; (800310c <BSP_SD_ReadBlocks+0x38>)
 80030f2:	f7fe fbb5 	bl	8001860 <HAL_SD_ReadBlocks>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d001      	beq.n	8003100 <BSP_SD_ReadBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 8003100:	7dfb      	ldrb	r3, [r7, #23]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	2000005c 	.word	0x2000005c

08003110 <BSP_SD_WriteBlocks>:
  * @param  NumOfBlocks: Number of SD blocks to write
  * @param  Timeout: Timeout for write operation
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks, uint32_t Timeout)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b088      	sub	sp, #32
 8003114:	af02      	add	r7, sp, #8
 8003116:	60f8      	str	r0, [r7, #12]
 8003118:	60b9      	str	r1, [r7, #8]
 800311a:	607a      	str	r2, [r7, #4]
 800311c:	603b      	str	r3, [r7, #0]
  uint8_t sd_state = MSD_OK;
 800311e:	2300      	movs	r3, #0
 8003120:	75fb      	strb	r3, [r7, #23]

  if (HAL_SD_WriteBlocks(&hsd, (uint8_t *)pData, WriteAddr, NumOfBlocks, Timeout) != HAL_OK)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	9300      	str	r3, [sp, #0]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	68ba      	ldr	r2, [r7, #8]
 800312a:	68f9      	ldr	r1, [r7, #12]
 800312c:	4806      	ldr	r0, [pc, #24]	; (8003148 <BSP_SD_WriteBlocks+0x38>)
 800312e:	f7fe fd75 	bl	8001c1c <HAL_SD_WriteBlocks>
 8003132:	4603      	mov	r3, r0
 8003134:	2b00      	cmp	r3, #0
 8003136:	d001      	beq.n	800313c <BSP_SD_WriteBlocks+0x2c>
  {
    sd_state = MSD_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800313c:	7dfb      	ldrb	r3, [r7, #23]
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	2000005c 	.word	0x2000005c

0800314c <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <BSP_SD_GetCardState+0x1c>)
 8003152:	f7ff f8b9 	bl	80022c8 <HAL_SD_GetCardState>
 8003156:	4603      	mov	r3, r0
 8003158:	2b04      	cmp	r3, #4
 800315a:	bf14      	ite	ne
 800315c:	2301      	movne	r3, #1
 800315e:	2300      	moveq	r3, #0
 8003160:	b2db      	uxtb	r3, r3
}
 8003162:	4618      	mov	r0, r3
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	2000005c 	.word	0x2000005c

0800316c <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b082      	sub	sp, #8
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd, CardInfo);
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4803      	ldr	r0, [pc, #12]	; (8003184 <BSP_SD_GetCardInfo+0x18>)
 8003178:	f7ff f87a 	bl	8002270 <HAL_SD_GetCardInfo>
}
 800317c:	bf00      	nop
 800317e:	3708      	adds	r7, #8
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}
 8003184:	2000005c 	.word	0x2000005c

08003188 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b083      	sub	sp, #12
 800318c:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800318e:	2301      	movs	r3, #1
 8003190:	71fb      	strb	r3, [r7, #7]

  /* USER CODE BEGIN 1 */
  /* user code can be inserted here */
  /* USER CODE END 1 */

  return status;
 8003192:	79fb      	ldrb	r3, [r7, #7]
 8003194:	b2db      	uxtb	r3, r3
}
 8003196:	4618      	mov	r0, r3
 8003198:	370c      	adds	r7, #12
 800319a:	46bd      	mov	sp, r7
 800319c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a0:	4770      	bx	lr
	...

080031a4 <SD_CheckStatus>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	4603      	mov	r3, r0
 80031ac:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80031ae:	4b0b      	ldr	r3, [pc, #44]	; (80031dc <SD_CheckStatus+0x38>)
 80031b0:	2201      	movs	r2, #1
 80031b2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80031b4:	f7ff ffca 	bl	800314c <BSP_SD_GetCardState>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d107      	bne.n	80031ce <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80031be:	4b07      	ldr	r3, [pc, #28]	; (80031dc <SD_CheckStatus+0x38>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	b2da      	uxtb	r2, r3
 80031ca:	4b04      	ldr	r3, [pc, #16]	; (80031dc <SD_CheckStatus+0x38>)
 80031cc:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 80031ce:	4b03      	ldr	r3, [pc, #12]	; (80031dc <SD_CheckStatus+0x38>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	b2db      	uxtb	r3, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}
 80031dc:	20000009 	.word	0x20000009

080031e0 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b082      	sub	sp, #8
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	4603      	mov	r3, r0
 80031e8:	71fb      	strb	r3, [r7, #7]
Stat = STA_NOINIT;
 80031ea:	4b0b      	ldr	r3, [pc, #44]	; (8003218 <SD_initialize+0x38>)
 80031ec:	2201      	movs	r2, #1
 80031ee:	701a      	strb	r2, [r3, #0]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 80031f0:	f7ff ff58 	bl	80030a4 <BSP_SD_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d107      	bne.n	800320a <SD_initialize+0x2a>
  {
    Stat = SD_CheckStatus(lun);
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ffd1 	bl	80031a4 <SD_CheckStatus>
 8003202:	4603      	mov	r3, r0
 8003204:	461a      	mov	r2, r3
 8003206:	4b04      	ldr	r3, [pc, #16]	; (8003218 <SD_initialize+0x38>)
 8003208:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 800320a:	4b03      	ldr	r3, [pc, #12]	; (8003218 <SD_initialize+0x38>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	b2db      	uxtb	r3, r3
}
 8003210:	4618      	mov	r0, r3
 8003212:	3708      	adds	r7, #8
 8003214:	46bd      	mov	sp, r7
 8003216:	bd80      	pop	{r7, pc}
 8003218:	20000009 	.word	0x20000009

0800321c <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b082      	sub	sp, #8
 8003220:	af00      	add	r7, sp, #0
 8003222:	4603      	mov	r3, r0
 8003224:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ffbb 	bl	80031a4 <SD_CheckStatus>
 800322e:	4603      	mov	r3, r0
}
 8003230:	4618      	mov	r0, r3
 8003232:	3708      	adds	r7, #8
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60b9      	str	r1, [r7, #8]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	4603      	mov	r3, r0
 8003246:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_ReadBlocks((uint32_t*)buff,
 800324c:	f04f 33ff 	mov.w	r3, #4294967295
 8003250:	683a      	ldr	r2, [r7, #0]
 8003252:	6879      	ldr	r1, [r7, #4]
 8003254:	68b8      	ldr	r0, [r7, #8]
 8003256:	f7ff ff3d 	bl	80030d4 <BSP_SD_ReadBlocks>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d107      	bne.n	8003270 <SD_read+0x38>
                       (uint32_t) (sector),
                       count, SD_TIMEOUT) == MSD_OK)
  {
    /* wait until the read operation is finished */
    while(BSP_SD_GetCardState()!= MSD_OK)
 8003260:	bf00      	nop
 8003262:	f7ff ff73 	bl	800314c <BSP_SD_GetCardState>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d1fa      	bne.n	8003262 <SD_read+0x2a>
    {
    }
    res = RES_OK;
 800326c:	2300      	movs	r3, #0
 800326e:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 8003270:	7dfb      	ldrb	r3, [r7, #23]
}
 8003272:	4618      	mov	r0, r3
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	60b9      	str	r1, [r7, #8]
 8003282:	607a      	str	r2, [r7, #4]
 8003284:	603b      	str	r3, [r7, #0]
 8003286:	4603      	mov	r3, r0
 8003288:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	75fb      	strb	r3, [r7, #23]

  if(BSP_SD_WriteBlocks((uint32_t*)buff,
 800328e:	f04f 33ff 	mov.w	r3, #4294967295
 8003292:	683a      	ldr	r2, [r7, #0]
 8003294:	6879      	ldr	r1, [r7, #4]
 8003296:	68b8      	ldr	r0, [r7, #8]
 8003298:	f7ff ff3a 	bl	8003110 <BSP_SD_WriteBlocks>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d107      	bne.n	80032b2 <SD_write+0x38>
                        (uint32_t)(sector),
                        count, SD_TIMEOUT) == MSD_OK)
  {
	/* wait until the Write operation is finished */
    while(BSP_SD_GetCardState() != MSD_OK)
 80032a2:	bf00      	nop
 80032a4:	f7ff ff52 	bl	800314c <BSP_SD_GetCardState>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1fa      	bne.n	80032a4 <SD_write+0x2a>
    {
    }
    res = RES_OK;
 80032ae:	2300      	movs	r3, #0
 80032b0:	75fb      	strb	r3, [r7, #23]
  }

  return res;
 80032b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032b4:	4618      	mov	r0, r3
 80032b6:	3718      	adds	r7, #24
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bd80      	pop	{r7, pc}

080032bc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b08c      	sub	sp, #48	; 0x30
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	603a      	str	r2, [r7, #0]
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	460b      	mov	r3, r1
 80032ca:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80032d2:	4b25      	ldr	r3, [pc, #148]	; (8003368 <SD_ioctl+0xac>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d001      	beq.n	80032e4 <SD_ioctl+0x28>
 80032e0:	2303      	movs	r3, #3
 80032e2:	e03c      	b.n	800335e <SD_ioctl+0xa2>

  switch (cmd)
 80032e4:	79bb      	ldrb	r3, [r7, #6]
 80032e6:	2b03      	cmp	r3, #3
 80032e8:	d834      	bhi.n	8003354 <SD_ioctl+0x98>
 80032ea:	a201      	add	r2, pc, #4	; (adr r2, 80032f0 <SD_ioctl+0x34>)
 80032ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032f0:	08003301 	.word	0x08003301
 80032f4:	08003309 	.word	0x08003309
 80032f8:	08003321 	.word	0x08003321
 80032fc:	0800333b 	.word	0x0800333b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8003300:	2300      	movs	r3, #0
 8003302:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003306:	e028      	b.n	800335a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8003308:	f107 030c 	add.w	r3, r7, #12
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff ff2d 	bl	800316c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8003312:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8003318:	2300      	movs	r3, #0
 800331a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800331e:	e01c      	b.n	800335a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8003320:	f107 030c 	add.w	r3, r7, #12
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff ff21 	bl	800316c <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800332a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800332c:	b29a      	uxth	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8003332:	2300      	movs	r3, #0
 8003334:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003338:	e00f      	b.n	800335a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	4618      	mov	r0, r3
 8003340:	f7ff ff14 	bl	800316c <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8003344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003346:	0a5a      	lsrs	r2, r3, #9
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800334c:	2300      	movs	r3, #0
 800334e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8003352:	e002      	b.n	800335a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8003354:	2304      	movs	r3, #4
 8003356:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800335a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800335e:	4618      	mov	r0, r3
 8003360:	3730      	adds	r7, #48	; 0x30
 8003362:	46bd      	mov	sp, r7
 8003364:	bd80      	pop	{r7, pc}
 8003366:	bf00      	nop
 8003368:	20000009 	.word	0x20000009

0800336c <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800336c:	b580      	push	{r7, lr}
 800336e:	b084      	sub	sp, #16
 8003370:	af00      	add	r7, sp, #0
 8003372:	4603      	mov	r3, r0
 8003374:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	4a08      	ldr	r2, [pc, #32]	; (800339c <disk_status+0x30>)
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4413      	add	r3, r2
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	79fa      	ldrb	r2, [r7, #7]
 8003384:	4905      	ldr	r1, [pc, #20]	; (800339c <disk_status+0x30>)
 8003386:	440a      	add	r2, r1
 8003388:	7a12      	ldrb	r2, [r2, #8]
 800338a:	4610      	mov	r0, r2
 800338c:	4798      	blx	r3
 800338e:	4603      	mov	r3, r0
 8003390:	73fb      	strb	r3, [r7, #15]
  return stat;
 8003392:	7bfb      	ldrb	r3, [r7, #15]
}
 8003394:	4618      	mov	r0, r3
 8003396:	3710      	adds	r7, #16
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	20000050 	.word	0x20000050

080033a0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	4603      	mov	r3, r0
 80033a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80033aa:	2300      	movs	r3, #0
 80033ac:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80033ae:	79fb      	ldrb	r3, [r7, #7]
 80033b0:	4a0d      	ldr	r2, [pc, #52]	; (80033e8 <disk_initialize+0x48>)
 80033b2:	5cd3      	ldrb	r3, [r2, r3]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	4a0b      	ldr	r2, [pc, #44]	; (80033e8 <disk_initialize+0x48>)
 80033bc:	2101      	movs	r1, #1
 80033be:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 80033c0:	79fb      	ldrb	r3, [r7, #7]
 80033c2:	4a09      	ldr	r2, [pc, #36]	; (80033e8 <disk_initialize+0x48>)
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	79fa      	ldrb	r2, [r7, #7]
 80033ce:	4906      	ldr	r1, [pc, #24]	; (80033e8 <disk_initialize+0x48>)
 80033d0:	440a      	add	r2, r1
 80033d2:	7a12      	ldrb	r2, [r2, #8]
 80033d4:	4610      	mov	r0, r2
 80033d6:	4798      	blx	r3
 80033d8:	4603      	mov	r3, r0
 80033da:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80033dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80033de:	4618      	mov	r0, r3
 80033e0:	3710      	adds	r7, #16
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}
 80033e6:	bf00      	nop
 80033e8:	20000050 	.word	0x20000050

080033ec <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80033ec:	b590      	push	{r4, r7, lr}
 80033ee:	b087      	sub	sp, #28
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
 80033f8:	4603      	mov	r3, r0
 80033fa:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80033fc:	7bfb      	ldrb	r3, [r7, #15]
 80033fe:	4a0a      	ldr	r2, [pc, #40]	; (8003428 <disk_read+0x3c>)
 8003400:	009b      	lsls	r3, r3, #2
 8003402:	4413      	add	r3, r2
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	689c      	ldr	r4, [r3, #8]
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	4a07      	ldr	r2, [pc, #28]	; (8003428 <disk_read+0x3c>)
 800340c:	4413      	add	r3, r2
 800340e:	7a18      	ldrb	r0, [r3, #8]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	68b9      	ldr	r1, [r7, #8]
 8003416:	47a0      	blx	r4
 8003418:	4603      	mov	r3, r0
 800341a:	75fb      	strb	r3, [r7, #23]
  return res;
 800341c:	7dfb      	ldrb	r3, [r7, #23]
}
 800341e:	4618      	mov	r0, r3
 8003420:	371c      	adds	r7, #28
 8003422:	46bd      	mov	sp, r7
 8003424:	bd90      	pop	{r4, r7, pc}
 8003426:	bf00      	nop
 8003428:	20000050 	.word	0x20000050

0800342c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800342c:	b590      	push	{r4, r7, lr}
 800342e:	b087      	sub	sp, #28
 8003430:	af00      	add	r7, sp, #0
 8003432:	60b9      	str	r1, [r7, #8]
 8003434:	607a      	str	r2, [r7, #4]
 8003436:	603b      	str	r3, [r7, #0]
 8003438:	4603      	mov	r3, r0
 800343a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	4a0a      	ldr	r2, [pc, #40]	; (8003468 <disk_write+0x3c>)
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	68dc      	ldr	r4, [r3, #12]
 8003448:	7bfb      	ldrb	r3, [r7, #15]
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <disk_write+0x3c>)
 800344c:	4413      	add	r3, r2
 800344e:	7a18      	ldrb	r0, [r3, #8]
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	47a0      	blx	r4
 8003458:	4603      	mov	r3, r0
 800345a:	75fb      	strb	r3, [r7, #23]
  return res;
 800345c:	7dfb      	ldrb	r3, [r7, #23]
}
 800345e:	4618      	mov	r0, r3
 8003460:	371c      	adds	r7, #28
 8003462:	46bd      	mov	sp, r7
 8003464:	bd90      	pop	{r4, r7, pc}
 8003466:	bf00      	nop
 8003468:	20000050 	.word	0x20000050

0800346c <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b084      	sub	sp, #16
 8003470:	af00      	add	r7, sp, #0
 8003472:	4603      	mov	r3, r0
 8003474:	603a      	str	r2, [r7, #0]
 8003476:	71fb      	strb	r3, [r7, #7]
 8003478:	460b      	mov	r3, r1
 800347a:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800347c:	79fb      	ldrb	r3, [r7, #7]
 800347e:	4a09      	ldr	r2, [pc, #36]	; (80034a4 <disk_ioctl+0x38>)
 8003480:	009b      	lsls	r3, r3, #2
 8003482:	4413      	add	r3, r2
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	79fa      	ldrb	r2, [r7, #7]
 800348a:	4906      	ldr	r1, [pc, #24]	; (80034a4 <disk_ioctl+0x38>)
 800348c:	440a      	add	r2, r1
 800348e:	7a10      	ldrb	r0, [r2, #8]
 8003490:	79b9      	ldrb	r1, [r7, #6]
 8003492:	683a      	ldr	r2, [r7, #0]
 8003494:	4798      	blx	r3
 8003496:	4603      	mov	r3, r0
 8003498:	73fb      	strb	r3, [r7, #15]
  return res;
 800349a:	7bfb      	ldrb	r3, [r7, #15]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3710      	adds	r7, #16
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000050 	.word	0x20000050

080034a8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80034a8:	b480      	push	{r7}
 80034aa:	b085      	sub	sp, #20
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	3301      	adds	r3, #1
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80034b8:	89fb      	ldrh	r3, [r7, #14]
 80034ba:	021b      	lsls	r3, r3, #8
 80034bc:	b21a      	sxth	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	781b      	ldrb	r3, [r3, #0]
 80034c2:	b21b      	sxth	r3, r3
 80034c4:	4313      	orrs	r3, r2
 80034c6:	b21b      	sxth	r3, r3
 80034c8:	81fb      	strh	r3, [r7, #14]
	return rv;
 80034ca:	89fb      	ldrh	r3, [r7, #14]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3714      	adds	r7, #20
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	3303      	adds	r3, #3
 80034e4:	781b      	ldrb	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	021b      	lsls	r3, r3, #8
 80034ec:	687a      	ldr	r2, [r7, #4]
 80034ee:	3202      	adds	r2, #2
 80034f0:	7812      	ldrb	r2, [r2, #0]
 80034f2:	4313      	orrs	r3, r2
 80034f4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	021b      	lsls	r3, r3, #8
 80034fa:	687a      	ldr	r2, [r7, #4]
 80034fc:	3201      	adds	r2, #1
 80034fe:	7812      	ldrb	r2, [r2, #0]
 8003500:	4313      	orrs	r3, r2
 8003502:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	021b      	lsls	r3, r3, #8
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	7812      	ldrb	r2, [r2, #0]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]
	return rv;
 8003510:	68fb      	ldr	r3, [r7, #12]
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800351e:	b480      	push	{r7}
 8003520:	b083      	sub	sp, #12
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
 8003526:	460b      	mov	r3, r1
 8003528:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	607a      	str	r2, [r7, #4]
 8003530:	887a      	ldrh	r2, [r7, #2]
 8003532:	b2d2      	uxtb	r2, r2
 8003534:	701a      	strb	r2, [r3, #0]
 8003536:	887b      	ldrh	r3, [r7, #2]
 8003538:	0a1b      	lsrs	r3, r3, #8
 800353a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	1c5a      	adds	r2, r3, #1
 8003540:	607a      	str	r2, [r7, #4]
 8003542:	887a      	ldrh	r2, [r7, #2]
 8003544:	b2d2      	uxtb	r2, r2
 8003546:	701a      	strb	r2, [r3, #0]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	1c5a      	adds	r2, r3, #1
 8003562:	607a      	str	r2, [r7, #4]
 8003564:	683a      	ldr	r2, [r7, #0]
 8003566:	b2d2      	uxtb	r2, r2
 8003568:	701a      	strb	r2, [r3, #0]
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	0a1b      	lsrs	r3, r3, #8
 800356e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	1c5a      	adds	r2, r3, #1
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	683a      	ldr	r2, [r7, #0]
 8003578:	b2d2      	uxtb	r2, r2
 800357a:	701a      	strb	r2, [r3, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	0a1b      	lsrs	r3, r3, #8
 8003580:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	1c5a      	adds	r2, r3, #1
 8003586:	607a      	str	r2, [r7, #4]
 8003588:	683a      	ldr	r2, [r7, #0]
 800358a:	b2d2      	uxtb	r2, r2
 800358c:	701a      	strb	r2, [r3, #0]
 800358e:	683b      	ldr	r3, [r7, #0]
 8003590:	0a1b      	lsrs	r3, r3, #8
 8003592:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	1c5a      	adds	r2, r3, #1
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	b2d2      	uxtb	r2, r2
 800359e:	701a      	strb	r2, [r3, #0]
}
 80035a0:	bf00      	nop
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	613b      	str	r3, [r7, #16]

	if (cnt) {
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d00d      	beq.n	80035e2 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 80035c6:	693a      	ldr	r2, [r7, #16]
 80035c8:	1c53      	adds	r3, r2, #1
 80035ca:	613b      	str	r3, [r7, #16]
 80035cc:	697b      	ldr	r3, [r7, #20]
 80035ce:	1c59      	adds	r1, r3, #1
 80035d0:	6179      	str	r1, [r7, #20]
 80035d2:	7812      	ldrb	r2, [r2, #0]
 80035d4:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	3b01      	subs	r3, #1
 80035da:	607b      	str	r3, [r7, #4]
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d1f1      	bne.n	80035c6 <mem_cpy+0x1a>
	}
}
 80035e2:	bf00      	nop
 80035e4:	371c      	adds	r7, #28
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 80035ee:	b480      	push	{r7}
 80035f0:	b087      	sub	sp, #28
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	60f8      	str	r0, [r7, #12]
 80035f6:	60b9      	str	r1, [r7, #8]
 80035f8:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 80035fe:	697b      	ldr	r3, [r7, #20]
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	617a      	str	r2, [r7, #20]
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	b2d2      	uxtb	r2, r2
 8003608:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3b01      	subs	r3, #1
 800360e:	607b      	str	r3, [r7, #4]
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f3      	bne.n	80035fe <mem_set+0x10>
}
 8003616:	bf00      	nop
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8003624:	b480      	push	{r7}
 8003626:	b089      	sub	sp, #36	; 0x24
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	61fb      	str	r3, [r7, #28]
 8003634:	68bb      	ldr	r3, [r7, #8]
 8003636:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003638:	2300      	movs	r3, #0
 800363a:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	1c5a      	adds	r2, r3, #1
 8003640:	61fa      	str	r2, [r7, #28]
 8003642:	781b      	ldrb	r3, [r3, #0]
 8003644:	4619      	mov	r1, r3
 8003646:	69bb      	ldr	r3, [r7, #24]
 8003648:	1c5a      	adds	r2, r3, #1
 800364a:	61ba      	str	r2, [r7, #24]
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	1acb      	subs	r3, r1, r3
 8003650:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	3b01      	subs	r3, #1
 8003656:	607b      	str	r3, [r7, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d002      	beq.n	8003664 <mem_cmp+0x40>
 800365e:	697b      	ldr	r3, [r7, #20]
 8003660:	2b00      	cmp	r3, #0
 8003662:	d0eb      	beq.n	800363c <mem_cmp+0x18>

	return r;
 8003664:	697b      	ldr	r3, [r7, #20]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3724      	adds	r7, #36	; 0x24
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
 800367a:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800367c:	e002      	b.n	8003684 <chk_chr+0x12>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d005      	beq.n	8003698 <chk_chr+0x26>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	781b      	ldrb	r3, [r3, #0]
 8003690:	461a      	mov	r2, r3
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	4293      	cmp	r3, r2
 8003696:	d1f2      	bne.n	800367e <chk_chr+0xc>
	return *str;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	781b      	ldrb	r3, [r3, #0]
}
 800369c:	4618      	mov	r0, r3
 800369e:	370c      	adds	r7, #12
 80036a0:	46bd      	mov	sp, r7
 80036a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a6:	4770      	bx	lr

080036a8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80036a8:	b480      	push	{r7}
 80036aa:	b085      	sub	sp, #20
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
 80036b0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	e029      	b.n	8003710 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 80036bc:	4a27      	ldr	r2, [pc, #156]	; (800375c <chk_lock+0xb4>)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	011b      	lsls	r3, r3, #4
 80036c2:	4413      	add	r3, r2
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d01d      	beq.n	8003706 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ca:	4a24      	ldr	r2, [pc, #144]	; (800375c <chk_lock+0xb4>)
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	011b      	lsls	r3, r3, #4
 80036d0:	4413      	add	r3, r2
 80036d2:	681a      	ldr	r2, [r3, #0]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d116      	bne.n	800370a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 80036dc:	4a1f      	ldr	r2, [pc, #124]	; (800375c <chk_lock+0xb4>)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	4413      	add	r3, r2
 80036e4:	3304      	adds	r3, #4
 80036e6:	681a      	ldr	r2, [r3, #0]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d10c      	bne.n	800370a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 80036f0:	4a1a      	ldr	r2, [pc, #104]	; (800375c <chk_lock+0xb4>)
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	4413      	add	r3, r2
 80036f8:	3308      	adds	r3, #8
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8003700:	429a      	cmp	r2, r3
 8003702:	d102      	bne.n	800370a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8003704:	e007      	b.n	8003716 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8003706:	2301      	movs	r3, #1
 8003708:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	3301      	adds	r3, #1
 800370e:	60fb      	str	r3, [r7, #12]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d9d2      	bls.n	80036bc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b02      	cmp	r3, #2
 800371a:	d109      	bne.n	8003730 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	2b00      	cmp	r3, #0
 8003720:	d102      	bne.n	8003728 <chk_lock+0x80>
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	2b02      	cmp	r3, #2
 8003726:	d101      	bne.n	800372c <chk_lock+0x84>
 8003728:	2300      	movs	r3, #0
 800372a:	e010      	b.n	800374e <chk_lock+0xa6>
 800372c:	2312      	movs	r3, #18
 800372e:	e00e      	b.n	800374e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d108      	bne.n	8003748 <chk_lock+0xa0>
 8003736:	4a09      	ldr	r2, [pc, #36]	; (800375c <chk_lock+0xb4>)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	011b      	lsls	r3, r3, #4
 800373c:	4413      	add	r3, r2
 800373e:	330c      	adds	r3, #12
 8003740:	881b      	ldrh	r3, [r3, #0]
 8003742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003746:	d101      	bne.n	800374c <chk_lock+0xa4>
 8003748:	2310      	movs	r3, #16
 800374a:	e000      	b.n	800374e <chk_lock+0xa6>
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	20000030 	.word	0x20000030

08003760 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003766:	2300      	movs	r3, #0
 8003768:	607b      	str	r3, [r7, #4]
 800376a:	e002      	b.n	8003772 <enq_lock+0x12>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	3301      	adds	r3, #1
 8003770:	607b      	str	r3, [r7, #4]
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2b01      	cmp	r3, #1
 8003776:	d806      	bhi.n	8003786 <enq_lock+0x26>
 8003778:	4a09      	ldr	r2, [pc, #36]	; (80037a0 <enq_lock+0x40>)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	011b      	lsls	r3, r3, #4
 800377e:	4413      	add	r3, r2
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f2      	bne.n	800376c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b02      	cmp	r3, #2
 800378a:	bf14      	ite	ne
 800378c:	2301      	movne	r3, #1
 800378e:	2300      	moveq	r3, #0
 8003790:	b2db      	uxtb	r3, r3
}
 8003792:	4618      	mov	r0, r3
 8003794:	370c      	adds	r7, #12
 8003796:	46bd      	mov	sp, r7
 8003798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379c:	4770      	bx	lr
 800379e:	bf00      	nop
 80037a0:	20000030 	.word	0x20000030

080037a4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037ae:	2300      	movs	r3, #0
 80037b0:	60fb      	str	r3, [r7, #12]
 80037b2:	e01f      	b.n	80037f4 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 80037b4:	4a41      	ldr	r2, [pc, #260]	; (80038bc <inc_lock+0x118>)
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	011b      	lsls	r3, r3, #4
 80037ba:	4413      	add	r3, r2
 80037bc:	681a      	ldr	r2, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	429a      	cmp	r2, r3
 80037c4:	d113      	bne.n	80037ee <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 80037c6:	4a3d      	ldr	r2, [pc, #244]	; (80038bc <inc_lock+0x118>)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	011b      	lsls	r3, r3, #4
 80037cc:	4413      	add	r3, r2
 80037ce:	3304      	adds	r3, #4
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d109      	bne.n	80037ee <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 80037da:	4a38      	ldr	r2, [pc, #224]	; (80038bc <inc_lock+0x118>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	011b      	lsls	r3, r3, #4
 80037e0:	4413      	add	r3, r2
 80037e2:	3308      	adds	r3, #8
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d006      	beq.n	80037fc <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	3301      	adds	r3, #1
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b01      	cmp	r3, #1
 80037f8:	d9dc      	bls.n	80037b4 <inc_lock+0x10>
 80037fa:	e000      	b.n	80037fe <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 80037fc:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	2b02      	cmp	r3, #2
 8003802:	d132      	bne.n	800386a <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8003804:	2300      	movs	r3, #0
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e002      	b.n	8003810 <inc_lock+0x6c>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	3301      	adds	r3, #1
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2b01      	cmp	r3, #1
 8003814:	d806      	bhi.n	8003824 <inc_lock+0x80>
 8003816:	4a29      	ldr	r2, [pc, #164]	; (80038bc <inc_lock+0x118>)
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	011b      	lsls	r3, r3, #4
 800381c:	4413      	add	r3, r2
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1f2      	bne.n	800380a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2b02      	cmp	r3, #2
 8003828:	d101      	bne.n	800382e <inc_lock+0x8a>
 800382a:	2300      	movs	r3, #0
 800382c:	e040      	b.n	80038b0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681a      	ldr	r2, [r3, #0]
 8003832:	4922      	ldr	r1, [pc, #136]	; (80038bc <inc_lock+0x118>)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	440b      	add	r3, r1
 800383a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	689a      	ldr	r2, [r3, #8]
 8003840:	491e      	ldr	r1, [pc, #120]	; (80038bc <inc_lock+0x118>)
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	440b      	add	r3, r1
 8003848:	3304      	adds	r3, #4
 800384a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	695a      	ldr	r2, [r3, #20]
 8003850:	491a      	ldr	r1, [pc, #104]	; (80038bc <inc_lock+0x118>)
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	011b      	lsls	r3, r3, #4
 8003856:	440b      	add	r3, r1
 8003858:	3308      	adds	r3, #8
 800385a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800385c:	4a17      	ldr	r2, [pc, #92]	; (80038bc <inc_lock+0x118>)
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	4413      	add	r3, r2
 8003864:	330c      	adds	r3, #12
 8003866:	2200      	movs	r2, #0
 8003868:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d009      	beq.n	8003884 <inc_lock+0xe0>
 8003870:	4a12      	ldr	r2, [pc, #72]	; (80038bc <inc_lock+0x118>)
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	011b      	lsls	r3, r3, #4
 8003876:	4413      	add	r3, r2
 8003878:	330c      	adds	r3, #12
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d001      	beq.n	8003884 <inc_lock+0xe0>
 8003880:	2300      	movs	r3, #0
 8003882:	e015      	b.n	80038b0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d108      	bne.n	800389c <inc_lock+0xf8>
 800388a:	4a0c      	ldr	r2, [pc, #48]	; (80038bc <inc_lock+0x118>)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	011b      	lsls	r3, r3, #4
 8003890:	4413      	add	r3, r2
 8003892:	330c      	adds	r3, #12
 8003894:	881b      	ldrh	r3, [r3, #0]
 8003896:	3301      	adds	r3, #1
 8003898:	b29a      	uxth	r2, r3
 800389a:	e001      	b.n	80038a0 <inc_lock+0xfc>
 800389c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80038a0:	4906      	ldr	r1, [pc, #24]	; (80038bc <inc_lock+0x118>)
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	011b      	lsls	r3, r3, #4
 80038a6:	440b      	add	r3, r1
 80038a8:	330c      	adds	r3, #12
 80038aa:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3301      	adds	r3, #1
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3714      	adds	r7, #20
 80038b4:	46bd      	mov	sp, r7
 80038b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ba:	4770      	bx	lr
 80038bc:	20000030 	.word	0x20000030

080038c0 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	3b01      	subs	r3, #1
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2b01      	cmp	r3, #1
 80038d2:	d825      	bhi.n	8003920 <dec_lock+0x60>
		n = Files[i].ctr;
 80038d4:	4a17      	ldr	r2, [pc, #92]	; (8003934 <dec_lock+0x74>)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	011b      	lsls	r3, r3, #4
 80038da:	4413      	add	r3, r2
 80038dc:	330c      	adds	r3, #12
 80038de:	881b      	ldrh	r3, [r3, #0]
 80038e0:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 80038e2:	89fb      	ldrh	r3, [r7, #14]
 80038e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80038e8:	d101      	bne.n	80038ee <dec_lock+0x2e>
 80038ea:	2300      	movs	r3, #0
 80038ec:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 80038ee:	89fb      	ldrh	r3, [r7, #14]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d002      	beq.n	80038fa <dec_lock+0x3a>
 80038f4:	89fb      	ldrh	r3, [r7, #14]
 80038f6:	3b01      	subs	r3, #1
 80038f8:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 80038fa:	4a0e      	ldr	r2, [pc, #56]	; (8003934 <dec_lock+0x74>)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	011b      	lsls	r3, r3, #4
 8003900:	4413      	add	r3, r2
 8003902:	330c      	adds	r3, #12
 8003904:	89fa      	ldrh	r2, [r7, #14]
 8003906:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8003908:	89fb      	ldrh	r3, [r7, #14]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d105      	bne.n	800391a <dec_lock+0x5a>
 800390e:	4a09      	ldr	r2, [pc, #36]	; (8003934 <dec_lock+0x74>)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	011b      	lsls	r3, r3, #4
 8003914:	4413      	add	r3, r2
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800391a:	2300      	movs	r3, #0
 800391c:	737b      	strb	r3, [r7, #13]
 800391e:	e001      	b.n	8003924 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8003920:	2302      	movs	r3, #2
 8003922:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8003924:	7b7b      	ldrb	r3, [r7, #13]
}
 8003926:	4618      	mov	r0, r3
 8003928:	3714      	adds	r7, #20
 800392a:	46bd      	mov	sp, r7
 800392c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003930:	4770      	bx	lr
 8003932:	bf00      	nop
 8003934:	20000030 	.word	0x20000030

08003938 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8003938:	b480      	push	{r7}
 800393a:	b085      	sub	sp, #20
 800393c:	af00      	add	r7, sp, #0
 800393e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8003940:	2300      	movs	r3, #0
 8003942:	60fb      	str	r3, [r7, #12]
 8003944:	e010      	b.n	8003968 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8003946:	4a0d      	ldr	r2, [pc, #52]	; (800397c <clear_lock+0x44>)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	4413      	add	r3, r2
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	687a      	ldr	r2, [r7, #4]
 8003952:	429a      	cmp	r2, r3
 8003954:	d105      	bne.n	8003962 <clear_lock+0x2a>
 8003956:	4a09      	ldr	r2, [pc, #36]	; (800397c <clear_lock+0x44>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	011b      	lsls	r3, r3, #4
 800395c:	4413      	add	r3, r2
 800395e:	2200      	movs	r2, #0
 8003960:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	3301      	adds	r3, #1
 8003966:	60fb      	str	r3, [r7, #12]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2b01      	cmp	r3, #1
 800396c:	d9eb      	bls.n	8003946 <clear_lock+0xe>
	}
}
 800396e:	bf00      	nop
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	20000030 	.word	0x20000030

08003980 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b086      	sub	sp, #24
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003988:	2300      	movs	r3, #0
 800398a:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	78db      	ldrb	r3, [r3, #3]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d034      	beq.n	80039fe <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003998:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	7858      	ldrb	r0, [r3, #1]
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039a4:	2301      	movs	r3, #1
 80039a6:	697a      	ldr	r2, [r7, #20]
 80039a8:	f7ff fd40 	bl	800342c <disk_write>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d002      	beq.n	80039b8 <sync_window+0x38>
			res = FR_DISK_ERR;
 80039b2:	2301      	movs	r3, #1
 80039b4:	73fb      	strb	r3, [r7, #15]
 80039b6:	e022      	b.n	80039fe <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6a1b      	ldr	r3, [r3, #32]
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	1ad2      	subs	r2, r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699b      	ldr	r3, [r3, #24]
 80039ca:	429a      	cmp	r2, r3
 80039cc:	d217      	bcs.n	80039fe <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	789b      	ldrb	r3, [r3, #2]
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	e010      	b.n	80039f8 <sync_window+0x78>
					wsect += fs->fsize;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4413      	add	r3, r2
 80039de:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	7858      	ldrb	r0, [r3, #1]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80039ea:	2301      	movs	r3, #1
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	f7ff fd1d 	bl	800342c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	3b01      	subs	r3, #1
 80039f6:	613b      	str	r3, [r7, #16]
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d8eb      	bhi.n	80039d6 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 80039fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a00:	4618      	mov	r0, r3
 8003a02:	3718      	adds	r7, #24
 8003a04:	46bd      	mov	sp, r7
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003a12:	2300      	movs	r3, #0
 8003a14:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a1a:	683a      	ldr	r2, [r7, #0]
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d01b      	beq.n	8003a58 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f7ff ffad 	bl	8003980 <sync_window>
 8003a26:	4603      	mov	r3, r0
 8003a28:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003a2a:	7bfb      	ldrb	r3, [r7, #15]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d113      	bne.n	8003a58 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	7858      	ldrb	r0, [r3, #1]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	683a      	ldr	r2, [r7, #0]
 8003a3e:	f7ff fcd5 	bl	80033ec <disk_read>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d004      	beq.n	8003a52 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003a48:	f04f 33ff 	mov.w	r3, #4294967295
 8003a4c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	683a      	ldr	r2, [r7, #0]
 8003a56:	62da      	str	r2, [r3, #44]	; 0x2c
		}
	}
	return res;
 8003a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3710      	adds	r7, #16
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
	...

08003a64 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f7ff ff87 	bl	8003980 <sync_window>
 8003a72:	4603      	mov	r3, r0
 8003a74:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8003a76:	7bfb      	ldrb	r3, [r7, #15]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d158      	bne.n	8003b2e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b03      	cmp	r3, #3
 8003a82:	d148      	bne.n	8003b16 <sync_fs+0xb2>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	791b      	ldrb	r3, [r3, #4]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d144      	bne.n	8003b16 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3330      	adds	r3, #48	; 0x30
 8003a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a94:	2100      	movs	r1, #0
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fda9 	bl	80035ee <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	3330      	adds	r3, #48	; 0x30
 8003aa0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003aa4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f7ff fd38 	bl	800351e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	3330      	adds	r3, #48	; 0x30
 8003ab2:	4921      	ldr	r1, [pc, #132]	; (8003b38 <sync_fs+0xd4>)
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7ff fd4d 	bl	8003554 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	3330      	adds	r3, #48	; 0x30
 8003abe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8003ac2:	491e      	ldr	r1, [pc, #120]	; (8003b3c <sync_fs+0xd8>)
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f7ff fd45 	bl	8003554 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	3330      	adds	r3, #48	; 0x30
 8003ace:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	691b      	ldr	r3, [r3, #16]
 8003ad6:	4619      	mov	r1, r3
 8003ad8:	4610      	mov	r0, r2
 8003ada:	f7ff fd3b 	bl	8003554 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	3330      	adds	r3, #48	; 0x30
 8003ae2:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	4619      	mov	r1, r3
 8003aec:	4610      	mov	r0, r2
 8003aee:	f7ff fd31 	bl	8003554 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	69db      	ldr	r3, [r3, #28]
 8003af6:	1c5a      	adds	r2, r3, #1
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	62da      	str	r2, [r3, #44]	; 0x2c
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	7858      	ldrb	r0, [r3, #1]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b0a:	2301      	movs	r3, #1
 8003b0c:	f7ff fc8e 	bl	800342c <disk_write>
			fs->fsi_flag = 0;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	785b      	ldrb	r3, [r3, #1]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	2100      	movs	r1, #0
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f7ff fca4 	bl	800346c <disk_ioctl>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <sync_fs+0xca>
 8003b2a:	2301      	movs	r3, #1
 8003b2c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b30:	4618      	mov	r0, r3
 8003b32:	3710      	adds	r7, #16
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	41615252 	.word	0x41615252
 8003b3c:	61417272 	.word	0x61417272

08003b40 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
 8003b48:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	3b02      	subs	r3, #2
 8003b4e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	695b      	ldr	r3, [r3, #20]
 8003b54:	3b02      	subs	r3, #2
 8003b56:	683a      	ldr	r2, [r7, #0]
 8003b58:	429a      	cmp	r2, r3
 8003b5a:	d301      	bcc.n	8003b60 <clust2sect+0x20>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	e008      	b.n	8003b72 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	895b      	ldrh	r3, [r3, #10]
 8003b64:	461a      	mov	r2, r3
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	fb03 f202 	mul.w	r2, r3, r2
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	4413      	add	r3, r2
}
 8003b72:	4618      	mov	r0, r3
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr

08003b7e <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8003b7e:	b580      	push	{r7, lr}
 8003b80:	b086      	sub	sp, #24
 8003b82:	af00      	add	r7, sp, #0
 8003b84:	6078      	str	r0, [r7, #4]
 8003b86:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	d904      	bls.n	8003b9e <get_fat+0x20>
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	695b      	ldr	r3, [r3, #20]
 8003b98:	683a      	ldr	r2, [r7, #0]
 8003b9a:	429a      	cmp	r2, r3
 8003b9c:	d302      	bcc.n	8003ba4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	e08f      	b.n	8003cc4 <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ba8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d062      	beq.n	8003c78 <get_fat+0xfa>
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	dc7c      	bgt.n	8003cb0 <get_fat+0x132>
 8003bb6:	2b01      	cmp	r3, #1
 8003bb8:	d002      	beq.n	8003bc0 <get_fat+0x42>
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d042      	beq.n	8003c44 <get_fat+0xc6>
 8003bbe:	e077      	b.n	8003cb0 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	085b      	lsrs	r3, r3, #1
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4413      	add	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	6a1a      	ldr	r2, [r3, #32]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	0a5b      	lsrs	r3, r3, #9
 8003bd6:	4413      	add	r3, r2
 8003bd8:	4619      	mov	r1, r3
 8003bda:	6938      	ldr	r0, [r7, #16]
 8003bdc:	f7ff ff14 	bl	8003a08 <move_window>
 8003be0:	4603      	mov	r3, r0
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d167      	bne.n	8003cb6 <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	1c5a      	adds	r2, r3, #1
 8003bea:	60fa      	str	r2, [r7, #12]
 8003bec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf0:	693a      	ldr	r2, [r7, #16]
 8003bf2:	4413      	add	r3, r2
 8003bf4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003bf8:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	6a1a      	ldr	r2, [r3, #32]
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	0a5b      	lsrs	r3, r3, #9
 8003c02:	4413      	add	r3, r2
 8003c04:	4619      	mov	r1, r3
 8003c06:	6938      	ldr	r0, [r7, #16]
 8003c08:	f7ff fefe 	bl	8003a08 <move_window>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d153      	bne.n	8003cba <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4413      	add	r3, r2
 8003c1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003c20:	021b      	lsls	r3, r3, #8
 8003c22:	461a      	mov	r2, r3
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	f003 0301 	and.w	r3, r3, #1
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d002      	beq.n	8003c3a <get_fat+0xbc>
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	e002      	b.n	8003c40 <get_fat+0xc2>
 8003c3a:	68bb      	ldr	r3, [r7, #8]
 8003c3c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c40:	617b      	str	r3, [r7, #20]
			break;
 8003c42:	e03f      	b.n	8003cc4 <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	6a1a      	ldr	r2, [r3, #32]
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	4413      	add	r3, r2
 8003c4e:	4619      	mov	r1, r3
 8003c50:	6938      	ldr	r0, [r7, #16]
 8003c52:	f7ff fed9 	bl	8003a08 <move_window>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d130      	bne.n	8003cbe <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003c6a:	4413      	add	r3, r2
 8003c6c:	4618      	mov	r0, r3
 8003c6e:	f7ff fc1b 	bl	80034a8 <ld_word>
 8003c72:	4603      	mov	r3, r0
 8003c74:	617b      	str	r3, [r7, #20]
			break;
 8003c76:	e025      	b.n	8003cc4 <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	6a1a      	ldr	r2, [r3, #32]
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	09db      	lsrs	r3, r3, #7
 8003c80:	4413      	add	r3, r2
 8003c82:	4619      	mov	r1, r3
 8003c84:	6938      	ldr	r0, [r7, #16]
 8003c86:	f7ff febf 	bl	8003a08 <move_window>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d118      	bne.n	8003cc2 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003c9e:	4413      	add	r3, r2
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f7ff fc19 	bl	80034d8 <ld_dword>
 8003ca6:	4603      	mov	r3, r0
 8003ca8:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003cac:	617b      	str	r3, [r7, #20]
			break;
 8003cae:	e009      	b.n	8003cc4 <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	617b      	str	r3, [r7, #20]
 8003cb4:	e006      	b.n	8003cc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cb6:	bf00      	nop
 8003cb8:	e004      	b.n	8003cc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8003cba:	bf00      	nop
 8003cbc:	e002      	b.n	8003cc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8003cbe:	bf00      	nop
 8003cc0:	e000      	b.n	8003cc4 <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8003cc2:	bf00      	nop
		}
	}

	return val;
 8003cc4:	697b      	ldr	r3, [r7, #20]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	3718      	adds	r7, #24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	bd80      	pop	{r7, pc}

08003cce <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8003cce:	b590      	push	{r4, r7, lr}
 8003cd0:	b089      	sub	sp, #36	; 0x24
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	60f8      	str	r0, [r7, #12]
 8003cd6:	60b9      	str	r1, [r7, #8]
 8003cd8:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	f240 80d2 	bls.w	8003e8a <put_fat+0x1bc>
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	68ba      	ldr	r2, [r7, #8]
 8003cec:	429a      	cmp	r2, r3
 8003cee:	f080 80cc 	bcs.w	8003e8a <put_fat+0x1bc>
		switch (fs->fs_type) {
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b03      	cmp	r3, #3
 8003cf8:	f000 8096 	beq.w	8003e28 <put_fat+0x15a>
 8003cfc:	2b03      	cmp	r3, #3
 8003cfe:	f300 80cd 	bgt.w	8003e9c <put_fat+0x1ce>
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d002      	beq.n	8003d0c <put_fat+0x3e>
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d06e      	beq.n	8003de8 <put_fat+0x11a>
 8003d0a:	e0c7      	b.n	8003e9c <put_fat+0x1ce>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	61bb      	str	r3, [r7, #24]
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	085b      	lsrs	r3, r3, #1
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	4413      	add	r3, r2
 8003d18:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a1a      	ldr	r2, [r3, #32]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	0a5b      	lsrs	r3, r3, #9
 8003d22:	4413      	add	r3, r2
 8003d24:	4619      	mov	r1, r3
 8003d26:	68f8      	ldr	r0, [r7, #12]
 8003d28:	f7ff fe6e 	bl	8003a08 <move_window>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d30:	7ffb      	ldrb	r3, [r7, #31]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	f040 80ab 	bne.w	8003e8e <put_fat+0x1c0>
			p = fs->win + bc++ % SS(fs);
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003d3e:	69bb      	ldr	r3, [r7, #24]
 8003d40:	1c59      	adds	r1, r3, #1
 8003d42:	61b9      	str	r1, [r7, #24]
 8003d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d48:	4413      	add	r3, r2
 8003d4a:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	f003 0301 	and.w	r3, r3, #1
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <put_fat+0xa4>
 8003d56:	697b      	ldr	r3, [r7, #20]
 8003d58:	781b      	ldrb	r3, [r3, #0]
 8003d5a:	b25b      	sxtb	r3, r3
 8003d5c:	f003 030f 	and.w	r3, r3, #15
 8003d60:	b25a      	sxtb	r2, r3
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	011b      	lsls	r3, r3, #4
 8003d68:	b25b      	sxtb	r3, r3
 8003d6a:	4313      	orrs	r3, r2
 8003d6c:	b25b      	sxtb	r3, r3
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	e001      	b.n	8003d76 <put_fat+0xa8>
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	b2db      	uxtb	r3, r3
 8003d76:	697a      	ldr	r2, [r7, #20]
 8003d78:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6a1a      	ldr	r2, [r3, #32]
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	0a5b      	lsrs	r3, r3, #9
 8003d88:	4413      	add	r3, r2
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	68f8      	ldr	r0, [r7, #12]
 8003d8e:	f7ff fe3b 	bl	8003a08 <move_window>
 8003d92:	4603      	mov	r3, r0
 8003d94:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003d96:	7ffb      	ldrb	r3, [r7, #31]
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d17a      	bne.n	8003e92 <put_fat+0x1c4>
			p = fs->win + bc % SS(fs);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003da2:	69bb      	ldr	r3, [r7, #24]
 8003da4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003da8:	4413      	add	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	f003 0301 	and.w	r3, r3, #1
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <put_fat+0xf0>
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	091b      	lsrs	r3, r3, #4
 8003dba:	b2db      	uxtb	r3, r3
 8003dbc:	e00e      	b.n	8003ddc <put_fat+0x10e>
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	781b      	ldrb	r3, [r3, #0]
 8003dc2:	b25b      	sxtb	r3, r3
 8003dc4:	f023 030f 	bic.w	r3, r3, #15
 8003dc8:	b25a      	sxtb	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	0a1b      	lsrs	r3, r3, #8
 8003dce:	b25b      	sxtb	r3, r3
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	b25b      	sxtb	r3, r3
 8003dd6:	4313      	orrs	r3, r2
 8003dd8:	b25b      	sxtb	r3, r3
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	2201      	movs	r2, #1
 8003de4:	70da      	strb	r2, [r3, #3]
			break;
 8003de6:	e059      	b.n	8003e9c <put_fat+0x1ce>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	0a1b      	lsrs	r3, r3, #8
 8003df0:	4413      	add	r3, r2
 8003df2:	4619      	mov	r1, r3
 8003df4:	68f8      	ldr	r0, [r7, #12]
 8003df6:	f7ff fe07 	bl	8003a08 <move_window>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003dfe:	7ffb      	ldrb	r3, [r7, #31]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d148      	bne.n	8003e96 <put_fat+0x1c8>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	005b      	lsls	r3, r3, #1
 8003e0e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8003e12:	4413      	add	r3, r2
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	b292      	uxth	r2, r2
 8003e18:	4611      	mov	r1, r2
 8003e1a:	4618      	mov	r0, r3
 8003e1c:	f7ff fb7f 	bl	800351e <st_word>
			fs->wflag = 1;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2201      	movs	r2, #1
 8003e24:	70da      	strb	r2, [r3, #3]
			break;
 8003e26:	e039      	b.n	8003e9c <put_fat+0x1ce>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6a1a      	ldr	r2, [r3, #32]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	09db      	lsrs	r3, r3, #7
 8003e30:	4413      	add	r3, r2
 8003e32:	4619      	mov	r1, r3
 8003e34:	68f8      	ldr	r0, [r7, #12]
 8003e36:	f7ff fde7 	bl	8003a08 <move_window>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8003e3e:	7ffb      	ldrb	r3, [r7, #31]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d12a      	bne.n	8003e9a <put_fat+0x1cc>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e58:	4413      	add	r3, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7ff fb3c 	bl	80034d8 <ld_dword>
 8003e60:	4603      	mov	r3, r0
 8003e62:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e66:	4323      	orrs	r3, r4
 8003e68:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8003e78:	4413      	add	r3, r2
 8003e7a:	6879      	ldr	r1, [r7, #4]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7ff fb69 	bl	8003554 <st_dword>
			fs->wflag = 1;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	2201      	movs	r2, #1
 8003e86:	70da      	strb	r2, [r3, #3]
			break;
 8003e88:	e008      	b.n	8003e9c <put_fat+0x1ce>
		}
	}
 8003e8a:	bf00      	nop
 8003e8c:	e006      	b.n	8003e9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e8e:	bf00      	nop
 8003e90:	e004      	b.n	8003e9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e92:	bf00      	nop
 8003e94:	e002      	b.n	8003e9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e96:	bf00      	nop
 8003e98:	e000      	b.n	8003e9c <put_fat+0x1ce>
			if (res != FR_OK) break;
 8003e9a:	bf00      	nop
	return res;
 8003e9c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3724      	adds	r7, #36	; 0x24
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd90      	pop	{r4, r7, pc}

08003ea6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b088      	sub	sp, #32
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b01      	cmp	r3, #1
 8003ec0:	d904      	bls.n	8003ecc <remove_chain+0x26>
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	695b      	ldr	r3, [r3, #20]
 8003ec6:	68ba      	ldr	r2, [r7, #8]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d301      	bcc.n	8003ed0 <remove_chain+0x2a>
 8003ecc:	2302      	movs	r3, #2
 8003ece:	e04b      	b.n	8003f68 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00c      	beq.n	8003ef0 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8003ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8003eda:	6879      	ldr	r1, [r7, #4]
 8003edc:	69b8      	ldr	r0, [r7, #24]
 8003ede:	f7ff fef6 	bl	8003cce <put_fat>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d001      	beq.n	8003ef0 <remove_chain+0x4a>
 8003eec:	7ffb      	ldrb	r3, [r7, #31]
 8003eee:	e03b      	b.n	8003f68 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8003ef0:	68b9      	ldr	r1, [r7, #8]
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff fe43 	bl	8003b7e <get_fat>
 8003ef8:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d031      	beq.n	8003f64 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d101      	bne.n	8003f0a <remove_chain+0x64>
 8003f06:	2302      	movs	r3, #2
 8003f08:	e02e      	b.n	8003f68 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f10:	d101      	bne.n	8003f16 <remove_chain+0x70>
 8003f12:	2301      	movs	r3, #1
 8003f14:	e028      	b.n	8003f68 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8003f16:	2200      	movs	r2, #0
 8003f18:	68b9      	ldr	r1, [r7, #8]
 8003f1a:	69b8      	ldr	r0, [r7, #24]
 8003f1c:	f7ff fed7 	bl	8003cce <put_fat>
 8003f20:	4603      	mov	r3, r0
 8003f22:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8003f24:	7ffb      	ldrb	r3, [r7, #31]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d001      	beq.n	8003f2e <remove_chain+0x88>
 8003f2a:	7ffb      	ldrb	r3, [r7, #31]
 8003f2c:	e01c      	b.n	8003f68 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 8003f2e:	69bb      	ldr	r3, [r7, #24]
 8003f30:	691a      	ldr	r2, [r3, #16]
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	695b      	ldr	r3, [r3, #20]
 8003f36:	3b02      	subs	r3, #2
 8003f38:	429a      	cmp	r2, r3
 8003f3a:	d20b      	bcs.n	8003f54 <remove_chain+0xae>
			fs->free_clst++;
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	691b      	ldr	r3, [r3, #16]
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	69bb      	ldr	r3, [r7, #24]
 8003f44:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 8003f46:	69bb      	ldr	r3, [r7, #24]
 8003f48:	791b      	ldrb	r3, [r3, #4]
 8003f4a:	f043 0301 	orr.w	r3, r3, #1
 8003f4e:	b2da      	uxtb	r2, r3
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8003f54:	697b      	ldr	r3, [r7, #20]
 8003f56:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8003f58:	69bb      	ldr	r3, [r7, #24]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	68ba      	ldr	r2, [r7, #8]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3c6      	bcc.n	8003ef0 <remove_chain+0x4a>
 8003f62:	e000      	b.n	8003f66 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8003f64:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8003f66:	2300      	movs	r3, #0
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3720      	adds	r7, #32
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b088      	sub	sp, #32
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10d      	bne.n	8003fa2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 8003f8c:	69bb      	ldr	r3, [r7, #24]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d004      	beq.n	8003f9c <create_chain+0x2c>
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	69ba      	ldr	r2, [r7, #24]
 8003f98:	429a      	cmp	r2, r3
 8003f9a:	d31b      	bcc.n	8003fd4 <create_chain+0x64>
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	61bb      	str	r3, [r7, #24]
 8003fa0:	e018      	b.n	8003fd4 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 8003fa2:	6839      	ldr	r1, [r7, #0]
 8003fa4:	6878      	ldr	r0, [r7, #4]
 8003fa6:	f7ff fdea 	bl	8003b7e <get_fat>
 8003faa:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d801      	bhi.n	8003fb6 <create_chain+0x46>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e070      	b.n	8004098 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fbc:	d101      	bne.n	8003fc2 <create_chain+0x52>
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	e06a      	b.n	8004098 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8003fc2:	693b      	ldr	r3, [r7, #16]
 8003fc4:	695b      	ldr	r3, [r3, #20]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	429a      	cmp	r2, r3
 8003fca:	d201      	bcs.n	8003fd0 <create_chain+0x60>
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	e063      	b.n	8004098 <create_chain+0x128>
		scl = clst;
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8003fd4:	69bb      	ldr	r3, [r7, #24]
 8003fd6:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 8003fde:	693b      	ldr	r3, [r7, #16]
 8003fe0:	695b      	ldr	r3, [r3, #20]
 8003fe2:	69fa      	ldr	r2, [r7, #28]
 8003fe4:	429a      	cmp	r2, r3
 8003fe6:	d307      	bcc.n	8003ff8 <create_chain+0x88>
				ncl = 2;
 8003fe8:	2302      	movs	r3, #2
 8003fea:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	429a      	cmp	r2, r3
 8003ff2:	d901      	bls.n	8003ff8 <create_chain+0x88>
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	e04f      	b.n	8004098 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8003ff8:	69f9      	ldr	r1, [r7, #28]
 8003ffa:	6878      	ldr	r0, [r7, #4]
 8003ffc:	f7ff fdbf 	bl	8003b7e <get_fat>
 8004000:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00e      	beq.n	8004026 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2b01      	cmp	r3, #1
 800400c:	d003      	beq.n	8004016 <create_chain+0xa6>
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004014:	d101      	bne.n	800401a <create_chain+0xaa>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	e03e      	b.n	8004098 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800401a:	69fa      	ldr	r2, [r7, #28]
 800401c:	69bb      	ldr	r3, [r7, #24]
 800401e:	429a      	cmp	r2, r3
 8004020:	d1da      	bne.n	8003fd8 <create_chain+0x68>
 8004022:	2300      	movs	r3, #0
 8004024:	e038      	b.n	8004098 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8004026:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8004028:	f04f 32ff 	mov.w	r2, #4294967295
 800402c:	69f9      	ldr	r1, [r7, #28]
 800402e:	6938      	ldr	r0, [r7, #16]
 8004030:	f7ff fe4d 	bl	8003cce <put_fat>
 8004034:	4603      	mov	r3, r0
 8004036:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8004038:	7dfb      	ldrb	r3, [r7, #23]
 800403a:	2b00      	cmp	r3, #0
 800403c:	d109      	bne.n	8004052 <create_chain+0xe2>
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8004044:	69fa      	ldr	r2, [r7, #28]
 8004046:	6839      	ldr	r1, [r7, #0]
 8004048:	6938      	ldr	r0, [r7, #16]
 800404a:	f7ff fe40 	bl	8003cce <put_fat>
 800404e:	4603      	mov	r3, r0
 8004050:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8004052:	7dfb      	ldrb	r3, [r7, #23]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d116      	bne.n	8004086 <create_chain+0x116>
		fs->last_clst = ncl;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	69fa      	ldr	r2, [r7, #28]
 800405c:	60da      	str	r2, [r3, #12]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	691a      	ldr	r2, [r3, #16]
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	3b02      	subs	r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d804      	bhi.n	8004076 <create_chain+0x106>
 800406c:	693b      	ldr	r3, [r7, #16]
 800406e:	691b      	ldr	r3, [r3, #16]
 8004070:	1e5a      	subs	r2, r3, #1
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	611a      	str	r2, [r3, #16]
		fs->fsi_flag |= 1;
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	791b      	ldrb	r3, [r3, #4]
 800407a:	f043 0301 	orr.w	r3, r3, #1
 800407e:	b2da      	uxtb	r2, r3
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	711a      	strb	r2, [r3, #4]
 8004084:	e007      	b.n	8004096 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 8004086:	7dfb      	ldrb	r3, [r7, #23]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d102      	bne.n	8004092 <create_chain+0x122>
 800408c:	f04f 33ff 	mov.w	r3, #4294967295
 8004090:	e000      	b.n	8004094 <create_chain+0x124>
 8004092:	2301      	movs	r3, #1
 8004094:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 8004096:	69fb      	ldr	r3, [r7, #28]
}
 8004098:	4618      	mov	r0, r3
 800409a:	3720      	adds	r7, #32
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b087      	sub	sp, #28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
 80040a8:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040b4:	3304      	adds	r3, #4
 80040b6:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	0a5b      	lsrs	r3, r3, #9
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	8952      	ldrh	r2, [r2, #10]
 80040c0:	fbb3 f3f2 	udiv	r3, r3, r2
 80040c4:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040c6:	693b      	ldr	r3, [r7, #16]
 80040c8:	1d1a      	adds	r2, r3, #4
 80040ca:	613a      	str	r2, [r7, #16]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <clmt_clust+0x3a>
 80040d6:	2300      	movs	r3, #0
 80040d8:	e010      	b.n	80040fc <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 80040da:	697a      	ldr	r2, [r7, #20]
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	429a      	cmp	r2, r3
 80040e0:	d307      	bcc.n	80040f2 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 80040e2:	697a      	ldr	r2, [r7, #20]
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	1ad3      	subs	r3, r2, r3
 80040e8:	617b      	str	r3, [r7, #20]
 80040ea:	693b      	ldr	r3, [r7, #16]
 80040ec:	3304      	adds	r3, #4
 80040ee:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80040f0:	e7e9      	b.n	80040c6 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 80040f2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	4413      	add	r3, r2
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	371c      	adds	r7, #28
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr

08004108 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b086      	sub	sp, #24
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800411e:	d204      	bcs.n	800412a <dir_sdi+0x22>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	f003 031f 	and.w	r3, r3, #31
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <dir_sdi+0x26>
		return FR_INT_ERR;
 800412a:	2302      	movs	r3, #2
 800412c:	e063      	b.n	80041f6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d106      	bne.n	800414e <dir_sdi+0x46>
 8004140:	693b      	ldr	r3, [r7, #16]
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b02      	cmp	r3, #2
 8004146:	d902      	bls.n	800414e <dir_sdi+0x46>
		clst = fs->dirbase;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800414c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10c      	bne.n	800416e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	095b      	lsrs	r3, r3, #5
 8004158:	693a      	ldr	r2, [r7, #16]
 800415a:	8912      	ldrh	r2, [r2, #8]
 800415c:	4293      	cmp	r3, r2
 800415e:	d301      	bcc.n	8004164 <dir_sdi+0x5c>
 8004160:	2302      	movs	r3, #2
 8004162:	e048      	b.n	80041f6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	61da      	str	r2, [r3, #28]
 800416c:	e029      	b.n	80041c2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	895b      	ldrh	r3, [r3, #10]
 8004172:	025b      	lsls	r3, r3, #9
 8004174:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 8004176:	e019      	b.n	80041ac <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6979      	ldr	r1, [r7, #20]
 800417c:	4618      	mov	r0, r3
 800417e:	f7ff fcfe 	bl	8003b7e <get_fat>
 8004182:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 8004184:	697b      	ldr	r3, [r7, #20]
 8004186:	f1b3 3fff 	cmp.w	r3, #4294967295
 800418a:	d101      	bne.n	8004190 <dir_sdi+0x88>
 800418c:	2301      	movs	r3, #1
 800418e:	e032      	b.n	80041f6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8004190:	697b      	ldr	r3, [r7, #20]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d904      	bls.n	80041a0 <dir_sdi+0x98>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	695b      	ldr	r3, [r3, #20]
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	429a      	cmp	r2, r3
 800419e:	d301      	bcc.n	80041a4 <dir_sdi+0x9c>
 80041a0:	2302      	movs	r3, #2
 80041a2:	e028      	b.n	80041f6 <dir_sdi+0xee>
			ofs -= csz;
 80041a4:	683a      	ldr	r2, [r7, #0]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	1ad3      	subs	r3, r2, r3
 80041aa:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 80041ac:	683a      	ldr	r2, [r7, #0]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d2e1      	bcs.n	8004178 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 80041b4:	6979      	ldr	r1, [r7, #20]
 80041b6:	6938      	ldr	r0, [r7, #16]
 80041b8:	f7ff fcc2 	bl	8003b40 <clust2sect>
 80041bc:	4602      	mov	r2, r0
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d101      	bne.n	80041d4 <dir_sdi+0xcc>
 80041d0:	2302      	movs	r3, #2
 80041d2:	e010      	b.n	80041f6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	0a5b      	lsrs	r3, r3, #9
 80041dc:	441a      	add	r2, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041ee:	441a      	add	r2, r3
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80041f4:	2300      	movs	r3, #0
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3718      	adds	r7, #24
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b086      	sub	sp, #24
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	695b      	ldr	r3, [r3, #20]
 8004212:	3320      	adds	r3, #32
 8004214:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	69db      	ldr	r3, [r3, #28]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d003      	beq.n	8004226 <dir_next+0x28>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004224:	d301      	bcc.n	800422a <dir_next+0x2c>
 8004226:	2304      	movs	r3, #4
 8004228:	e0aa      	b.n	8004380 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004230:	2b00      	cmp	r3, #0
 8004232:	f040 8098 	bne.w	8004366 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69db      	ldr	r3, [r3, #28]
 800423a:	1c5a      	adds	r2, r3, #1
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	699b      	ldr	r3, [r3, #24]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10b      	bne.n	8004260 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8004248:	68bb      	ldr	r3, [r7, #8]
 800424a:	095b      	lsrs	r3, r3, #5
 800424c:	68fa      	ldr	r2, [r7, #12]
 800424e:	8912      	ldrh	r2, [r2, #8]
 8004250:	4293      	cmp	r3, r2
 8004252:	f0c0 8088 	bcc.w	8004366 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	61da      	str	r2, [r3, #28]
 800425c:	2304      	movs	r3, #4
 800425e:	e08f      	b.n	8004380 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8004260:	68bb      	ldr	r3, [r7, #8]
 8004262:	0a5b      	lsrs	r3, r3, #9
 8004264:	68fa      	ldr	r2, [r7, #12]
 8004266:	8952      	ldrh	r2, [r2, #10]
 8004268:	3a01      	subs	r2, #1
 800426a:	4013      	ands	r3, r2
 800426c:	2b00      	cmp	r3, #0
 800426e:	d17a      	bne.n	8004366 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	4619      	mov	r1, r3
 8004278:	4610      	mov	r0, r2
 800427a:	f7ff fc80 	bl	8003b7e <get_fat>
 800427e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8004280:	697b      	ldr	r3, [r7, #20]
 8004282:	2b01      	cmp	r3, #1
 8004284:	d801      	bhi.n	800428a <dir_next+0x8c>
 8004286:	2302      	movs	r3, #2
 8004288:	e07a      	b.n	8004380 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004290:	d101      	bne.n	8004296 <dir_next+0x98>
 8004292:	2301      	movs	r3, #1
 8004294:	e074      	b.n	8004380 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	695b      	ldr	r3, [r3, #20]
 800429a:	697a      	ldr	r2, [r7, #20]
 800429c:	429a      	cmp	r2, r3
 800429e:	d358      	bcc.n	8004352 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d104      	bne.n	80042b0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	61da      	str	r2, [r3, #28]
 80042ac:	2304      	movs	r3, #4
 80042ae:	e067      	b.n	8004380 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	4619      	mov	r1, r3
 80042b8:	4610      	mov	r0, r2
 80042ba:	f7ff fe59 	bl	8003f70 <create_chain>
 80042be:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80042c0:	697b      	ldr	r3, [r7, #20]
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d101      	bne.n	80042ca <dir_next+0xcc>
 80042c6:	2307      	movs	r3, #7
 80042c8:	e05a      	b.n	8004380 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 80042ca:	697b      	ldr	r3, [r7, #20]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d101      	bne.n	80042d4 <dir_next+0xd6>
 80042d0:	2302      	movs	r3, #2
 80042d2:	e055      	b.n	8004380 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042da:	d101      	bne.n	80042e0 <dir_next+0xe2>
 80042dc:	2301      	movs	r3, #1
 80042de:	e04f      	b.n	8004380 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80042e0:	68f8      	ldr	r0, [r7, #12]
 80042e2:	f7ff fb4d 	bl	8003980 <sync_window>
 80042e6:	4603      	mov	r3, r0
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d001      	beq.n	80042f0 <dir_next+0xf2>
 80042ec:	2301      	movs	r3, #1
 80042ee:	e047      	b.n	8004380 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	3330      	adds	r3, #48	; 0x30
 80042f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042f8:	2100      	movs	r1, #0
 80042fa:	4618      	mov	r0, r3
 80042fc:	f7ff f977 	bl	80035ee <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 8004300:	2300      	movs	r3, #0
 8004302:	613b      	str	r3, [r7, #16]
 8004304:	6979      	ldr	r1, [r7, #20]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f7ff fc1a 	bl	8003b40 <clust2sect>
 800430c:	4602      	mov	r2, r0
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	62da      	str	r2, [r3, #44]	; 0x2c
 8004312:	e012      	b.n	800433a <dir_next+0x13c>
						fs->wflag = 1;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2201      	movs	r2, #1
 8004318:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800431a:	68f8      	ldr	r0, [r7, #12]
 800431c:	f7ff fb30 	bl	8003980 <sync_window>
 8004320:	4603      	mov	r3, r0
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <dir_next+0x12c>
 8004326:	2301      	movs	r3, #1
 8004328:	e02a      	b.n	8004380 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	3301      	adds	r3, #1
 800432e:	613b      	str	r3, [r7, #16]
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	62da      	str	r2, [r3, #44]	; 0x2c
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	895b      	ldrh	r3, [r3, #10]
 800433e:	461a      	mov	r2, r3
 8004340:	693b      	ldr	r3, [r7, #16]
 8004342:	4293      	cmp	r3, r2
 8004344:	d3e6      	bcc.n	8004314 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800434a:	693b      	ldr	r3, [r7, #16]
 800434c:	1ad2      	subs	r2, r2, r3
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	62da      	str	r2, [r3, #44]	; 0x2c
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8004358:	6979      	ldr	r1, [r7, #20]
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fbf0 	bl	8003b40 <clust2sect>
 8004360:	4602      	mov	r2, r0
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	68ba      	ldr	r2, [r7, #8]
 800436a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004378:	441a      	add	r2, r3
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3718      	adds	r7, #24
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b086      	sub	sp, #24
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8004398:	2100      	movs	r1, #0
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f7ff feb4 	bl	8004108 <dir_sdi>
 80043a0:	4603      	mov	r3, r0
 80043a2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80043a4:	7dfb      	ldrb	r3, [r7, #23]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d12b      	bne.n	8004402 <dir_alloc+0x7a>
		n = 0;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	4619      	mov	r1, r3
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f7ff fb27 	bl	8003a08 <move_window>
 80043ba:	4603      	mov	r3, r0
 80043bc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80043be:	7dfb      	ldrb	r3, [r7, #23]
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d11d      	bne.n	8004400 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a1b      	ldr	r3, [r3, #32]
 80043c8:	781b      	ldrb	r3, [r3, #0]
 80043ca:	2be5      	cmp	r3, #229	; 0xe5
 80043cc:	d004      	beq.n	80043d8 <dir_alloc+0x50>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	781b      	ldrb	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d107      	bne.n	80043e8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80043d8:	693b      	ldr	r3, [r7, #16]
 80043da:	3301      	adds	r3, #1
 80043dc:	613b      	str	r3, [r7, #16]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	429a      	cmp	r2, r3
 80043e4:	d102      	bne.n	80043ec <dir_alloc+0x64>
 80043e6:	e00c      	b.n	8004402 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80043e8:	2300      	movs	r3, #0
 80043ea:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80043ec:	2101      	movs	r1, #1
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f7ff ff05 	bl	80041fe <dir_next>
 80043f4:	4603      	mov	r3, r0
 80043f6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80043f8:	7dfb      	ldrb	r3, [r7, #23]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d0d7      	beq.n	80043ae <dir_alloc+0x26>
 80043fe:	e000      	b.n	8004402 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 8004400:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004402:	7dfb      	ldrb	r3, [r7, #23]
 8004404:	2b04      	cmp	r3, #4
 8004406:	d101      	bne.n	800440c <dir_alloc+0x84>
 8004408:	2307      	movs	r3, #7
 800440a:	75fb      	strb	r3, [r7, #23]
	return res;
 800440c:	7dfb      	ldrb	r3, [r7, #23]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3718      	adds	r7, #24
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b084      	sub	sp, #16
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
 800441e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	331a      	adds	r3, #26
 8004424:	4618      	mov	r0, r3
 8004426:	f7ff f83f 	bl	80034a8 <ld_word>
 800442a:	4603      	mov	r3, r0
 800442c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	781b      	ldrb	r3, [r3, #0]
 8004432:	2b03      	cmp	r3, #3
 8004434:	d109      	bne.n	800444a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	3314      	adds	r3, #20
 800443a:	4618      	mov	r0, r3
 800443c:	f7ff f834 	bl	80034a8 <ld_word>
 8004440:	4603      	mov	r3, r0
 8004442:	041b      	lsls	r3, r3, #16
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4313      	orrs	r3, r2
 8004448:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800444a:	68fb      	ldr	r3, [r7, #12]
}
 800444c:	4618      	mov	r0, r3
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	331a      	adds	r3, #26
 8004464:	687a      	ldr	r2, [r7, #4]
 8004466:	b292      	uxth	r2, r2
 8004468:	4611      	mov	r1, r2
 800446a:	4618      	mov	r0, r3
 800446c:	f7ff f857 	bl	800351e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	781b      	ldrb	r3, [r3, #0]
 8004474:	2b03      	cmp	r3, #3
 8004476:	d109      	bne.n	800448c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	f103 0214 	add.w	r2, r3, #20
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	0c1b      	lsrs	r3, r3, #16
 8004482:	b29b      	uxth	r3, r3
 8004484:	4619      	mov	r1, r3
 8004486:	4610      	mov	r0, r2
 8004488:	f7ff f849 	bl	800351e <st_word>
	}
}
 800448c:	bf00      	nop
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80044a2:	2100      	movs	r1, #0
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	f7ff fe2f 	bl	8004108 <dir_sdi>
 80044aa:	4603      	mov	r3, r0
 80044ac:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80044ae:	7dfb      	ldrb	r3, [r7, #23]
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d001      	beq.n	80044b8 <dir_find+0x24>
 80044b4:	7dfb      	ldrb	r3, [r7, #23]
 80044b6:	e03e      	b.n	8004536 <dir_find+0xa2>
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(fs, dp->sect);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	69db      	ldr	r3, [r3, #28]
 80044bc:	4619      	mov	r1, r3
 80044be:	6938      	ldr	r0, [r7, #16]
 80044c0:	f7ff faa2 	bl	8003a08 <move_window>
 80044c4:	4603      	mov	r3, r0
 80044c6:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80044c8:	7dfb      	ldrb	r3, [r7, #23]
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d12f      	bne.n	800452e <dir_find+0x9a>
		c = dp->dir[DIR_Name];
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	781b      	ldrb	r3, [r3, #0]
 80044d4:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80044d6:	7bfb      	ldrb	r3, [r7, #15]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d102      	bne.n	80044e2 <dir_find+0x4e>
 80044dc:	2304      	movs	r3, #4
 80044de:	75fb      	strb	r3, [r7, #23]
 80044e0:	e028      	b.n	8004534 <dir_find+0xa0>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	330b      	adds	r3, #11
 80044e8:	781b      	ldrb	r3, [r3, #0]
 80044ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	719a      	strb	r2, [r3, #6]
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a1b      	ldr	r3, [r3, #32]
 80044f8:	330b      	adds	r3, #11
 80044fa:	781b      	ldrb	r3, [r3, #0]
 80044fc:	f003 0308 	and.w	r3, r3, #8
 8004500:	2b00      	cmp	r3, #0
 8004502:	d10a      	bne.n	800451a <dir_find+0x86>
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a18      	ldr	r0, [r3, #32]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	3324      	adds	r3, #36	; 0x24
 800450c:	220b      	movs	r2, #11
 800450e:	4619      	mov	r1, r3
 8004510:	f7ff f888 	bl	8003624 <mem_cmp>
 8004514:	4603      	mov	r3, r0
 8004516:	2b00      	cmp	r3, #0
 8004518:	d00b      	beq.n	8004532 <dir_find+0x9e>
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800451a:	2100      	movs	r1, #0
 800451c:	6878      	ldr	r0, [r7, #4]
 800451e:	f7ff fe6e 	bl	80041fe <dir_next>
 8004522:	4603      	mov	r3, r0
 8004524:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004526:	7dfb      	ldrb	r3, [r7, #23]
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0c5      	beq.n	80044b8 <dir_find+0x24>
 800452c:	e002      	b.n	8004534 <dir_find+0xa0>
		if (res != FR_OK) break;
 800452e:	bf00      	nop
 8004530:	e000      	b.n	8004534 <dir_find+0xa0>
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
 8004532:	bf00      	nop

	return res;
 8004534:	7dfb      	ldrb	r3, [r7, #23]
}
 8004536:	4618      	mov	r0, r3
 8004538:	3718      	adds	r7, #24
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}

0800453e <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800453e:	b580      	push	{r7, lr}
 8004540:	b084      	sub	sp, #16
 8004542:	af00      	add	r7, sp, #0
 8004544:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60bb      	str	r3, [r7, #8]
			} while (res == FR_OK && --nent);
		}
	}

#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800454c:	2101      	movs	r1, #1
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff1a 	bl	8004388 <dir_alloc>
 8004554:	4603      	mov	r3, r0
 8004556:	73fb      	strb	r3, [r7, #15]

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8004558:	7bfb      	ldrb	r3, [r7, #15]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11c      	bne.n	8004598 <dir_register+0x5a>
		res = move_window(fs, dp->sect);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	69db      	ldr	r3, [r3, #28]
 8004562:	4619      	mov	r1, r3
 8004564:	68b8      	ldr	r0, [r7, #8]
 8004566:	f7ff fa4f 	bl	8003a08 <move_window>
 800456a:	4603      	mov	r3, r0
 800456c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 800456e:	7bfb      	ldrb	r3, [r7, #15]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d111      	bne.n	8004598 <dir_register+0x5a>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	2220      	movs	r2, #32
 800457a:	2100      	movs	r1, #0
 800457c:	4618      	mov	r0, r3
 800457e:	f7ff f836 	bl	80035ee <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6a18      	ldr	r0, [r3, #32]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	3324      	adds	r3, #36	; 0x24
 800458a:	220b      	movs	r2, #11
 800458c:	4619      	mov	r1, r3
 800458e:	f7ff f80d 	bl	80035ac <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			fs->wflag = 1;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2201      	movs	r2, #1
 8004596:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3710      	adds	r7, #16
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
	...

080045a4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b088      	sub	sp, #32
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
	BYTE c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	p = *path; sfn = dp->fn;
 80045ae:	683b      	ldr	r3, [r7, #0]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	60fb      	str	r3, [r7, #12]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	3324      	adds	r3, #36	; 0x24
 80045b8:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80045ba:	220b      	movs	r2, #11
 80045bc:	2120      	movs	r1, #32
 80045be:	68b8      	ldr	r0, [r7, #8]
 80045c0:	f7ff f815 	bl	80035ee <mem_set>
	si = i = 0; ni = 8;
 80045c4:	2300      	movs	r3, #0
 80045c6:	613b      	str	r3, [r7, #16]
 80045c8:	693b      	ldr	r3, [r7, #16]
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	2308      	movs	r3, #8
 80045ce:	617b      	str	r3, [r7, #20]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of the path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80045d0:	69fb      	ldr	r3, [r7, #28]
 80045d2:	1c5a      	adds	r2, r3, #1
 80045d4:	61fa      	str	r2, [r7, #28]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	4413      	add	r3, r2
 80045da:	781b      	ldrb	r3, [r3, #0]
 80045dc:	76fb      	strb	r3, [r7, #27]
		if (c <= ' ') break; 			/* Break if end of the path name */
 80045de:	7efb      	ldrb	r3, [r7, #27]
 80045e0:	2b20      	cmp	r3, #32
 80045e2:	d94e      	bls.n	8004682 <create_name+0xde>
		if (c == '/' || c == '\\') {	/* Break if a separator is found */
 80045e4:	7efb      	ldrb	r3, [r7, #27]
 80045e6:	2b2f      	cmp	r3, #47	; 0x2f
 80045e8:	d006      	beq.n	80045f8 <create_name+0x54>
 80045ea:	7efb      	ldrb	r3, [r7, #27]
 80045ec:	2b5c      	cmp	r3, #92	; 0x5c
 80045ee:	d110      	bne.n	8004612 <create_name+0x6e>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 80045f0:	e002      	b.n	80045f8 <create_name+0x54>
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	3301      	adds	r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	68fa      	ldr	r2, [r7, #12]
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	4413      	add	r3, r2
 80045fe:	781b      	ldrb	r3, [r3, #0]
 8004600:	2b2f      	cmp	r3, #47	; 0x2f
 8004602:	d0f6      	beq.n	80045f2 <create_name+0x4e>
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	69fb      	ldr	r3, [r7, #28]
 8004608:	4413      	add	r3, r2
 800460a:	781b      	ldrb	r3, [r3, #0]
 800460c:	2b5c      	cmp	r3, #92	; 0x5c
 800460e:	d0f0      	beq.n	80045f2 <create_name+0x4e>
			break;
 8004610:	e038      	b.n	8004684 <create_name+0xe0>
		}
		if (c == '.' || i >= ni) {		/* End of body or over size? */
 8004612:	7efb      	ldrb	r3, [r7, #27]
 8004614:	2b2e      	cmp	r3, #46	; 0x2e
 8004616:	d003      	beq.n	8004620 <create_name+0x7c>
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	429a      	cmp	r2, r3
 800461e:	d30c      	bcc.n	800463a <create_name+0x96>
			if (ni == 11 || c != '.') return FR_INVALID_NAME;	/* Over size or invalid dot */
 8004620:	697b      	ldr	r3, [r7, #20]
 8004622:	2b0b      	cmp	r3, #11
 8004624:	d002      	beq.n	800462c <create_name+0x88>
 8004626:	7efb      	ldrb	r3, [r7, #27]
 8004628:	2b2e      	cmp	r3, #46	; 0x2e
 800462a:	d001      	beq.n	8004630 <create_name+0x8c>
 800462c:	2306      	movs	r3, #6
 800462e:	e044      	b.n	80046ba <create_name+0x116>
			i = 8; ni = 11;				/* Goto extension */
 8004630:	2308      	movs	r3, #8
 8004632:	613b      	str	r3, [r7, #16]
 8004634:	230b      	movs	r3, #11
 8004636:	617b      	str	r3, [r7, #20]
			continue;
 8004638:	e022      	b.n	8004680 <create_name+0xdc>
		}
		if (c >= 0x80) {				/* Extended character? */
 800463a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800463e:	2b00      	cmp	r3, #0
 8004640:	da04      	bge.n	800464c <create_name+0xa8>
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004642:	7efb      	ldrb	r3, [r7, #27]
 8004644:	3b80      	subs	r3, #128	; 0x80
 8004646:	4a1f      	ldr	r2, [pc, #124]	; (80046c4 <create_name+0x120>)
 8004648:	5cd3      	ldrb	r3, [r2, r3]
 800464a:	76fb      	strb	r3, [r7, #27]
			d = (BYTE)p[si++];			/* Get 2nd byte */
			if (!IsDBCS2(d) || i >= ni - 1) return FR_INVALID_NAME;	/* Reject invalid DBC */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c)) return FR_INVALID_NAME;	/* Reject illegal chrs for SFN */
 800464c:	7efb      	ldrb	r3, [r7, #27]
 800464e:	4619      	mov	r1, r3
 8004650:	481d      	ldr	r0, [pc, #116]	; (80046c8 <create_name+0x124>)
 8004652:	f7ff f80e 	bl	8003672 <chk_chr>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d001      	beq.n	8004660 <create_name+0xbc>
 800465c:	2306      	movs	r3, #6
 800465e:	e02c      	b.n	80046ba <create_name+0x116>
			if (IsLower(c)) c -= 0x20;	/* To upper */
 8004660:	7efb      	ldrb	r3, [r7, #27]
 8004662:	2b60      	cmp	r3, #96	; 0x60
 8004664:	d905      	bls.n	8004672 <create_name+0xce>
 8004666:	7efb      	ldrb	r3, [r7, #27]
 8004668:	2b7a      	cmp	r3, #122	; 0x7a
 800466a:	d802      	bhi.n	8004672 <create_name+0xce>
 800466c:	7efb      	ldrb	r3, [r7, #27]
 800466e:	3b20      	subs	r3, #32
 8004670:	76fb      	strb	r3, [r7, #27]
			sfn[i++] = c;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	1c5a      	adds	r2, r3, #1
 8004676:	613a      	str	r2, [r7, #16]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	4413      	add	r3, r2
 800467c:	7efa      	ldrb	r2, [r7, #27]
 800467e:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004680:	e7a6      	b.n	80045d0 <create_name+0x2c>
		if (c <= ' ') break; 			/* Break if end of the path name */
 8004682:	bf00      	nop
		}
	}
	*path = p + si;						/* Return pointer to the next segment */
 8004684:	68fa      	ldr	r2, [r7, #12]
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	441a      	add	r2, r3
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	601a      	str	r2, [r3, #0]
	if (i == 0) return FR_INVALID_NAME;	/* Reject nul string */
 800468e:	693b      	ldr	r3, [r7, #16]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d101      	bne.n	8004698 <create_name+0xf4>
 8004694:	2306      	movs	r3, #6
 8004696:	e010      	b.n	80046ba <create_name+0x116>

	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 8004698:	68bb      	ldr	r3, [r7, #8]
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	2be5      	cmp	r3, #229	; 0xe5
 800469e:	d102      	bne.n	80046a6 <create_name+0x102>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2205      	movs	r2, #5
 80046a4:	701a      	strb	r2, [r3, #0]
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 80046a6:	7efb      	ldrb	r3, [r7, #27]
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d801      	bhi.n	80046b0 <create_name+0x10c>
 80046ac:	2204      	movs	r2, #4
 80046ae:	e000      	b.n	80046b2 <create_name+0x10e>
 80046b0:	2200      	movs	r2, #0
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	330b      	adds	r3, #11
 80046b6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80046b8:	2300      	movs	r3, #0
#endif /* _USE_LFN != 0 */
}
 80046ba:	4618      	mov	r0, r3
 80046bc:	3720      	adds	r7, #32
 80046be:	46bd      	mov	sp, r7
 80046c0:	bd80      	pop	{r7, pc}
 80046c2:	bf00      	nop
 80046c4:	080057dc 	.word	0x080057dc
 80046c8:	08005774 	.word	0x08005774

080046cc <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 80046e0:	e002      	b.n	80046e8 <follow_path+0x1c>
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	3301      	adds	r3, #1
 80046e6:	603b      	str	r3, [r7, #0]
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	781b      	ldrb	r3, [r3, #0]
 80046ec:	2b2f      	cmp	r3, #47	; 0x2f
 80046ee:	d0f8      	beq.n	80046e2 <follow_path+0x16>
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	781b      	ldrb	r3, [r3, #0]
 80046f4:	2b5c      	cmp	r3, #92	; 0x5c
 80046f6:	d0f4      	beq.n	80046e2 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2200      	movs	r2, #0
 80046fc:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b1f      	cmp	r3, #31
 8004704:	d80a      	bhi.n	800471c <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2280      	movs	r2, #128	; 0x80
 800470a:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800470e:	2100      	movs	r1, #0
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7ff fcf9 	bl	8004108 <dir_sdi>
 8004716:	4603      	mov	r3, r0
 8004718:	75fb      	strb	r3, [r7, #23]
 800471a:	e043      	b.n	80047a4 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800471c:	463b      	mov	r3, r7
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f7ff ff3f 	bl	80045a4 <create_name>
 8004726:	4603      	mov	r3, r0
 8004728:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800472a:	7dfb      	ldrb	r3, [r7, #23]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d134      	bne.n	800479a <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7ff feaf 	bl	8004494 <dir_find>
 8004736:	4603      	mov	r3, r0
 8004738:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8004740:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 8004742:	7dfb      	ldrb	r3, [r7, #23]
 8004744:	2b00      	cmp	r3, #0
 8004746:	d00a      	beq.n	800475e <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8004748:	7dfb      	ldrb	r3, [r7, #23]
 800474a:	2b04      	cmp	r3, #4
 800474c:	d127      	bne.n	800479e <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800474e:	7afb      	ldrb	r3, [r7, #11]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d122      	bne.n	800479e <follow_path+0xd2>
 8004758:	2305      	movs	r3, #5
 800475a:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800475c:	e01f      	b.n	800479e <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800475e:	7afb      	ldrb	r3, [r7, #11]
 8004760:	f003 0304 	and.w	r3, r3, #4
 8004764:	2b00      	cmp	r3, #0
 8004766:	d11c      	bne.n	80047a2 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	799b      	ldrb	r3, [r3, #6]
 800476c:	f003 0310 	and.w	r3, r3, #16
 8004770:	2b00      	cmp	r3, #0
 8004772:	d102      	bne.n	800477a <follow_path+0xae>
				res = FR_NO_PATH; break;
 8004774:	2305      	movs	r3, #5
 8004776:	75fb      	strb	r3, [r7, #23]
 8004778:	e014      	b.n	80047a4 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	695b      	ldr	r3, [r3, #20]
 8004784:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004788:	4413      	add	r3, r2
 800478a:	4619      	mov	r1, r3
 800478c:	68f8      	ldr	r0, [r7, #12]
 800478e:	f7ff fe42 	bl	8004416 <ld_clust>
 8004792:	4602      	mov	r2, r0
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004798:	e7c0      	b.n	800471c <follow_path+0x50>
			if (res != FR_OK) break;
 800479a:	bf00      	nop
 800479c:	e002      	b.n	80047a4 <follow_path+0xd8>
				break;
 800479e:	bf00      	nop
 80047a0:	e000      	b.n	80047a4 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80047a2:	bf00      	nop
			}
		}
	}

	return res;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80047a6:	4618      	mov	r0, r3
 80047a8:	3718      	adds	r7, #24
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}

080047ae <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 80047ae:	b480      	push	{r7}
 80047b0:	b087      	sub	sp, #28
 80047b2:	af00      	add	r7, sp, #0
 80047b4:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80047b6:	f04f 33ff 	mov.w	r3, #4294967295
 80047ba:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d031      	beq.n	8004828 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	617b      	str	r3, [r7, #20]
 80047ca:	e002      	b.n	80047d2 <get_ldnumber+0x24>
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	3301      	adds	r3, #1
 80047d0:	617b      	str	r3, [r7, #20]
 80047d2:	697b      	ldr	r3, [r7, #20]
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	2b20      	cmp	r3, #32
 80047d8:	d903      	bls.n	80047e2 <get_ldnumber+0x34>
 80047da:	697b      	ldr	r3, [r7, #20]
 80047dc:	781b      	ldrb	r3, [r3, #0]
 80047de:	2b3a      	cmp	r3, #58	; 0x3a
 80047e0:	d1f4      	bne.n	80047cc <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b3a      	cmp	r3, #58	; 0x3a
 80047e8:	d11c      	bne.n	8004824 <get_ldnumber+0x76>
			tp = *path;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	1c5a      	adds	r2, r3, #1
 80047f4:	60fa      	str	r2, [r7, #12]
 80047f6:	781b      	ldrb	r3, [r3, #0]
 80047f8:	3b30      	subs	r3, #48	; 0x30
 80047fa:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80047fc:	68bb      	ldr	r3, [r7, #8]
 80047fe:	2b09      	cmp	r3, #9
 8004800:	d80e      	bhi.n	8004820 <get_ldnumber+0x72>
 8004802:	68fa      	ldr	r2, [r7, #12]
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	429a      	cmp	r2, r3
 8004808:	d10a      	bne.n	8004820 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800480a:	68bb      	ldr	r3, [r7, #8]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d107      	bne.n	8004820 <get_ldnumber+0x72>
					vol = (int)i;
 8004810:	68bb      	ldr	r3, [r7, #8]
 8004812:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	3301      	adds	r3, #1
 8004818:	617b      	str	r3, [r7, #20]
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	e002      	b.n	800482a <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8004824:	2300      	movs	r3, #0
 8004826:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8004828:	693b      	ldr	r3, [r7, #16]
}
 800482a:	4618      	mov	r0, r3
 800482c:	371c      	adds	r7, #28
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr
	...

08004838 <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 8004838:	b580      	push	{r7, lr}
 800483a:	b082      	sub	sp, #8
 800483c:	af00      	add	r7, sp, #0
 800483e:	6078      	str	r0, [r7, #4]
 8004840:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	70da      	strb	r2, [r3, #3]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	f04f 32ff 	mov.w	r2, #4294967295
 800484e:	62da      	str	r2, [r3, #44]	; 0x2c
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 8004850:	6839      	ldr	r1, [r7, #0]
 8004852:	6878      	ldr	r0, [r7, #4]
 8004854:	f7ff f8d8 	bl	8003a08 <move_window>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d001      	beq.n	8004862 <check_fs+0x2a>
 800485e:	2304      	movs	r3, #4
 8004860:	e038      	b.n	80048d4 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	3330      	adds	r3, #48	; 0x30
 8004866:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800486a:	4618      	mov	r0, r3
 800486c:	f7fe fe1c 	bl	80034a8 <ld_word>
 8004870:	4603      	mov	r3, r0
 8004872:	461a      	mov	r2, r3
 8004874:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004878:	429a      	cmp	r2, r3
 800487a:	d001      	beq.n	8004880 <check_fs+0x48>
 800487c:	2303      	movs	r3, #3
 800487e:	e029      	b.n	80048d4 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004886:	2be9      	cmp	r3, #233	; 0xe9
 8004888:	d009      	beq.n	800489e <check_fs+0x66>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004890:	2beb      	cmp	r3, #235	; 0xeb
 8004892:	d11e      	bne.n	80048d2 <check_fs+0x9a>
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800489a:	2b90      	cmp	r3, #144	; 0x90
 800489c:	d119      	bne.n	80048d2 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	3330      	adds	r3, #48	; 0x30
 80048a2:	3336      	adds	r3, #54	; 0x36
 80048a4:	4618      	mov	r0, r3
 80048a6:	f7fe fe17 	bl	80034d8 <ld_dword>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80048b0:	4a0a      	ldr	r2, [pc, #40]	; (80048dc <check_fs+0xa4>)
 80048b2:	4293      	cmp	r3, r2
 80048b4:	d101      	bne.n	80048ba <check_fs+0x82>
 80048b6:	2300      	movs	r3, #0
 80048b8:	e00c      	b.n	80048d4 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	3330      	adds	r3, #48	; 0x30
 80048be:	3352      	adds	r3, #82	; 0x52
 80048c0:	4618      	mov	r0, r3
 80048c2:	f7fe fe09 	bl	80034d8 <ld_dword>
 80048c6:	4603      	mov	r3, r0
 80048c8:	4a05      	ldr	r2, [pc, #20]	; (80048e0 <check_fs+0xa8>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d101      	bne.n	80048d2 <check_fs+0x9a>
 80048ce:	2300      	movs	r3, #0
 80048d0:	e000      	b.n	80048d4 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 80048d2:	2302      	movs	r3, #2
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3708      	adds	r7, #8
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	00544146 	.word	0x00544146
 80048e0:	33544146 	.word	0x33544146

080048e4 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 80048e4:	b580      	push	{r7, lr}
 80048e6:	b096      	sub	sp, #88	; 0x58
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	4613      	mov	r3, r2
 80048f0:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	2200      	movs	r2, #0
 80048f6:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 80048f8:	68f8      	ldr	r0, [r7, #12]
 80048fa:	f7ff ff58 	bl	80047ae <get_ldnumber>
 80048fe:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8004900:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004902:	2b00      	cmp	r3, #0
 8004904:	da01      	bge.n	800490a <find_volume+0x26>
 8004906:	230b      	movs	r3, #11
 8004908:	e22e      	b.n	8004d68 <find_volume+0x484>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800490a:	4aa8      	ldr	r2, [pc, #672]	; (8004bac <find_volume+0x2c8>)
 800490c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800490e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004912:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8004914:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004916:	2b00      	cmp	r3, #0
 8004918:	d101      	bne.n	800491e <find_volume+0x3a>
 800491a:	230c      	movs	r3, #12
 800491c:	e224      	b.n	8004d68 <find_volume+0x484>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 800491e:	68bb      	ldr	r3, [r7, #8]
 8004920:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004922:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8004924:	79fb      	ldrb	r3, [r7, #7]
 8004926:	f023 0301 	bic.w	r3, r3, #1
 800492a:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 800492c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800492e:	781b      	ldrb	r3, [r3, #0]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d01a      	beq.n	800496a <find_volume+0x86>
		stat = disk_status(fs->drv);
 8004934:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004936:	785b      	ldrb	r3, [r3, #1]
 8004938:	4618      	mov	r0, r3
 800493a:	f7fe fd17 	bl	800336c <disk_status>
 800493e:	4603      	mov	r3, r0
 8004940:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8004944:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004948:	f003 0301 	and.w	r3, r3, #1
 800494c:	2b00      	cmp	r3, #0
 800494e:	d10c      	bne.n	800496a <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8004950:	79fb      	ldrb	r3, [r7, #7]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d007      	beq.n	8004966 <find_volume+0x82>
 8004956:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800495a:	f003 0304 	and.w	r3, r3, #4
 800495e:	2b00      	cmp	r3, #0
 8004960:	d001      	beq.n	8004966 <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8004962:	230a      	movs	r3, #10
 8004964:	e200      	b.n	8004d68 <find_volume+0x484>
			}
			return FR_OK;				/* The file system object is valid */
 8004966:	2300      	movs	r3, #0
 8004968:	e1fe      	b.n	8004d68 <find_volume+0x484>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 800496a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496c:	2200      	movs	r2, #0
 800496e:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8004970:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004972:	b2da      	uxtb	r2, r3
 8004974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004976:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8004978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800497a:	785b      	ldrb	r3, [r3, #1]
 800497c:	4618      	mov	r0, r3
 800497e:	f7fe fd0f 	bl	80033a0 <disk_initialize>
 8004982:	4603      	mov	r3, r0
 8004984:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 8004988:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800498c:	f003 0301 	and.w	r3, r3, #1
 8004990:	2b00      	cmp	r3, #0
 8004992:	d001      	beq.n	8004998 <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8004994:	2303      	movs	r3, #3
 8004996:	e1e7      	b.n	8004d68 <find_volume+0x484>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 8004998:	79fb      	ldrb	r3, [r7, #7]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d007      	beq.n	80049ae <find_volume+0xca>
 800499e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80049a2:	f003 0304 	and.w	r3, r3, #4
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d001      	beq.n	80049ae <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80049aa:	230a      	movs	r3, #10
 80049ac:	e1dc      	b.n	8004d68 <find_volume+0x484>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80049ae:	2300      	movs	r3, #0
 80049b0:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80049b2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80049b4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80049b6:	f7ff ff3f 	bl	8004838 <check_fs>
 80049ba:	4603      	mov	r3, r0
 80049bc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80049c0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80049c4:	2b02      	cmp	r3, #2
 80049c6:	d14b      	bne.n	8004a60 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80049c8:	2300      	movs	r3, #0
 80049ca:	643b      	str	r3, [r7, #64]	; 0x40
 80049cc:	e01f      	b.n	8004a0e <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 80049ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049d0:	f103 0230 	add.w	r2, r3, #48	; 0x30
 80049d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049d6:	011b      	lsls	r3, r3, #4
 80049d8:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 80049dc:	4413      	add	r3, r2
 80049de:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 80049e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e2:	3304      	adds	r3, #4
 80049e4:	781b      	ldrb	r3, [r3, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d006      	beq.n	80049f8 <find_volume+0x114>
 80049ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ec:	3308      	adds	r3, #8
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fe fd72 	bl	80034d8 <ld_dword>
 80049f4:	4602      	mov	r2, r0
 80049f6:	e000      	b.n	80049fa <find_volume+0x116>
 80049f8:	2200      	movs	r2, #0
 80049fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049fc:	009b      	lsls	r3, r3, #2
 80049fe:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8004a02:	440b      	add	r3, r1
 8004a04:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 8004a08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	643b      	str	r3, [r7, #64]	; 0x40
 8004a0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d9dc      	bls.n	80049ce <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8004a14:	2300      	movs	r3, #0
 8004a16:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8004a18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d002      	beq.n	8004a24 <find_volume+0x140>
 8004a1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a20:	3b01      	subs	r3, #1
 8004a22:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8004a24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8004a2c:	4413      	add	r3, r2
 8004a2e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8004a34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d005      	beq.n	8004a46 <find_volume+0x162>
 8004a3a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004a3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004a3e:	f7ff fefb 	bl	8004838 <check_fs>
 8004a42:	4603      	mov	r3, r0
 8004a44:	e000      	b.n	8004a48 <find_volume+0x164>
 8004a46:	2303      	movs	r3, #3
 8004a48:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 8004a4c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d905      	bls.n	8004a60 <find_volume+0x17c>
 8004a54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a56:	3301      	adds	r3, #1
 8004a58:	643b      	str	r3, [r7, #64]	; 0x40
 8004a5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a5c:	2b03      	cmp	r3, #3
 8004a5e:	d9e1      	bls.n	8004a24 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8004a60:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a64:	2b04      	cmp	r3, #4
 8004a66:	d101      	bne.n	8004a6c <find_volume+0x188>
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e17d      	b.n	8004d68 <find_volume+0x484>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 8004a6c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d901      	bls.n	8004a78 <find_volume+0x194>
 8004a74:	230d      	movs	r3, #13
 8004a76:	e177      	b.n	8004d68 <find_volume+0x484>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8004a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7a:	3330      	adds	r3, #48	; 0x30
 8004a7c:	330b      	adds	r3, #11
 8004a7e:	4618      	mov	r0, r3
 8004a80:	f7fe fd12 	bl	80034a8 <ld_word>
 8004a84:	4603      	mov	r3, r0
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d001      	beq.n	8004a90 <find_volume+0x1ac>
 8004a8c:	230d      	movs	r3, #13
 8004a8e:	e16b      	b.n	8004d68 <find_volume+0x484>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8004a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a92:	3330      	adds	r3, #48	; 0x30
 8004a94:	3316      	adds	r3, #22
 8004a96:	4618      	mov	r0, r3
 8004a98:	f7fe fd06 	bl	80034a8 <ld_word>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8004aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d106      	bne.n	8004ab4 <find_volume+0x1d0>
 8004aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aa8:	3330      	adds	r3, #48	; 0x30
 8004aaa:	3324      	adds	r3, #36	; 0x24
 8004aac:	4618      	mov	r0, r3
 8004aae:	f7fe fd13 	bl	80034d8 <ld_dword>
 8004ab2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8004ab4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ab6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ab8:	619a      	str	r2, [r3, #24]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 8004aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abc:	f893 2040 	ldrb.w	r2, [r3, #64]	; 0x40
 8004ac0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8004ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac6:	789b      	ldrb	r3, [r3, #2]
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d005      	beq.n	8004ad8 <find_volume+0x1f4>
 8004acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ace:	789b      	ldrb	r3, [r3, #2]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d001      	beq.n	8004ad8 <find_volume+0x1f4>
 8004ad4:	230d      	movs	r3, #13
 8004ad6:	e147      	b.n	8004d68 <find_volume+0x484>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8004ad8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ada:	789b      	ldrb	r3, [r3, #2]
 8004adc:	461a      	mov	r2, r3
 8004ade:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004ae0:	fb02 f303 	mul.w	r3, r2, r3
 8004ae4:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8004ae6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b29a      	uxth	r2, r3
 8004aee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af0:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8004af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004af4:	895b      	ldrh	r3, [r3, #10]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d008      	beq.n	8004b0c <find_volume+0x228>
 8004afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afc:	895b      	ldrh	r3, [r3, #10]
 8004afe:	461a      	mov	r2, r3
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	895b      	ldrh	r3, [r3, #10]
 8004b04:	3b01      	subs	r3, #1
 8004b06:	4013      	ands	r3, r2
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d001      	beq.n	8004b10 <find_volume+0x22c>
 8004b0c:	230d      	movs	r3, #13
 8004b0e:	e12b      	b.n	8004d68 <find_volume+0x484>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8004b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b12:	3330      	adds	r3, #48	; 0x30
 8004b14:	3311      	adds	r3, #17
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7fe fcc6 	bl	80034a8 <ld_word>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	461a      	mov	r2, r3
 8004b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b22:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8004b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b26:	891b      	ldrh	r3, [r3, #8]
 8004b28:	f003 030f 	and.w	r3, r3, #15
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d001      	beq.n	8004b36 <find_volume+0x252>
 8004b32:	230d      	movs	r3, #13
 8004b34:	e118      	b.n	8004d68 <find_volume+0x484>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8004b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b38:	3330      	adds	r3, #48	; 0x30
 8004b3a:	3313      	adds	r3, #19
 8004b3c:	4618      	mov	r0, r3
 8004b3e:	f7fe fcb3 	bl	80034a8 <ld_word>
 8004b42:	4603      	mov	r3, r0
 8004b44:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8004b46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d106      	bne.n	8004b5a <find_volume+0x276>
 8004b4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b4e:	3330      	adds	r3, #48	; 0x30
 8004b50:	3320      	adds	r3, #32
 8004b52:	4618      	mov	r0, r3
 8004b54:	f7fe fcc0 	bl	80034d8 <ld_dword>
 8004b58:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 8004b5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b5c:	3330      	adds	r3, #48	; 0x30
 8004b5e:	330e      	adds	r3, #14
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fca1 	bl	80034a8 <ld_word>
 8004b66:	4603      	mov	r3, r0
 8004b68:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 8004b6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d101      	bne.n	8004b74 <find_volume+0x290>
 8004b70:	230d      	movs	r3, #13
 8004b72:	e0f9      	b.n	8004d68 <find_volume+0x484>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8004b74:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004b76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b78:	4413      	add	r3, r2
 8004b7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b7c:	8912      	ldrh	r2, [r2, #8]
 8004b7e:	0912      	lsrs	r2, r2, #4
 8004b80:	b292      	uxth	r2, r2
 8004b82:	4413      	add	r3, r2
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8004b86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d201      	bcs.n	8004b92 <find_volume+0x2ae>
 8004b8e:	230d      	movs	r3, #13
 8004b90:	e0ea      	b.n	8004d68 <find_volume+0x484>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8004b92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004b94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b96:	1ad3      	subs	r3, r2, r3
 8004b98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b9a:	8952      	ldrh	r2, [r2, #10]
 8004b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004ba0:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8004ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d103      	bne.n	8004bb0 <find_volume+0x2cc>
 8004ba8:	230d      	movs	r3, #13
 8004baa:	e0dd      	b.n	8004d68 <find_volume+0x484>
 8004bac:	20000028 	.word	0x20000028
		fmt = FS_FAT32;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8004bbc:	4293      	cmp	r3, r2
 8004bbe:	d802      	bhi.n	8004bc6 <find_volume+0x2e2>
 8004bc0:	2302      	movs	r3, #2
 8004bc2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8004bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc8:	f640 72f5 	movw	r2, #4085	; 0xff5
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d802      	bhi.n	8004bd6 <find_volume+0x2f2>
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8004bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd8:	1c9a      	adds	r2, r3, #2
 8004bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bdc:	615a      	str	r2, [r3, #20]
		fs->volbase = bsect;							/* Volume start sector */
 8004bde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004be2:	61da      	str	r2, [r3, #28]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8004be4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8004be6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be8:	441a      	add	r2, r3
 8004bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bec:	621a      	str	r2, [r3, #32]
		fs->database = bsect + sysect;					/* Data start sector */
 8004bee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bf2:	441a      	add	r2, r3
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004bf6:	629a      	str	r2, [r3, #40]	; 0x28
		if (fmt == FS_FAT32) {
 8004bf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004bfc:	2b03      	cmp	r3, #3
 8004bfe:	d11e      	bne.n	8004c3e <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8004c00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c02:	3330      	adds	r3, #48	; 0x30
 8004c04:	332a      	adds	r3, #42	; 0x2a
 8004c06:	4618      	mov	r0, r3
 8004c08:	f7fe fc4e 	bl	80034a8 <ld_word>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <find_volume+0x332>
 8004c12:	230d      	movs	r3, #13
 8004c14:	e0a8      	b.n	8004d68 <find_volume+0x484>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8004c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c18:	891b      	ldrh	r3, [r3, #8]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d001      	beq.n	8004c22 <find_volume+0x33e>
 8004c1e:	230d      	movs	r3, #13
 8004c20:	e0a2      	b.n	8004d68 <find_volume+0x484>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8004c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c24:	3330      	adds	r3, #48	; 0x30
 8004c26:	332c      	adds	r3, #44	; 0x2c
 8004c28:	4618      	mov	r0, r3
 8004c2a:	f7fe fc55 	bl	80034d8 <ld_dword>
 8004c2e:	4602      	mov	r2, r0
 8004c30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c32:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8004c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c36:	695b      	ldr	r3, [r3, #20]
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	647b      	str	r3, [r7, #68]	; 0x44
 8004c3c:	e01f      	b.n	8004c7e <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8004c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c40:	891b      	ldrh	r3, [r3, #8]
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d101      	bne.n	8004c4a <find_volume+0x366>
 8004c46:	230d      	movs	r3, #13
 8004c48:	e08e      	b.n	8004d68 <find_volume+0x484>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 8004c4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c4c:	6a1a      	ldr	r2, [r3, #32]
 8004c4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c50:	441a      	add	r2, r3
 8004c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c54:	625a      	str	r2, [r3, #36]	; 0x24
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8004c56:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d103      	bne.n	8004c66 <find_volume+0x382>
 8004c5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	005b      	lsls	r3, r3, #1
 8004c64:	e00a      	b.n	8004c7c <find_volume+0x398>
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	695a      	ldr	r2, [r3, #20]
 8004c6a:	4613      	mov	r3, r2
 8004c6c:	005b      	lsls	r3, r3, #1
 8004c6e:	4413      	add	r3, r2
 8004c70:	085a      	lsrs	r2, r3, #1
 8004c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0301 	and.w	r3, r3, #1
 8004c7a:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8004c7c:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8004c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c80:	699a      	ldr	r2, [r3, #24]
 8004c82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c84:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8004c88:	0a5b      	lsrs	r3, r3, #9
 8004c8a:	429a      	cmp	r2, r3
 8004c8c:	d201      	bcs.n	8004c92 <find_volume+0x3ae>
 8004c8e:	230d      	movs	r3, #13
 8004c90:	e06a      	b.n	8004d68 <find_volume+0x484>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8004c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	611a      	str	r2, [r3, #16]
 8004c9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c9c:	691a      	ldr	r2, [r3, #16]
 8004c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca0:	60da      	str	r2, [r3, #12]
		fs->fsi_flag = 0x80;
 8004ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ca4:	2280      	movs	r2, #128	; 0x80
 8004ca6:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 8004ca8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d149      	bne.n	8004d44 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8004cb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cb2:	3330      	adds	r3, #48	; 0x30
 8004cb4:	3330      	adds	r3, #48	; 0x30
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	f7fe fbf6 	bl	80034a8 <ld_word>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b01      	cmp	r3, #1
 8004cc0:	d140      	bne.n	8004d44 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8004cc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	4619      	mov	r1, r3
 8004cc8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004cca:	f7fe fe9d 	bl	8003a08 <move_window>
 8004cce:	4603      	mov	r3, r0
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d137      	bne.n	8004d44 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8004cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8004cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cdc:	3330      	adds	r3, #48	; 0x30
 8004cde:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8004ce2:	4618      	mov	r0, r3
 8004ce4:	f7fe fbe0 	bl	80034a8 <ld_word>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	461a      	mov	r2, r3
 8004cec:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d127      	bne.n	8004d44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8004cf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cf6:	3330      	adds	r3, #48	; 0x30
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	f7fe fbed 	bl	80034d8 <ld_dword>
 8004cfe:	4603      	mov	r3, r0
 8004d00:	4a1b      	ldr	r2, [pc, #108]	; (8004d70 <find_volume+0x48c>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d11e      	bne.n	8004d44 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8004d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d08:	3330      	adds	r3, #48	; 0x30
 8004d0a:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f7fe fbe2 	bl	80034d8 <ld_dword>
 8004d14:	4603      	mov	r3, r0
 8004d16:	4a17      	ldr	r2, [pc, #92]	; (8004d74 <find_volume+0x490>)
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d113      	bne.n	8004d44 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 8004d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d1e:	3330      	adds	r3, #48	; 0x30
 8004d20:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8004d24:	4618      	mov	r0, r3
 8004d26:	f7fe fbd7 	bl	80034d8 <ld_dword>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2e:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8004d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d32:	3330      	adds	r3, #48	; 0x30
 8004d34:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 8004d38:	4618      	mov	r0, r3
 8004d3a:	f7fe fbcd 	bl	80034d8 <ld_dword>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d42:	60da      	str	r2, [r3, #12]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8004d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d46:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8004d4a:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 8004d4c:	4b0a      	ldr	r3, [pc, #40]	; (8004d78 <find_volume+0x494>)
 8004d4e:	881b      	ldrh	r3, [r3, #0]
 8004d50:	3301      	adds	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <find_volume+0x494>)
 8004d56:	801a      	strh	r2, [r3, #0]
 8004d58:	4b07      	ldr	r3, [pc, #28]	; (8004d78 <find_volume+0x494>)
 8004d5a:	881a      	ldrh	r2, [r3, #0]
 8004d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d5e:	80da      	strh	r2, [r3, #6]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8004d60:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004d62:	f7fe fde9 	bl	8003938 <clear_lock>
#endif
	return FR_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3758      	adds	r7, #88	; 0x58
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	41615252 	.word	0x41615252
 8004d74:	61417272 	.word	0x61417272
 8004d78:	2000002c 	.word	0x2000002c

08004d7c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8004d86:	2309      	movs	r3, #9
 8004d88:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d01c      	beq.n	8004dca <validate+0x4e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d018      	beq.n	8004dca <validate+0x4e>
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d013      	beq.n	8004dca <validate+0x4e>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	889a      	ldrh	r2, [r3, #4]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	88db      	ldrh	r3, [r3, #6]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d10c      	bne.n	8004dca <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	785b      	ldrb	r3, [r3, #1]
 8004db6:	4618      	mov	r0, r3
 8004db8:	f7fe fad8 	bl	800336c <disk_status>
 8004dbc:	4603      	mov	r3, r0
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d101      	bne.n	8004dca <validate+0x4e>
			res = FR_OK;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8004dca:	7bfb      	ldrb	r3, [r7, #15]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d102      	bne.n	8004dd6 <validate+0x5a>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	e000      	b.n	8004dd8 <validate+0x5c>
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	683a      	ldr	r2, [r7, #0]
 8004dda:	6013      	str	r3, [r2, #0]
	return res;
 8004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3710      	adds	r7, #16
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
	...

08004de8 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b088      	sub	sp, #32
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	4613      	mov	r3, r2
 8004df4:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7ff fcd5 	bl	80047ae <get_ldnumber>
 8004e04:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8004e06:	69fb      	ldr	r3, [r7, #28]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	da01      	bge.n	8004e10 <f_mount+0x28>
 8004e0c:	230b      	movs	r3, #11
 8004e0e:	e02b      	b.n	8004e68 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004e10:	4a17      	ldr	r2, [pc, #92]	; (8004e70 <f_mount+0x88>)
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004e18:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d005      	beq.n	8004e2c <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 8004e20:	69b8      	ldr	r0, [r7, #24]
 8004e22:	f7fe fd89 	bl	8003938 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8004e26:	69bb      	ldr	r3, [r7, #24]
 8004e28:	2200      	movs	r2, #0
 8004e2a:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d002      	beq.n	8004e38 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	2200      	movs	r2, #0
 8004e36:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8004e38:	68fa      	ldr	r2, [r7, #12]
 8004e3a:	490d      	ldr	r1, [pc, #52]	; (8004e70 <f_mount+0x88>)
 8004e3c:	69fb      	ldr	r3, [r7, #28]
 8004e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d002      	beq.n	8004e4e <f_mount+0x66>
 8004e48:	79fb      	ldrb	r3, [r7, #7]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <f_mount+0x6a>
 8004e4e:	2300      	movs	r3, #0
 8004e50:	e00a      	b.n	8004e68 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 8004e52:	f107 010c 	add.w	r1, r7, #12
 8004e56:	f107 0308 	add.w	r3, r7, #8
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	f7ff fd41 	bl	80048e4 <find_volume>
 8004e62:	4603      	mov	r3, r0
 8004e64:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8004e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8004e68:	4618      	mov	r0, r3
 8004e6a:	3720      	adds	r7, #32
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	20000028 	.word	0x20000028

08004e74 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b098      	sub	sp, #96	; 0x60
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	60f8      	str	r0, [r7, #12]
 8004e7c:	60b9      	str	r1, [r7, #8]
 8004e7e:	4613      	mov	r3, r2
 8004e80:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d101      	bne.n	8004e8c <f_open+0x18>
 8004e88:	2309      	movs	r3, #9
 8004e8a:	e1ad      	b.n	80051e8 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8004e8c:	79fb      	ldrb	r3, [r7, #7]
 8004e8e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004e92:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8004e94:	79fa      	ldrb	r2, [r7, #7]
 8004e96:	f107 0110 	add.w	r1, r7, #16
 8004e9a:	f107 0308 	add.w	r3, r7, #8
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f7ff fd20 	bl	80048e4 <find_volume>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8004eaa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f040 8191 	bne.w	80051d6 <f_open+0x362>
		dj.obj.fs = fs;
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	617b      	str	r3, [r7, #20]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	f107 0314 	add.w	r3, r7, #20
 8004ebe:	4611      	mov	r1, r2
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f7ff fc03 	bl	80046cc <follow_path>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004ecc:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d11a      	bne.n	8004f0a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8004ed4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004ed8:	b25b      	sxtb	r3, r3
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	da03      	bge.n	8004ee6 <f_open+0x72>
				res = FR_INVALID_NAME;
 8004ede:	2306      	movs	r3, #6
 8004ee0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004ee4:	e011      	b.n	8004f0a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8004ee6:	79fb      	ldrb	r3, [r7, #7]
 8004ee8:	f023 0301 	bic.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	bf14      	ite	ne
 8004ef0:	2301      	movne	r3, #1
 8004ef2:	2300      	moveq	r3, #0
 8004ef4:	b2db      	uxtb	r3, r3
 8004ef6:	461a      	mov	r2, r3
 8004ef8:	f107 0314 	add.w	r3, r7, #20
 8004efc:	4611      	mov	r1, r2
 8004efe:	4618      	mov	r0, r3
 8004f00:	f7fe fbd2 	bl	80036a8 <chk_lock>
 8004f04:	4603      	mov	r3, r0
 8004f06:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8004f0a:	79fb      	ldrb	r3, [r7, #7]
 8004f0c:	f003 031c 	and.w	r3, r3, #28
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d07f      	beq.n	8005014 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8004f14:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d017      	beq.n	8004f4c <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8004f1c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d10e      	bne.n	8004f42 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8004f24:	f7fe fc1c 	bl	8003760 <enq_lock>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d006      	beq.n	8004f3c <f_open+0xc8>
 8004f2e:	f107 0314 	add.w	r3, r7, #20
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7ff fb03 	bl	800453e <dir_register>
 8004f38:	4603      	mov	r3, r0
 8004f3a:	e000      	b.n	8004f3e <f_open+0xca>
 8004f3c:	2312      	movs	r3, #18
 8004f3e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8004f42:	79fb      	ldrb	r3, [r7, #7]
 8004f44:	f043 0308 	orr.w	r3, r3, #8
 8004f48:	71fb      	strb	r3, [r7, #7]
 8004f4a:	e010      	b.n	8004f6e <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004f4c:	7ebb      	ldrb	r3, [r7, #26]
 8004f4e:	f003 0311 	and.w	r3, r3, #17
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d003      	beq.n	8004f5e <f_open+0xea>
					res = FR_DENIED;
 8004f56:	2307      	movs	r3, #7
 8004f58:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8004f5c:	e007      	b.n	8004f6e <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8004f5e:	79fb      	ldrb	r3, [r7, #7]
 8004f60:	f003 0304 	and.w	r3, r3, #4
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d002      	beq.n	8004f6e <f_open+0xfa>
 8004f68:	2308      	movs	r3, #8
 8004f6a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8004f6e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d168      	bne.n	8005048 <f_open+0x1d4>
 8004f76:	79fb      	ldrb	r3, [r7, #7]
 8004f78:	f003 0308 	and.w	r3, r3, #8
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d063      	beq.n	8005048 <f_open+0x1d4>
				dw = GET_FATTIME();
 8004f80:	f7fe f888 	bl	8003094 <get_fattime>
 8004f84:	6538      	str	r0, [r7, #80]	; 0x50
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8004f86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f88:	330e      	adds	r3, #14
 8004f8a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f7fe fae1 	bl	8003554 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	3316      	adds	r3, #22
 8004f96:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fe fadb 	bl	8003554 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8004f9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fa0:	330b      	adds	r3, #11
 8004fa2:	2220      	movs	r2, #32
 8004fa4:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004faa:	4611      	mov	r1, r2
 8004fac:	4618      	mov	r0, r3
 8004fae:	f7ff fa32 	bl	8004416 <ld_clust>
 8004fb2:	64f8      	str	r0, [r7, #76]	; 0x4c
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004fb8:	2200      	movs	r2, #0
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff fa4a 	bl	8004454 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8004fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fc2:	331c      	adds	r3, #28
 8004fc4:	2100      	movs	r1, #0
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	f7fe fac4 	bl	8003554 <st_dword>
					fs->wflag = 1;
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8004fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d037      	beq.n	8005048 <f_open+0x1d4>
						dw = fs->winsect;
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fdc:	653b      	str	r3, [r7, #80]	; 0x50
						res = remove_chain(&dj.obj, cl, 0);
 8004fde:	f107 0314 	add.w	r3, r7, #20
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	f7fe ff5d 	bl	8003ea6 <remove_chain>
 8004fec:	4603      	mov	r3, r0
 8004fee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8004ff2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d126      	bne.n	8005048 <f_open+0x1d4>
							res = move_window(fs, dw);
 8004ffa:	693b      	ldr	r3, [r7, #16]
 8004ffc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fe fd02 	bl	8003a08 <move_window>
 8005004:	4603      	mov	r3, r0
 8005006:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 800500a:	693b      	ldr	r3, [r7, #16]
 800500c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800500e:	3a01      	subs	r2, #1
 8005010:	60da      	str	r2, [r3, #12]
 8005012:	e019      	b.n	8005048 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8005014:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005018:	2b00      	cmp	r3, #0
 800501a:	d115      	bne.n	8005048 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 800501c:	7ebb      	ldrb	r3, [r7, #26]
 800501e:	f003 0310 	and.w	r3, r3, #16
 8005022:	2b00      	cmp	r3, #0
 8005024:	d003      	beq.n	800502e <f_open+0x1ba>
					res = FR_NO_FILE;
 8005026:	2304      	movs	r3, #4
 8005028:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800502c:	e00c      	b.n	8005048 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 800502e:	79fb      	ldrb	r3, [r7, #7]
 8005030:	f003 0302 	and.w	r3, r3, #2
 8005034:	2b00      	cmp	r3, #0
 8005036:	d007      	beq.n	8005048 <f_open+0x1d4>
 8005038:	7ebb      	ldrb	r3, [r7, #26]
 800503a:	f003 0301 	and.w	r3, r3, #1
 800503e:	2b00      	cmp	r3, #0
 8005040:	d002      	beq.n	8005048 <f_open+0x1d4>
						res = FR_DENIED;
 8005042:	2307      	movs	r3, #7
 8005044:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					}
				}
			}
		}
		if (res == FR_OK) {
 8005048:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800504c:	2b00      	cmp	r3, #0
 800504e:	d128      	bne.n	80050a2 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	f003 0308 	and.w	r3, r3, #8
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 800505a:	79fb      	ldrb	r3, [r7, #7]
 800505c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005060:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 800506a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8005070:	79fb      	ldrb	r3, [r7, #7]
 8005072:	f023 0301 	bic.w	r3, r3, #1
 8005076:	2b00      	cmp	r3, #0
 8005078:	bf14      	ite	ne
 800507a:	2301      	movne	r3, #1
 800507c:	2300      	moveq	r3, #0
 800507e:	b2db      	uxtb	r3, r3
 8005080:	461a      	mov	r2, r3
 8005082:	f107 0314 	add.w	r3, r7, #20
 8005086:	4611      	mov	r1, r2
 8005088:	4618      	mov	r0, r3
 800508a:	f7fe fb8b 	bl	80037a4 <inc_lock>
 800508e:	4602      	mov	r2, r0
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	691b      	ldr	r3, [r3, #16]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d102      	bne.n	80050a2 <f_open+0x22e>
 800509c:	2302      	movs	r3, #2
 800509e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				}
			}
		}
#endif

		if (res == FR_OK) {
 80050a2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	f040 8095 	bne.w	80051d6 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80050ac:	693b      	ldr	r3, [r7, #16]
 80050ae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80050b0:	4611      	mov	r1, r2
 80050b2:	4618      	mov	r0, r3
 80050b4:	f7ff f9af 	bl	8004416 <ld_clust>
 80050b8:	4602      	mov	r2, r0
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80050be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050c0:	331c      	adds	r3, #28
 80050c2:	4618      	mov	r0, r3
 80050c4:	f7fe fa08 	bl	80034d8 <ld_dword>
 80050c8:	4602      	mov	r2, r0
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	88da      	ldrh	r2, [r3, #6]
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	79fa      	ldrb	r2, [r7, #7]
 80050e6:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2200      	movs	r2, #0
 80050f2:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	2200      	movs	r2, #0
 80050f8:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3330      	adds	r3, #48	; 0x30
 80050fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005102:	2100      	movs	r1, #0
 8005104:	4618      	mov	r0, r3
 8005106:	f7fe fa72 	bl	80035ee <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 800510a:	79fb      	ldrb	r3, [r7, #7]
 800510c:	f003 0320 	and.w	r3, r3, #32
 8005110:	2b00      	cmp	r3, #0
 8005112:	d060      	beq.n	80051d6 <f_open+0x362>
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	68db      	ldr	r3, [r3, #12]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d05c      	beq.n	80051d6 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	68da      	ldr	r2, [r3, #12]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	895b      	ldrh	r3, [r3, #10]
 8005128:	025b      	lsls	r3, r3, #9
 800512a:	64bb      	str	r3, [r7, #72]	; 0x48
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	65bb      	str	r3, [r7, #88]	; 0x58
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	68db      	ldr	r3, [r3, #12]
 8005136:	657b      	str	r3, [r7, #84]	; 0x54
 8005138:	e016      	b.n	8005168 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800513e:	4618      	mov	r0, r3
 8005140:	f7fe fd1d 	bl	8003b7e <get_fat>
 8005144:	65b8      	str	r0, [r7, #88]	; 0x58
					if (clst <= 1) res = FR_INT_ERR;
 8005146:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005148:	2b01      	cmp	r3, #1
 800514a:	d802      	bhi.n	8005152 <f_open+0x2de>
 800514c:	2302      	movs	r3, #2
 800514e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8005152:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005158:	d102      	bne.n	8005160 <f_open+0x2ec>
 800515a:	2301      	movs	r3, #1
 800515c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8005160:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	657b      	str	r3, [r7, #84]	; 0x54
 8005168:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800516c:	2b00      	cmp	r3, #0
 800516e:	d103      	bne.n	8005178 <f_open+0x304>
 8005170:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005172:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005174:	429a      	cmp	r2, r3
 8005176:	d8e0      	bhi.n	800513a <f_open+0x2c6>
				}
				fp->clust = clst;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800517c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 800517e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8005182:	2b00      	cmp	r3, #0
 8005184:	d127      	bne.n	80051d6 <f_open+0x362>
 8005186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005188:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800518c:	2b00      	cmp	r3, #0
 800518e:	d022      	beq.n	80051d6 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8005194:	4618      	mov	r0, r3
 8005196:	f7fe fcd3 	bl	8003b40 <clust2sect>
 800519a:	6478      	str	r0, [r7, #68]	; 0x44
 800519c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d103      	bne.n	80051aa <f_open+0x336>
						res = FR_INT_ERR;
 80051a2:	2302      	movs	r3, #2
 80051a4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80051a8:	e015      	b.n	80051d6 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80051aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051ac:	0a5a      	lsrs	r2, r3, #9
 80051ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051b0:	441a      	add	r2, r3
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	7858      	ldrb	r0, [r3, #1]
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	6a1a      	ldr	r2, [r3, #32]
 80051c4:	2301      	movs	r3, #1
 80051c6:	f7fe f911 	bl	80033ec <disk_read>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <f_open+0x362>
 80051d0:	2301      	movs	r3, #1
 80051d2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 80051d6:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d002      	beq.n	80051e4 <f_open+0x370>
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2200      	movs	r2, #0
 80051e2:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 80051e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 80051e8:	4618      	mov	r0, r3
 80051ea:	3760      	adds	r7, #96	; 0x60
 80051ec:	46bd      	mov	sp, r7
 80051ee:	bd80      	pop	{r7, pc}

080051f0 <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void* buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b08c      	sub	sp, #48	; 0x30
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
 80051fc:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	UINT wcnt, cc, csect;
	const BYTE *wbuff = (const BYTE*)buff;
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	61fb      	str	r3, [r7, #28]


	*bw = 0;	/* Clear write byte counter */
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);			/* Check validity of the file object */
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f107 0210 	add.w	r2, r7, #16
 800520e:	4611      	mov	r1, r2
 8005210:	4618      	mov	r0, r3
 8005212:	f7ff fdb3 	bl	8004d7c <validate>
 8005216:	4603      	mov	r3, r0
 8005218:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 800521c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005220:	2b00      	cmp	r3, #0
 8005222:	d107      	bne.n	8005234 <f_write+0x44>
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	7d5b      	ldrb	r3, [r3, #21]
 8005228:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800522c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005230:	2b00      	cmp	r3, #0
 8005232:	d002      	beq.n	800523a <f_write+0x4a>
 8005234:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005238:	e14b      	b.n	80054d2 <f_write+0x2e2>
	if (!(fp->flag & FA_WRITE)) LEAVE_FF(fs, FR_DENIED);	/* Check access mode */
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	7d1b      	ldrb	r3, [r3, #20]
 800523e:	f003 0302 	and.w	r3, r3, #2
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <f_write+0x5a>
 8005246:	2307      	movs	r3, #7
 8005248:	e143      	b.n	80054d2 <f_write+0x2e2>

	/* Check fptr wrap-around (file size cannot reach 4GiB on FATxx) */
	if ((!_FS_EXFAT || fs->fs_type != FS_EXFAT) && (DWORD)(fp->fptr + btw) < (DWORD)fp->fptr) {
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	699a      	ldr	r2, [r3, #24]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	441a      	add	r2, r3
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	429a      	cmp	r2, r3
 8005258:	f080 812d 	bcs.w	80054b6 <f_write+0x2c6>
		btw = (UINT)(0xFFFFFFFF - (DWORD)fp->fptr);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	699b      	ldr	r3, [r3, #24]
 8005260:	43db      	mvns	r3, r3
 8005262:	607b      	str	r3, [r7, #4]
	}

	for ( ;  btw;							/* Repeat until all data written */
 8005264:	e127      	b.n	80054b6 <f_write+0x2c6>
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
		if (fp->fptr % SS(fs) == 0) {		/* On the sector boundary? */
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	699b      	ldr	r3, [r3, #24]
 800526a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 80e3 	bne.w	800543a <f_write+0x24a>
			csect = (UINT)(fp->fptr / SS(fs)) & (fs->csize - 1);	/* Sector offset in the cluster */
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	699b      	ldr	r3, [r3, #24]
 8005278:	0a5b      	lsrs	r3, r3, #9
 800527a:	693a      	ldr	r2, [r7, #16]
 800527c:	8952      	ldrh	r2, [r2, #10]
 800527e:	3a01      	subs	r2, #1
 8005280:	4013      	ands	r3, r2
 8005282:	61bb      	str	r3, [r7, #24]
			if (csect == 0) {				/* On the cluster boundary? */
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d143      	bne.n	8005312 <f_write+0x122>
				if (fp->fptr == 0) {		/* On the top of the file? */
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d10c      	bne.n	80052ac <f_write+0xbc>
					clst = fp->obj.sclust;	/* Follow from the origin */
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	689b      	ldr	r3, [r3, #8]
 8005296:	62bb      	str	r3, [r7, #40]	; 0x28
					if (clst == 0) {		/* If no cluster is allocated, */
 8005298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800529a:	2b00      	cmp	r3, #0
 800529c:	d11a      	bne.n	80052d4 <f_write+0xe4>
						clst = create_chain(&fp->obj, 0);	/* create a new cluster chain */
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2100      	movs	r1, #0
 80052a2:	4618      	mov	r0, r3
 80052a4:	f7fe fe64 	bl	8003f70 <create_chain>
 80052a8:	62b8      	str	r0, [r7, #40]	; 0x28
 80052aa:	e013      	b.n	80052d4 <f_write+0xe4>
					}
				} else {					/* On the middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d007      	beq.n	80052c4 <f_write+0xd4>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	699b      	ldr	r3, [r3, #24]
 80052b8:	4619      	mov	r1, r3
 80052ba:	68f8      	ldr	r0, [r7, #12]
 80052bc:	f7fe fef0 	bl	80040a0 <clmt_clust>
 80052c0:	62b8      	str	r0, [r7, #40]	; 0x28
 80052c2:	e007      	b.n	80052d4 <f_write+0xe4>
					} else
#endif
					{
						clst = create_chain(&fp->obj, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 80052c4:	68fa      	ldr	r2, [r7, #12]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4619      	mov	r1, r3
 80052cc:	4610      	mov	r0, r2
 80052ce:	f7fe fe4f 	bl	8003f70 <create_chain>
 80052d2:	62b8      	str	r0, [r7, #40]	; 0x28
					}
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80052d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	f000 80f2 	beq.w	80054c0 <f_write+0x2d0>
				if (clst == 1) ABORT(fs, FR_INT_ERR);
 80052dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d104      	bne.n	80052ec <f_write+0xfc>
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2202      	movs	r2, #2
 80052e6:	755a      	strb	r2, [r3, #21]
 80052e8:	2302      	movs	r3, #2
 80052ea:	e0f2      	b.n	80054d2 <f_write+0x2e2>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 80052ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052f2:	d104      	bne.n	80052fe <f_write+0x10e>
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	2201      	movs	r2, #1
 80052f8:	755a      	strb	r2, [r3, #21]
 80052fa:	2301      	movs	r3, #1
 80052fc:	e0e9      	b.n	80054d2 <f_write+0x2e2>
				fp->clust = clst;			/* Update current cluster */
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005302:	61da      	str	r2, [r3, #28]
				if (fp->obj.sclust == 0) fp->obj.sclust = clst;	/* Set start cluster if the first write */
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d102      	bne.n	8005312 <f_write+0x122>
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005310:	609a      	str	r2, [r3, #8]
			}
#if _FS_TINY
			if (fs->winsect == fp->sect && sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Write-back sector cache */
#else
			if (fp->flag & FA_DIRTY) {		/* Write-back sector cache */
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	7d1b      	ldrb	r3, [r3, #20]
 8005316:	b25b      	sxtb	r3, r3
 8005318:	2b00      	cmp	r3, #0
 800531a:	da18      	bge.n	800534e <f_write+0x15e>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800531c:	693b      	ldr	r3, [r7, #16]
 800531e:	7858      	ldrb	r0, [r3, #1]
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	6a1a      	ldr	r2, [r3, #32]
 800532a:	2301      	movs	r3, #1
 800532c:	f7fe f87e 	bl	800342c <disk_write>
 8005330:	4603      	mov	r3, r0
 8005332:	2b00      	cmp	r3, #0
 8005334:	d004      	beq.n	8005340 <f_write+0x150>
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	2201      	movs	r2, #1
 800533a:	755a      	strb	r2, [r3, #21]
 800533c:	2301      	movs	r3, #1
 800533e:	e0c8      	b.n	80054d2 <f_write+0x2e2>
				fp->flag &= (BYTE)~FA_DIRTY;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	7d1b      	ldrb	r3, [r3, #20]
 8005344:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005348:	b2da      	uxtb	r2, r3
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	751a      	strb	r2, [r3, #20]
			}
#endif
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 800534e:	693a      	ldr	r2, [r7, #16]
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	69db      	ldr	r3, [r3, #28]
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe fbf2 	bl	8003b40 <clust2sect>
 800535c:	6178      	str	r0, [r7, #20]
			if (!sect) ABORT(fs, FR_INT_ERR);
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d104      	bne.n	800536e <f_write+0x17e>
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2202      	movs	r2, #2
 8005368:	755a      	strb	r2, [r3, #21]
 800536a:	2302      	movs	r3, #2
 800536c:	e0b1      	b.n	80054d2 <f_write+0x2e2>
			sect += csect;
 800536e:	697a      	ldr	r2, [r7, #20]
 8005370:	69bb      	ldr	r3, [r7, #24]
 8005372:	4413      	add	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
			cc = btw / SS(fs);				/* When remaining bytes >= sector size, */
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	0a5b      	lsrs	r3, r3, #9
 800537a:	623b      	str	r3, [r7, #32]
			if (cc) {						/* Write maximum contiguous sectors directly */
 800537c:	6a3b      	ldr	r3, [r7, #32]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d03c      	beq.n	80053fc <f_write+0x20c>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	6a3b      	ldr	r3, [r7, #32]
 8005386:	4413      	add	r3, r2
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	8952      	ldrh	r2, [r2, #10]
 800538c:	4293      	cmp	r3, r2
 800538e:	d905      	bls.n	800539c <f_write+0x1ac>
					cc = fs->csize - csect;
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	895b      	ldrh	r3, [r3, #10]
 8005394:	461a      	mov	r2, r3
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	1ad3      	subs	r3, r2, r3
 800539a:	623b      	str	r3, [r7, #32]
				}
				if (disk_write(fs->drv, wbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	7858      	ldrb	r0, [r3, #1]
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	697a      	ldr	r2, [r7, #20]
 80053a4:	69f9      	ldr	r1, [r7, #28]
 80053a6:	f7fe f841 	bl	800342c <disk_write>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d004      	beq.n	80053ba <f_write+0x1ca>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	2201      	movs	r2, #1
 80053b4:	755a      	strb	r2, [r3, #21]
 80053b6:	2301      	movs	r3, #1
 80053b8:	e08b      	b.n	80054d2 <f_write+0x2e2>
				if (fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fs->win, wbuff + ((fs->winsect - sect) * SS(fs)), SS(fs));
					fs->wflag = 0;
				}
#else
				if (fp->sect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	6a1a      	ldr	r2, [r3, #32]
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	1ad3      	subs	r3, r2, r3
 80053c2:	6a3a      	ldr	r2, [r7, #32]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d915      	bls.n	80053f4 <f_write+0x204>
					mem_cpy(fp->buf, wbuff + ((fp->sect - sect) * SS(fs)), SS(fs));
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	6a1a      	ldr	r2, [r3, #32]
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	1ad3      	subs	r3, r2, r3
 80053d6:	025b      	lsls	r3, r3, #9
 80053d8:	69fa      	ldr	r2, [r7, #28]
 80053da:	4413      	add	r3, r2
 80053dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7fe f8e3 	bl	80035ac <mem_cpy>
					fp->flag &= (BYTE)~FA_DIRTY;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	7d1b      	ldrb	r3, [r3, #20]
 80053ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053ee:	b2da      	uxtb	r2, r3
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	751a      	strb	r2, [r3, #20]
				}
#endif
#endif
				wcnt = SS(fs) * cc;		/* Number of bytes transferred */
 80053f4:	6a3b      	ldr	r3, [r7, #32]
 80053f6:	025b      	lsls	r3, r3, #9
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24
				continue;
 80053fa:	e03f      	b.n	800547c <f_write+0x28c>
			if (fp->fptr >= fp->obj.objsize) {	/* Avoid silly cache filling on the growing edge */
				if (sync_window(fs) != FR_OK) ABORT(fs, FR_DISK_ERR);
				fs->winsect = sect;
			}
#else
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	429a      	cmp	r2, r3
 8005404:	d016      	beq.n	8005434 <f_write+0x244>
				fp->fptr < fp->obj.objsize &&
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	699a      	ldr	r2, [r3, #24]
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	68db      	ldr	r3, [r3, #12]
			if (fp->sect != sect && 		/* Fill sector cache with file data */
 800540e:	429a      	cmp	r2, r3
 8005410:	d210      	bcs.n	8005434 <f_write+0x244>
				disk_read(fs->drv, fp->buf, sect, 1) != RES_OK) {
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	7858      	ldrb	r0, [r3, #1]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800541c:	2301      	movs	r3, #1
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	f7fd ffe4 	bl	80033ec <disk_read>
 8005424:	4603      	mov	r3, r0
				fp->fptr < fp->obj.objsize &&
 8005426:	2b00      	cmp	r3, #0
 8005428:	d004      	beq.n	8005434 <f_write+0x244>
					ABORT(fs, FR_DISK_ERR);
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	2201      	movs	r2, #1
 800542e:	755a      	strb	r2, [r3, #21]
 8005430:	2301      	movs	r3, #1
 8005432:	e04e      	b.n	80054d2 <f_write+0x2e2>
			}
#endif
			fp->sect = sect;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	697a      	ldr	r2, [r7, #20]
 8005438:	621a      	str	r2, [r3, #32]
		}
		wcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	699b      	ldr	r3, [r3, #24]
 800543e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005442:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005446:	627b      	str	r3, [r7, #36]	; 0x24
		if (wcnt > btw) wcnt = btw;					/* Clip it by btw if needed */
 8005448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	429a      	cmp	r2, r3
 800544e:	d901      	bls.n	8005454 <f_write+0x264>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	627b      	str	r3, [r7, #36]	; 0x24
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(fs->win + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
		fs->wflag = 1;
#else
		mem_cpy(fp->buf + fp->fptr % SS(fs), wbuff, wcnt);	/* Fit data to the sector */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f103 0230 	add.w	r2, r3, #48	; 0x30
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005462:	4413      	add	r3, r2
 8005464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005466:	69f9      	ldr	r1, [r7, #28]
 8005468:	4618      	mov	r0, r3
 800546a:	f7fe f89f 	bl	80035ac <mem_cpy>
		fp->flag |= FA_DIRTY;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	7d1b      	ldrb	r3, [r3, #20]
 8005472:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005476:	b2da      	uxtb	r2, r3
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	751a      	strb	r2, [r3, #20]
		wbuff += wcnt, fp->fptr += wcnt, fp->obj.objsize = (fp->fptr > fp->obj.objsize) ? fp->fptr : fp->obj.objsize, *bw += wcnt, btw -= wcnt) {
 800547c:	69fa      	ldr	r2, [r7, #28]
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	4413      	add	r3, r2
 8005482:	61fb      	str	r3, [r7, #28]
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	699a      	ldr	r2, [r3, #24]
 8005488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548a:	441a      	add	r2, r3
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	619a      	str	r2, [r3, #24]
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	699b      	ldr	r3, [r3, #24]
 8005498:	429a      	cmp	r2, r3
 800549a:	bf38      	it	cc
 800549c:	461a      	movcc	r2, r3
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	60da      	str	r2, [r3, #12]
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a8:	441a      	add	r2, r3
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	601a      	str	r2, [r3, #0]
 80054ae:	687a      	ldr	r2, [r7, #4]
 80054b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b2:	1ad3      	subs	r3, r2, r3
 80054b4:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	f47f aed4 	bne.w	8005266 <f_write+0x76>
 80054be:	e000      	b.n	80054c2 <f_write+0x2d2>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 80054c0:	bf00      	nop
#endif
	}

	fp->flag |= FA_MODIFIED;				/* Set file change flag */
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	7d1b      	ldrb	r3, [r3, #20]
 80054c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054ca:	b2da      	uxtb	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	751a      	strb	r2, [r3, #20]

	LEAVE_FF(fs, FR_OK);
 80054d0:	2300      	movs	r3, #0
}
 80054d2:	4618      	mov	r0, r3
 80054d4:	3730      	adds	r7, #48	; 0x30
 80054d6:	46bd      	mov	sp, r7
 80054d8:	bd80      	pop	{r7, pc}

080054da <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 80054da:	b580      	push	{r7, lr}
 80054dc:	b086      	sub	sp, #24
 80054de:	af00      	add	r7, sp, #0
 80054e0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f107 0208 	add.w	r2, r7, #8
 80054e8:	4611      	mov	r1, r2
 80054ea:	4618      	mov	r0, r3
 80054ec:	f7ff fc46 	bl	8004d7c <validate>
 80054f0:	4603      	mov	r3, r0
 80054f2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 80054f4:	7dfb      	ldrb	r3, [r7, #23]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d168      	bne.n	80055cc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	7d1b      	ldrb	r3, [r3, #20]
 80054fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005502:	2b00      	cmp	r3, #0
 8005504:	d062      	beq.n	80055cc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	7d1b      	ldrb	r3, [r3, #20]
 800550a:	b25b      	sxtb	r3, r3
 800550c:	2b00      	cmp	r3, #0
 800550e:	da15      	bge.n	800553c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	7858      	ldrb	r0, [r3, #1]
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f103 0130 	add.w	r1, r3, #48	; 0x30
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6a1a      	ldr	r2, [r3, #32]
 800551e:	2301      	movs	r3, #1
 8005520:	f7fd ff84 	bl	800342c <disk_write>
 8005524:	4603      	mov	r3, r0
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <f_sync+0x54>
 800552a:	2301      	movs	r3, #1
 800552c:	e04f      	b.n	80055ce <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	7d1b      	ldrb	r3, [r3, #20]
 8005532:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005536:	b2da      	uxtb	r2, r3
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 800553c:	f7fd fdaa 	bl	8003094 <get_fattime>
 8005540:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8005542:	68ba      	ldr	r2, [r7, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005548:	4619      	mov	r1, r3
 800554a:	4610      	mov	r0, r2
 800554c:	f7fe fa5c 	bl	8003a08 <move_window>
 8005550:	4603      	mov	r3, r0
 8005552:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8005554:	7dfb      	ldrb	r3, [r7, #23]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d138      	bne.n	80055cc <f_sync+0xf2>
					dir = fp->dir_ptr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800555e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	330b      	adds	r3, #11
 8005564:	781a      	ldrb	r2, [r3, #0]
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	330b      	adds	r3, #11
 800556a:	f042 0220 	orr.w	r2, r2, #32
 800556e:	b2d2      	uxtb	r2, r2
 8005570:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	461a      	mov	r2, r3
 800557c:	68f9      	ldr	r1, [r7, #12]
 800557e:	f7fe ff69 	bl	8004454 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	f103 021c 	add.w	r2, r3, #28
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	4619      	mov	r1, r3
 800558e:	4610      	mov	r0, r2
 8005590:	f7fd ffe0 	bl	8003554 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	3316      	adds	r3, #22
 8005598:	6939      	ldr	r1, [r7, #16]
 800559a:	4618      	mov	r0, r3
 800559c:	f7fd ffda 	bl	8003554 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	3312      	adds	r3, #18
 80055a4:	2100      	movs	r1, #0
 80055a6:	4618      	mov	r0, r3
 80055a8:	f7fd ffb9 	bl	800351e <st_word>
					fs->wflag = 1;
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2201      	movs	r2, #1
 80055b0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	4618      	mov	r0, r3
 80055b6:	f7fe fa55 	bl	8003a64 <sync_fs>
 80055ba:	4603      	mov	r3, r0
 80055bc:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	7d1b      	ldrb	r3, [r3, #20]
 80055c2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80055c6:	b2da      	uxtb	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 80055cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80055ce:	4618      	mov	r0, r3
 80055d0:	3718      	adds	r7, #24
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bd80      	pop	{r7, pc}

080055d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 80055d6:	b580      	push	{r7, lr}
 80055d8:	b084      	sub	sp, #16
 80055da:	af00      	add	r7, sp, #0
 80055dc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f7ff ff7b 	bl	80054da <f_sync>
 80055e4:	4603      	mov	r3, r0
 80055e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80055e8:	7bfb      	ldrb	r3, [r7, #15]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d118      	bne.n	8005620 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f107 0208 	add.w	r2, r7, #8
 80055f4:	4611      	mov	r1, r2
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7ff fbc0 	bl	8004d7c <validate>
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d10c      	bne.n	8005620 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	691b      	ldr	r3, [r3, #16]
 800560a:	4618      	mov	r0, r3
 800560c:	f7fe f958 	bl	80038c0 <dec_lock>
 8005610:	4603      	mov	r3, r0
 8005612:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8005614:	7bfb      	ldrb	r3, [r7, #15]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d102      	bne.n	8005620 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8005620:	7bfb      	ldrb	r3, [r7, #15]
}
 8005622:	4618      	mov	r0, r3
 8005624:	3710      	adds	r7, #16
 8005626:	46bd      	mov	sp, r7
 8005628:	bd80      	pop	{r7, pc}
	...

0800562c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 800562c:	b480      	push	{r7}
 800562e:	b087      	sub	sp, #28
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	4613      	mov	r3, r2
 8005638:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 800563a:	2301      	movs	r3, #1
 800563c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800563e:	2300      	movs	r3, #0
 8005640:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8005642:	4b1f      	ldr	r3, [pc, #124]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 8005644:	7a5b      	ldrb	r3, [r3, #9]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d131      	bne.n	80056b0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 800564c:	4b1c      	ldr	r3, [pc, #112]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 800564e:	7a5b      	ldrb	r3, [r3, #9]
 8005650:	b2db      	uxtb	r3, r3
 8005652:	461a      	mov	r2, r3
 8005654:	4b1a      	ldr	r3, [pc, #104]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 8005656:	2100      	movs	r1, #0
 8005658:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 800565a:	4b19      	ldr	r3, [pc, #100]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 800565c:	7a5b      	ldrb	r3, [r3, #9]
 800565e:	b2db      	uxtb	r3, r3
 8005660:	4a17      	ldr	r2, [pc, #92]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 8005662:	009b      	lsls	r3, r3, #2
 8005664:	4413      	add	r3, r2
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 800566a:	4b15      	ldr	r3, [pc, #84]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 800566c:	7a5b      	ldrb	r3, [r3, #9]
 800566e:	b2db      	uxtb	r3, r3
 8005670:	461a      	mov	r2, r3
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 8005674:	4413      	add	r3, r2
 8005676:	79fa      	ldrb	r2, [r7, #7]
 8005678:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 800567a:	4b11      	ldr	r3, [pc, #68]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 800567c:	7a5b      	ldrb	r3, [r3, #9]
 800567e:	b2db      	uxtb	r3, r3
 8005680:	1c5a      	adds	r2, r3, #1
 8005682:	b2d1      	uxtb	r1, r2
 8005684:	4a0e      	ldr	r2, [pc, #56]	; (80056c0 <FATFS_LinkDriverEx+0x94>)
 8005686:	7251      	strb	r1, [r2, #9]
 8005688:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 800568a:	7dbb      	ldrb	r3, [r7, #22]
 800568c:	3330      	adds	r3, #48	; 0x30
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68bb      	ldr	r3, [r7, #8]
 8005692:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8005694:	68bb      	ldr	r3, [r7, #8]
 8005696:	3301      	adds	r3, #1
 8005698:	223a      	movs	r2, #58	; 0x3a
 800569a:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	3302      	adds	r3, #2
 80056a0:	222f      	movs	r2, #47	; 0x2f
 80056a2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	3303      	adds	r3, #3
 80056a8:	2200      	movs	r2, #0
 80056aa:	701a      	strb	r2, [r3, #0]
    ret = 0;
 80056ac:	2300      	movs	r3, #0
 80056ae:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80056b2:	4618      	mov	r0, r3
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr
 80056be:	bf00      	nop
 80056c0:	20000050 	.word	0x20000050

080056c4 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b082      	sub	sp, #8
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80056ce:	2200      	movs	r2, #0
 80056d0:	6839      	ldr	r1, [r7, #0]
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7ff ffaa 	bl	800562c <FATFS_LinkDriverEx>
 80056d8:	4603      	mov	r3, r0
}
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}
	...

080056e4 <__libc_init_array>:
 80056e4:	b570      	push	{r4, r5, r6, lr}
 80056e6:	4d0d      	ldr	r5, [pc, #52]	; (800571c <__libc_init_array+0x38>)
 80056e8:	4c0d      	ldr	r4, [pc, #52]	; (8005720 <__libc_init_array+0x3c>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	2600      	movs	r6, #0
 80056f0:	42a6      	cmp	r6, r4
 80056f2:	d109      	bne.n	8005708 <__libc_init_array+0x24>
 80056f4:	4d0b      	ldr	r5, [pc, #44]	; (8005724 <__libc_init_array+0x40>)
 80056f6:	4c0c      	ldr	r4, [pc, #48]	; (8005728 <__libc_init_array+0x44>)
 80056f8:	f000 f820 	bl	800573c <_init>
 80056fc:	1b64      	subs	r4, r4, r5
 80056fe:	10a4      	asrs	r4, r4, #2
 8005700:	2600      	movs	r6, #0
 8005702:	42a6      	cmp	r6, r4
 8005704:	d105      	bne.n	8005712 <__libc_init_array+0x2e>
 8005706:	bd70      	pop	{r4, r5, r6, pc}
 8005708:	f855 3b04 	ldr.w	r3, [r5], #4
 800570c:	4798      	blx	r3
 800570e:	3601      	adds	r6, #1
 8005710:	e7ee      	b.n	80056f0 <__libc_init_array+0xc>
 8005712:	f855 3b04 	ldr.w	r3, [r5], #4
 8005716:	4798      	blx	r3
 8005718:	3601      	adds	r6, #1
 800571a:	e7f2      	b.n	8005702 <__libc_init_array+0x1e>
 800571c:	08005864 	.word	0x08005864
 8005720:	08005864 	.word	0x08005864
 8005724:	08005864 	.word	0x08005864
 8005728:	08005868 	.word	0x08005868

0800572c <memset>:
 800572c:	4402      	add	r2, r0
 800572e:	4603      	mov	r3, r0
 8005730:	4293      	cmp	r3, r2
 8005732:	d100      	bne.n	8005736 <memset+0xa>
 8005734:	4770      	bx	lr
 8005736:	f803 1b01 	strb.w	r1, [r3], #1
 800573a:	e7f9      	b.n	8005730 <memset+0x4>

0800573c <_init>:
 800573c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800573e:	bf00      	nop
 8005740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005742:	bc08      	pop	{r3}
 8005744:	469e      	mov	lr, r3
 8005746:	4770      	bx	lr

08005748 <_fini>:
 8005748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800574a:	bf00      	nop
 800574c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800574e:	bc08      	pop	{r3}
 8005750:	469e      	mov	lr, r3
 8005752:	4770      	bx	lr
